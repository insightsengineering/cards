% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/process_selectors.R
\name{process_selectors}
\alias{process_selectors}
\alias{process_formula_selectors}
\title{Process tidyselectors}
\usage{
process_selectors(data, ..., env = rlang::caller_env())

process_formula_selectors(data, ..., env = rlang::caller_env())
}
\arguments{
\item{data}{a data frame}

\item{...}{named arguments where the value of the argument is processed with tidyselect.
\itemize{
\item \code{process_selectors()}: the values are tidyselect-compatible selectors
\item \code{process_formula_selectors()}: the values are named lists, list of formulas
a combination of both, or a single formula. Users may pass \code{~value} as a
shortcut for \code{everything() ~ value}.
}}

\item{env}{env to save the results to. Default is the calling environment.}
}
\description{
Functions processes tidyselect arguments passed to functions in the cards package.
The processed values saved to the calling environment, by default.
\itemize{
\item \code{process_selectors()}: the arguments will be processed with tidyselect and
converted to a vector of character column names.
\item \code{process_formula_selectors()}: for arguments that expect named lists or
lists of formulas (where the LHS of the formula is a tidyselector). This
function processes these inputs and returns a named list. If an name is
repeated, the last entry is kept.
}
}
\examples{
example_env <- rlang::new_environment()

process_selectors(ADSL, variables = starts_with("TRT"), env = example_env)
get(x = "variables", envir = example_env)


process_formula_selectors(
  ADSL,
  statistics = list(starts_with("TRT") ~ mean, TRTSDT = min),
  env = example_env
)
get(x = "statistics", envir = example_env)
}
