[{"path":"https://insightsengineering.github.io/cards/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to cards","title":"Contributing to cards","text":"outlines propose change {cards}.","code":""},{"path":"https://insightsengineering.github.io/cards/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to cards","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://insightsengineering.github.io/cards/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to cards","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://insightsengineering.github.io/cards/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to cards","text":"Fork package clone onto computer. Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). Make changes, commit git, create PR. title PR briefly describe change. body PR contain Closes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html. Note first contribution need accept Individual Contributor License Agreement. please leave comment stating “read CLA Document hereby sign CLA” Pull Request.","code":""},{"path":"https://insightsengineering.github.io/cards/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code Style","title":"Contributing to cards","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. apply appropriate style styler please use styler:::style_active_pkg() use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept. helper/non-exported function named period prefix, e.g. .helper_function(). helper/non-exported functions documented roxygen2 indicated . Include #' @keywords internal mark function internal. helper functions appear examples, need use cards::: prefix, e.g. #' @example cards:::.helper_function()","code":""},{"path":"https://insightsengineering.github.io/cards/CONTRIBUTING.html","id":"error-handling","dir":"","previous_headings":"Bigger changes","what":"Error Handling","title":"Contributing to cards","text":"use {cli} package signal errors, warnings, messages users. call cli::cli_abort(), call argument must used correctly message users calling function. general function can re-used check, example, user-passed argument values, shall placed R\\import-standalone-checks.R. checks file re-used among multiple projects. need modify file, please review section standalone scripts.","code":""},{"path":"https://insightsengineering.github.io/cards/CONTRIBUTING.html","id":"package-dependencies","dir":"","previous_headings":"Bigger changes","what":"Package Dependencies","title":"Contributing to cards","text":"Generally, additional package dependencies may added. code add readable using, example, using {tidyverse} function, consider adding shim function one standalone scripts. See section standalone scripts details.","code":""},{"path":"https://insightsengineering.github.io/cards/CONTRIBUTING.html","id":"standalone-scripts","dir":"","previous_headings":"Bigger changes","what":"Standalone Scripts","title":"Contributing to cards","text":"package utilizes standalone scripts used across projects. scripts make available shims common tidyverse functions, can use function without depending package. \"checks\" script series functions check argument values supplied users, provides informative error messages values valid. make changes files directly: rather, update files source location. import-standalone-purrr.R: https://github.com/r-lib/rlang/blob/main/R/standalone-purrr.R import-standalone-forcats.R https://github.com/insightsengineering/standalone/blob/main/R/standalone-forcats.R import-standalone-stringr.R https://github.com/insightsengineering/standalone/blob/main/R/standalone-stringr.R import-standalone-checks.R https://github.com/insightsengineering/standalone/blob/main/R/standalone-checks.R update made, can copy file repo ","code":"usethis::use_standalone(\"r-lib/rlang\", file = \"purrr\") usethis::use_standalone(\"insightsengineering/standalone\", file = \"forcats\") usethis::use_standalone(\"insightsengineering/standalone\", file = \"stringr\") usethis::use_standalone(\"insightsengineering/standalone\", file = \"checks\")"},{"path":"https://insightsengineering.github.io/cards/CONTRIBUTING.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributing to cards","text":"{cards} package exports basic functions creating ARDs (, univariate continuous summaries, tabulations, etc.), utilities creating/working ARDs. new functions create ARDs live {cardx} package.","code":""},{"path":"https://insightsengineering.github.io/cards/CONTRIBUTING.html","id":"deprecation-cycle","dir":"","previous_headings":"","what":"Deprecation Cycle","title":"Contributing to cards","text":"{cards} package soft deprecate 6 months, warn additional 6 months, defunct 6 months total 18 months.","code":""},{"path":"https://insightsengineering.github.io/cards/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to cards","text":"Please note cards project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://insightsengineering.github.io/cards/articles/creating-ards.html","id":"cardx","dir":"Articles","previous_headings":"","what":"{cardx}","title":"Creating New ARDs","text":"{cardx} package extension {cards}. idea {cards} provides core functions create ARDs, {cardx} contains large number extensions implement various, commonly used statistical methods. large number extensions wide variety methods, including (limited ): Regression models ANOVA Chi-squared Test t-test LS Mean Difference Survival Estimates Differences looking include output statistical method first port call see already implemented {cardx}. can find full list available functions . Consider simple t-test comparing mean age (AGE) across two treatments arms (ARM). {cardx} function cardx::ard_stats_t_test() output, see outputs t-test; mean difference, confidence interval limits p-value. ’s also useful see functions inputs; example, can see use equal variances stat FALSE stat_name var.equal. useful re-use, need run test can use ARD see options need use recreate result.","code":"cards::ADSL |>   dplyr::filter(ARM %in% c(\"Xanomeline High Dose\", \"Xanomeline Low Dose\")) |>   cardx::ard_stats_t_test(by = ARM, variables = AGE) #> {cards} data frame: 14 x 9 #>    group1 variable   context   stat_name stat_label      stat #> 1     ARM      AGE stats_t_…    estimate  Mean Dif…    -1.286 #> 2     ARM      AGE stats_t_…   estimate1  Group 1 …    74.381 #> 3     ARM      AGE stats_t_…   estimate2  Group 2 …    75.667 #> 4     ARM      AGE stats_t_…   statistic  t Statis…     -1.03 #> 5     ARM      AGE stats_t_…     p.value    p-value     0.304 #> 6     ARM      AGE stats_t_…   parameter  Degrees …   165.595 #> 7     ARM      AGE stats_t_…    conf.low  CI Lower…     -3.75 #> 8     ARM      AGE stats_t_…   conf.high  CI Upper…     1.179 #> 9     ARM      AGE stats_t_…      method     method Welch Tw… #> 10    ARM      AGE stats_t_… alternative  alternat… two.sided #> 11    ARM      AGE stats_t_…          mu    H0 Mean         0 #> 12    ARM      AGE stats_t_…      paired  Paired t…     FALSE #> 13    ARM      AGE stats_t_…   var.equal  Equal Va…     FALSE #> 14    ARM      AGE stats_t_…  conf.level  CI Confi…      0.95 #> ℹ 3 more variables: fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/articles/creating-ards.html","id":"create-a-new-ard_-function","dir":"Articles","previous_headings":"","what":"Create a new ard_*() function","title":"Creating New ARDs","text":"statistical method want use hasn’t implemented already {cardx}? Implementing new function create ARD statistical method often simple; need write function outputs results named list! ’ll first look broom::tidy() can make even easier us, provide example implement scratch.","code":""},{"path":"https://insightsengineering.github.io/cards/articles/creating-ards.html","id":"using-broomtidy","dir":"Articles","previous_headings":"Create a new ard_*() function","what":"Using broom::tidy()","title":"Creating New ARDs","text":"Typically, user pass function returns scalar value cards::ard_continuous(statistic) argument. However, argument also allows functions return named lists, names list used statistic names. Since data frames tibbles just named lists little formatting, can pass function statistic argument returns single row data frame tibble behavior . column table gives name statistic via column name, corresponding value. Commonly used statistical methods outputs able passed broom::tidy(), convert output tibble. can pass output broom::tidy() cards::ard_continuous(statistic) argument ARD function wish use, leads ARD output like see example, one row per relevant input output statistical method. Please note can use broom::tidy() output directly, see example, output tibble single row. Let’s extend t-test example . time want carry one-sample t-test. can just pass code carry one-sample t-test pass output broom::tidy() statistic argument like : chunk code, focus pass statistic argument: everything() means want run test columns passed variables argument. t.test(x) function carries statistical test, case default arguments. pipe output t.test(x) broom::tidy() converts output test tibble (, remember, just named list!) function ’ve defined (\\(x) t.test(x) |> broom::tidy()) needs included named list, ’ve chosen use label 't_test'. 100 different statistical methods implemented R able ‘tidied’ using broom::tidy(). However, method aim use might , current broom::tidy() implementation might contain information need ARD. case ’ll format output .","code":"cards::ADSL |>   dplyr::filter(ARM %in% c(\"Xanomeline High Dose\", \"Xanomeline Low Dose\")) |>   cards::ard_continuous(     variables = AGE,     statistic = everything() ~ list(t_test = \\(x) t.test(x) |> broom::tidy())   ) |>   dplyr::mutate(context = \"t_test_one_sample\") #> {cards} data frame: 8 x 8 #>   variable   context   stat_name stat_label      stat fmt_fn #> 1      AGE t_test_o…    estimate   estimate    75.024      1 #> 2      AGE t_test_o…   statistic  statistic     120.2      1 #> 3      AGE t_test_o…     p.value    p.value         0      1 #> 4      AGE t_test_o…   parameter  parameter       167      1 #> 5      AGE t_test_o…    conf.low   conf.low    73.792      1 #> 6      AGE t_test_o…   conf.high  conf.high    76.256      1 #> 7      AGE t_test_o…      method     method One Samp…   <fn> #> 8      AGE t_test_o… alternative  alternat… two.sided   <fn> #> ℹ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cards/articles/creating-ards.html","id":"without-broomtidy","dir":"Articles","previous_headings":"Create a new ard_*() function","what":"Without broom::tidy()","title":"Creating New ARDs","text":"mentioned , need define function carries required statistical method outputs named list information wish include ARD. example, let’s write function carries Wilcoxon signed rank test one variable using function wilcox.test. output just want record method p-value. Let’s now use function creating ARD {cards}. Remember just need statistic named list, ’ll call function inside named list. also don’t need specify arguments, case pick one variable x corresponds data testing, case AGE individual treatment arms. see get output 8 rows, 2 rows (one method, one p-value) 4 treatment arms.","code":"wilcox_one_var <- \\(x) wilcox.test(x)[c(\"method\", \"p.value\")] cards::ADSL |>   cards::ard_continuous(     variables = AGE,     by = ARM,     statistic = ~ list(wilcox = wilcox_one_var)   ) #> {cards} data frame: 6 x 10 #>   group1 group1_level variable stat_name stat_label      stat #> 1    ARM      Placebo      AGE    method     method Wilcoxon… #> 2    ARM      Placebo      AGE   p.value    p.value         0 #> 3    ARM    Xanomeli…      AGE    method     method Wilcoxon… #> 4    ARM    Xanomeli…      AGE   p.value    p.value         0 #> 5    ARM    Xanomeli…      AGE    method     method Wilcoxon… #> 6    ARM    Xanomeli…      AGE   p.value    p.value         0 #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/articles/creating-ards.html","id":"complex-inputs","dir":"Articles","previous_headings":"Create a new ard_*() function","what":"Complex inputs","title":"Creating New ARDs","text":"examples great illustrate simple case, perhaps rare scenario implementing statistical method single vector input. update code need implement two-sample t-test? cards::ard_complex() similar cards::ard_continuous(), allows complex inputs function passed statistic argument. cards::ard_continuous(), functions passed must accept single vector, e.g. \\(x) t.test(x). cards::ard_complex(), addition vector passed, data subset, full_data, character , character strata also passed (see cards::ard_complex() full description). function need utilize elements, passed function. result, recommend function accept triple dots handle unused arguments. implementation two-sample t-test may look like :","code":"ttest_two_sample <- \\(x, data, ...) t.test(x ~ data[[\"ARM\"]]) |> broom::tidy()  cards::ADSL |>   dplyr::filter(ARM %in% c(\"Xanomeline High Dose\", \"Xanomeline Low Dose\")) |>   cards::ard_complex(     variables = AGE,     statistic = everything() ~ list(t_test = ttest_two_sample)   ) |>   dplyr::mutate(context = \"t_test_two_sample\") #> {cards} data frame: 10 x 8 #>    variable   context   stat_name stat_label      stat fmt_fn #> 1       AGE t_test_t…    estimate   estimate    -1.286      1 #> 2       AGE t_test_t…   estimate1  estimate1    74.381      1 #> 3       AGE t_test_t…   estimate2  estimate2    75.667      1 #> 4       AGE t_test_t…   statistic  statistic     -1.03      1 #> 5       AGE t_test_t…     p.value    p.value     0.304      1 #> 6       AGE t_test_t…   parameter  parameter   165.595      1 #> 7       AGE t_test_t…    conf.low   conf.low     -3.75      1 #> 8       AGE t_test_t…   conf.high  conf.high     1.179      1 #> 9       AGE t_test_t…      method     method Welch Tw…   <fn> #> 10      AGE t_test_t… alternative  alternat… two.sided   <fn> #> ℹ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cards/articles/creating-ards.html","id":"handling-errors","dir":"Articles","previous_headings":"","what":"Handling errors","title":"Creating New ARDs","text":"Let’s consider happens encounter error statistical method. output see get 4 rows output, error stored error column stat_name stat_label now just take list name “wilcox” define statistic argument. unintended effects downstream code, may relying stat_name stat_label values “method” “p-value”, just output 2 rows per treatment arm. handle can specify expected results function, even encounter error code run can assured output consistent format impact downstream code. ’s example specify expected output using cards::as_cards_fn(): function becomes first argument cards::as_cards_fn(), second argument stat_names specify expected names output list. output shown , error column still populated error. However, now expected 8 rows can see stat_name stat_label match values specified stat_names argument as_cards_fn()—helping us avoid problems code relies output.","code":"wilcox_one_var_error <- function(x) {   stop(\"AN ERROR!\")   wilcox.test(x)[c(\"method\", \"p.value\")] }  cards::ADSL |>   cards::ard_continuous(     variables = AGE,     by = ARM,     statistic = ~ list(wilcox = wilcox_one_var_error)   ) #> {cards} data frame: 3 x 10 #>   group1 group1_level variable stat_name stat_label stat     error #> 1    ARM      Placebo      AGE    wilcox     wilcox      AN ERROR! #> 2    ARM    Xanomeli…      AGE    wilcox     wilcox      AN ERROR! #> 3    ARM    Xanomeli…      AGE    wilcox     wilcox      AN ERROR! #> ℹ 3 more variables: context, fmt_fn, warning wilcox_one_var_error <- cards::as_cards_fn(   wilcox_one_var_error,   stat_names = c(\"method\", \"p.value\") )  cards::ADSL |>   cards::ard_continuous(     variables = AGE,     by = ARM,     statistic = ~ list(wilcox = wilcox_one_var_error)   ) #> {cards} data frame: 6 x 10 #>   group1 group1_level variable stat_name stat_label stat     error #> 1    ARM      Placebo      AGE    method     method      AN ERROR! #> 2    ARM      Placebo      AGE   p.value    p.value      AN ERROR! #> 3    ARM    Xanomeli…      AGE    method     method      AN ERROR! #> 4    ARM    Xanomeli…      AGE   p.value    p.value      AN ERROR! #> 5    ARM    Xanomeli…      AGE    method     method      AN ERROR! #> 6    ARM    Xanomeli…      AGE   p.value    p.value      AN ERROR! #> ℹ 3 more variables: context, fmt_fn, warning"},{"path":"https://insightsengineering.github.io/cards/articles/creating-ards.html","id":"formalizing-your-function","dir":"Articles","previous_headings":"","what":"Formalizing Your Function","title":"Creating New ARDs","text":"writing function used multiple times, example adding package, may want include function’s arguments returned ARD. Returning arguments improves traceability ARD, requires combining function’s default arguments (formals) argument passed user. ard_formals() function helps combine results. example , expand one-sample t-test example argument values passed t.test(...)","code":"my_ard_one_sample_t_test <- function(data, variable, ...) {   # define function to calculate results   t_test_fun <- function(x) t.test(x, ...) |> broom::tidy()   t_test_fun <-     cards::as_cards_fn(       t_test_fun,       c(         \"estimate\", \"statistic\", \"p.value\", \"parameter\",         \"conf.low\", \"conf.high\", \"method\", \"alternative\"       )     )    # create the ARD of results   ard_results <-     cards::ard_continuous(       data = data,       variables = {{ variable }},       statistic = everything() ~ list(t_test = \\(x) t.test(x, ...) |> broom::tidy())     ) |>     dplyr::mutate(context = \"t_test_one_sample\")    # ard of argument values   ard_arguments <-     cards::ard_formals(       fun = asNamespace(\"stats\")[[\"t.test.default\"]],       arg_names = c(\"mu\", \"paired\", \"var.equal\", \"conf.level\"),       passed_args = rlang::dots_list(...)     )    # combine ARDs and fill arguments with missing information   dplyr::bind_rows(ard_results, ard_arguments) |>     dplyr::mutate(dplyr::across(c(variable, context), dplyr::first)) }  cards::ADSL |>   dplyr::filter(ARM %in% c(\"Xanomeline High Dose\", \"Xanomeline Low Dose\")) |>   my_ard_one_sample_t_test(     variable = \"AGE\",     var.equal = TRUE,     conf.level = 0.90   ) #> {cards} data frame: 12 x 8 #>    variable   context   stat_name stat_label      stat fmt_fn #> 1       AGE t_test_o…    estimate   estimate    75.024      1 #> 2       AGE t_test_o…   statistic  statistic     120.2      1 #> 3       AGE t_test_o…     p.value    p.value         0      1 #> 4       AGE t_test_o…   parameter  parameter       167      1 #> 5       AGE t_test_o…    conf.low   conf.low    73.991      1 #> 6       AGE t_test_o…   conf.high  conf.high    76.056      1 #> 7       AGE t_test_o…      method     method One Samp…   <fn> #> 8       AGE t_test_o… alternative  alternat… two.sided   <fn> #> 9       AGE t_test_o…          mu         mu         0   NULL #> 10      AGE t_test_o…      paired     paired     FALSE   NULL #> 11      AGE t_test_o…   var.equal  var.equal      TRUE   NULL #> 12      AGE t_test_o…  conf.level  conf.lev…       0.9   NULL #> ℹ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cards/articles/getting-started.html","id":"demographics","dir":"Articles","previous_headings":"","what":"Demographics","title":"Getting Started","text":"table three types data summaries: continuous variable summary AGE, categorical variable summary AGEGR1, dichotomous variable summary SEX.","code":""},{"path":"https://insightsengineering.github.io/cards/articles/getting-started.html","id":"continuous-summaries","dir":"Articles","previous_headings":"Demographics","what":"Continuous Summaries","title":"Getting Started","text":"get continuous variable summary, use ard_continuous() function {cards} package.","code":"df_continuous_ard <-   ard_continuous(     ADSL,     by = ARM,     variables = AGE,     statistic = ~ continuous_summary_fns(c(\"median\", \"p25\", \"p75\", \"mean\", \"sd\", \"min\", \"max\"))   ) df_continuous_ard |> head(5) #> {cards} data frame: 5 x 10 #>   group1 group1_level variable stat_name stat_label   stat #> 1    ARM      Placebo      AGE    median     Median     76 #> 2    ARM      Placebo      AGE       p25         Q1     69 #> 3    ARM      Placebo      AGE       p75         Q3     82 #> 4    ARM      Placebo      AGE      mean       Mean 75.209 #> 5    ARM      Placebo      AGE        sd         SD   8.59 #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/articles/getting-started.html","id":"categorical-summaries","dir":"Articles","previous_headings":"Demographics","what":"Categorical Summaries","title":"Getting Started","text":"get categorical variable summary, use ard_categorical() function.","code":"df_categorical_ard <-   ard_categorical(     ADSL,     by = ARM,     variables = AGEGR1   ) df_categorical_ard |> head(5) #> {cards} data frame: 5 x 11 #>   group1 group1_level variable variable_level stat_name stat_label  stat #> 1    ARM      Placebo   AGEGR1            <65         n          n    14 #> 2    ARM      Placebo   AGEGR1            <65         N          N    86 #> 3    ARM      Placebo   AGEGR1            <65         p          % 0.163 #> 4    ARM      Placebo   AGEGR1            >80         n          n    30 #> 5    ARM      Placebo   AGEGR1            >80         N          N    86 #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/articles/getting-started.html","id":"dichotomous-summaries","dir":"Articles","previous_headings":"Demographics","what":"Dichotomous Summaries","title":"Getting Started","text":"get dichotomous variable summary, use ard_dichotomous(). case, want show Female (\"F\") level SEX variable specify values argument.","code":"df_dichotomous_ard <-   ard_dichotomous(     ADSL,     by = ARM,     variables = SEX,     value = list(SEX = \"F\")   ) df_dichotomous_ard |> head(5) #> {cards} data frame: 5 x 11 #>   group1 group1_level variable variable_level stat_name stat_label  stat #> 1    ARM      Placebo      SEX              F         n          n    53 #> 2    ARM      Placebo      SEX              F         N          N    86 #> 3    ARM      Placebo      SEX              F         p          % 0.616 #> 4    ARM    Xanomeli…      SEX              F         n          n    40 #> 5    ARM    Xanomeli…      SEX              F         N          N    84 #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/articles/getting-started.html","id":"combine-results","dir":"Articles","previous_headings":"Demographics","what":"Combine Results","title":"Getting Started","text":"last step, can combine objects single object using bind_ard(), similar dplyr::bind_rows() includes additional structural checks results.","code":"bind_ard(   df_continuous_ard,   df_categorical_ard,   df_dichotomous_ard ) #> {cards} data frame: 57 x 11 #>    group1 group1_level variable variable_level stat_name stat_label   stat #> 1     ARM      Placebo      AGE                   median     Median     76 #> 2     ARM      Placebo      AGE                      p25         Q1     69 #> 3     ARM      Placebo      AGE                      p75         Q3     82 #> 4     ARM      Placebo      AGE                     mean       Mean 75.209 #> 5     ARM      Placebo      AGE                       sd         SD   8.59 #> 6     ARM      Placebo      AGE                      min        Min     52 #> 7     ARM      Placebo      AGE                      max        Max     89 #> 8     ARM    Xanomeli…      AGE                   median     Median     76 #> 9     ARM    Xanomeli…      AGE                      p25         Q1   70.5 #> 10    ARM    Xanomeli…      AGE                      p75         Q3     80 #> ℹ 47 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/articles/getting-started.html","id":"shortcut","dir":"Articles","previous_headings":"Demographics","what":"Shortcut","title":"Getting Started","text":"ard_stack() function provides shortcut perform calculations single step. example , data .arguments passed subsequent ard_*() function call. Moreover, also return univariate tabulation .variable, used add counts header row table.","code":"ard_stack(   data = ADSL,   .by = ARM,   ard_continuous(     variables = AGE,     statistic = ~ continuous_summary_fns(c(\"median\", \"p25\", \"p75\", \"mean\", \"sd\", \"min\", \"max\"))   ),   ard_categorical(variables = AGEGR1),   ard_dichotomous(variables = SEX, value = list(SEX = \"F\")) ) #> {cards} data frame: 66 x 11 #>    group1 group1_level variable variable_level stat_name stat_label   stat #> 1     ARM      Placebo      AGE                   median     Median     76 #> 2     ARM      Placebo      AGE                      p25         Q1     69 #> 3     ARM      Placebo      AGE                      p75         Q3     82 #> 4     ARM      Placebo      AGE                     mean       Mean 75.209 #> 5     ARM      Placebo      AGE                       sd         SD   8.59 #> 6     ARM      Placebo      AGE                      min        Min     52 #> 7     ARM      Placebo      AGE                      max        Max     89 #> 8     ARM      Placebo   AGEGR1            <65         n          n     14 #> 9     ARM      Placebo   AGEGR1            <65         N          N     86 #> 10    ARM      Placebo   AGEGR1            <65         p          %  0.163 #> ℹ 56 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/articles/getting-started.html","id":"adverse-events","dir":"Articles","previous_headings":"","what":"Adverse Events","title":"Getting Started","text":"Next, review several examples creating basic adverse events (AE) tables. skip examples utilizing shortcut functions ard_stack_hierarchical() ard_stack_hierarchical_count(). functions utilize multiple calls ard_hierarchical() ard_hierarchical_count() calculate needed summary statistics. computations , make use subset ADAE dataset. also rely ADSL full study population, used denominator rate calculations. match treatment arm variables, need small data manipulation naming treatment variable.","code":"# rename trt variable adsl <- ADSL |>   dplyr::rename(TRTA = TRT01A)  # subset to Treatment emergent AES adae <- ADAE |>   # keep the most reported AEs for a smaller table   dplyr::filter(.by = AETERM, dplyr::n() > 25, TRTEMFL == \"Y\")"},{"path":"https://insightsengineering.github.io/cards/articles/getting-started.html","id":"participant-level-summaries","dir":"Articles","previous_headings":"Adverse Events","what":"Participant-level summaries","title":"Getting Started","text":"common type AE table contains participant-level summaries. , reporting number percentage subjects least one AE system organ class preferred term. ard_stack_hierarchical() function provides shortcut perform calculations needed summary table single step. example , data arguments passed subsequent calculation. function utilizes USUBJID (passed id argument) subject identifier participant-level calculations, ADSL used define denominator. variables = c(AEBODSYS, AEDECOD), function returns rates adverse events AEDECOD nested within AESOC well AESOC. over_variables = TRUE, function also returns rates adverse event across system organ classes preferred terms.","code":"ard_stack_hierarchical(   data = adae,   by = TRTA,   variables = c(AEBODSYS, AEDECOD),   denominator = adsl,   id = USUBJID,   over_variables = TRUE ) #> {cards} data frame: 117 x 13 #>    group1 group1_level group2 group2_level                     variable #> 1    <NA>                <NA>                                      TRTA #> 2    <NA>                <NA>                                      TRTA #> 3    <NA>                <NA>                                      TRTA #> 4    <NA>                <NA>                                      TRTA #> 5    <NA>                <NA>                                      TRTA #> 6    <NA>                <NA>                                      TRTA #> 7    <NA>                <NA>                                      TRTA #> 8    <NA>                <NA>                                      TRTA #> 9    <NA>                <NA>                                      TRTA #> 10   TRTA      Placebo   <NA>              ..ard_hierarchical_overall.. #>    variable_level stat_name stat_label  stat #> 1         Placebo         n          n    86 #> 2         Placebo         N          N   254 #> 3         Placebo         p          % 0.339 #> 4       Xanomeli…         n          n    84 #> 5       Xanomeli…         N          N   254 #> 6       Xanomeli…         p          % 0.331 #> 7       Xanomeli…         n          n    84 #> 8       Xanomeli…         N          N   254 #> 9       Xanomeli…         p          % 0.331 #> 10           TRUE         n          n    30 #> ℹ 107 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/articles/getting-started.html","id":"event-level-summaries","dir":"Articles","previous_headings":"Adverse Events","what":"Event-level Summaries","title":"Getting Started","text":"addition participant-level summaries, event-level summaries often needed. types tables, report total counts AEs , therefore can use ADAE data directly. need count AEs overall, system organ class, preferred term (within system organ class). ard_stack_hierarchical_count() function provides shortcut perform calculations needed summary table single step. example , data arguments passed subsequent calculation. variables = c(AEBODSYS, AEDECOD), function returns counts adverse events AEDECOD nested within AESOC well AESOC. over_variables = TRUE, function also returns counts adverse event across system organ classes preferred terms.","code":"ard_stack_hierarchical_count(   data = adae,   by = TRTA,   variables = c(AEBODSYS, AETERM),   over_variables = TRUE ) #> {cards} data frame: 36 x 13 #>    group1 group1_level   group2 group2_level                     variable #> 1    TRTA      Placebo     <NA>              ..ard_hierarchical_overall.. #> 2    TRTA    Xanomeli…     <NA>              ..ard_hierarchical_overall.. #> 3    TRTA    Xanomeli…     <NA>              ..ard_hierarchical_overall.. #> 4    TRTA      Placebo     <NA>                                  AEBODSYS #> 5    TRTA    Xanomeli…     <NA>                                  AEBODSYS #> 6    TRTA    Xanomeli…     <NA>                                  AEBODSYS #> 7    TRTA      Placebo AEBODSYS    GENERAL …                       AETERM #> 8    TRTA    Xanomeli… AEBODSYS    GENERAL …                       AETERM #> 9    TRTA    Xanomeli… AEBODSYS    GENERAL …                       AETERM #> 10   TRTA      Placebo AEBODSYS    GENERAL …                       AETERM #>    variable_level stat_name stat_label stat #> 1            TRUE         n          n   64 #> 2            TRUE         n          n  176 #> 3            TRUE         n          n  169 #> 4       GENERAL …         n          n   29 #> 5       GENERAL …         n          n   86 #> 6       GENERAL …         n          n   85 #> 7       APPLICAT…         n          n    9 #> 8       APPLICAT…         n          n   12 #> 9       APPLICAT…         n          n   15 #> 10      APPLICAT…         n          n    3 #> ℹ 26 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/articles/structures.html","id":"yaml","dir":"Articles","previous_headings":"","what":"YAML","title":"Other ARD Representations","text":"as_nested_list() function prepares ARD data frame converted YAML object.","code":"ard |>   as_nested_list() |>   yaml::as.yaml() |>   cat() #> variable: #>   AGE: #>     group1: #>       ARM: #>         group1_level: #>           Placebo: #>             stat_name: #>               'N': #>                 stat: 86 #>                 stat_fmt: '86' #>                 warning: ~ #>                 error: ~ #>                 context: continuous #>               mean: #>                 stat: 75.2093023 ..."},{"path":"https://insightsengineering.github.io/cards/articles/structures.html","id":"json","dir":"Articles","previous_headings":"","what":"JSON","title":"Other ARD Representations","text":"as_nested_list() function prepares ARD data frame converted JSON object. Use jsonlite::write_json() function convert JSON write disk simultaneously.","code":"ard |>   as_nested_list() |>   jsonlite::toJSON(pretty = TRUE) #> { #>   \"variable\": { #>     \"AGE\": { #>       \"group1\": { #>         \"ARM\": { #>           \"group1_level\": { #>             \"Placebo\": { #>               \"stat_name\": { #>                 \"N\": { #>                   \"stat\": [86], #>                   \"stat_fmt\": [\"86\"], #>                   \"warning\": {}, #>                   \"error\": {}, #>                   \"context\": [\"continuous\"] #>                 }, ..."},{"path":"https://insightsengineering.github.io/cards/articles/structures.html","id":"rest-api","dir":"Articles","previous_headings":"","what":"REST API","title":"Other ARD Representations","text":"JSON format, ARDs can made accessible via REST APIs. Using {plumber} package, API can created plumber.R file. following code serves API, making available testing. Note: “plumber.R” represents path plumber.R file created . Data requested hosted API via {httr} package converted back nested list using {jsonlite}.","code":"library(cards) library(plumber) library(jsonlite)  #* @get /nested_json #* @serializer unboxedJSON function() {   ard <- bind_ard(     ard_continuous(ADSL, by = \"ARM\", variables = \"AGE\"),     ard_categorical(ADSL, by = \"ARM\", variables = \"AGEGR1\")   )    ard |>     as_nested_list() |>     toJSON() } library(plumber)  pr(\"plumber.R\") |>   pr_run(     host = \"127.0.0.1\",     port = 8000   ) library(httr) library(jsonlite)  GET(\"http://127.0.0.1:8000/nested_json\") |>   content() |>   fromJSON()"},{"path":"https://insightsengineering.github.io/cards/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel D. Sjoberg. Author, maintainer. Becca Krouse. Author. Emily de la Rua. Author. F. Hoffmann-La Roche AG. Copyright holder, funder. GlaxoSmithKline Research & Development Limited. Copyright holder.","code":""},{"path":"https://insightsengineering.github.io/cards/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sjoberg D, Krouse B, de la Rua E (2025). cards: Analysis Results Data. R package version 0.6.0, https://insightsengineering.github.io/cards/, https://github.com/insightsengineering/cards.","code":"@Manual{,   title = {cards: Analysis Results Data},   author = {Daniel D. Sjoberg and Becca Krouse and Emily {de la Rua}},   year = {2025},   note = {R package version 0.6.0,     https://insightsengineering.github.io/cards/},   url = {https://github.com/insightsengineering/cards}, }"},{"path":"https://insightsengineering.github.io/cards/index.html","id":"cards-","dir":"","previous_headings":"","what":"Analysis Results Data","title":"Analysis Results Data","text":"CDISC Analysis Results Standard aims facilitate automation, reproducibility, reusability, traceability analysis results data (ARD). {cards} package creates CDISC Analysis Result Data Sets. Use cases: Quality Control (QC) existing tables figures. Pre-calculate statistics summarized tables figures. Medical writers may easily access statistics place reports without copying pasting reports. Provides consistent format results lends results combined across studies re-use re-analysis.","code":""},{"path":"https://insightsengineering.github.io/cards/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analysis Results Data","text":"Install cards CRAN : can install development version cards GitHub :","code":"install.packages(\"cards\") # install.packages(\"devtools\") devtools::install_github(\"insightsengineering/cards\")"},{"path":"https://insightsengineering.github.io/cards/index.html","id":"extensions","dir":"","previous_headings":"","what":"Extensions","title":"Analysis Results Data","text":"{cards} package exports three types functions: Functions create basic ARD objects. Utilities create new ARD objects. Functions work existing ARD objects. {cardx} R package extension {cards} uses utilities {cards} exports functions creating additional ARD objects––including functions summarize t-tests, Wilcoxon Rank-Sum tests, regression models, .","code":""},{"path":"https://insightsengineering.github.io/cards/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Analysis Results Data","text":"Review Getting Started page examples using ARDs calculate statistics later include tables.","code":"library(cards)  ard_continuous(ADSL, by = \"ARM\", variables = \"AGE\") #> {cards} data frame: 24 x 10 #>    group1 group1_level variable stat_name stat_label   stat #> 1     ARM      Placebo      AGE         N          N     86 #> 2     ARM      Placebo      AGE      mean       Mean 75.209 #> 3     ARM      Placebo      AGE        sd         SD   8.59 #> 4     ARM      Placebo      AGE    median     Median     76 #> 5     ARM      Placebo      AGE       p25         Q1     69 #> 6     ARM      Placebo      AGE       p75         Q3     82 #> 7     ARM      Placebo      AGE       min        Min     52 #> 8     ARM      Placebo      AGE       max        Max     89 #> 9     ARM    Xanomeli…      AGE         N          N     84 #> 10    ARM    Xanomeli…      AGE      mean       Mean 74.381 #> ℹ 14 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":[]},{"path":"https://insightsengineering.github.io/cards/reference/adam.html","id":null,"dir":"Reference","previous_headings":"","what":"Example ADaM Data — adam","title":"Example ADaM Data — adam","text":"Data frame imported CDISC SDTM/ADaM Pilot Project","code":""},{"path":"https://insightsengineering.github.io/cards/reference/adam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example ADaM Data — adam","text":"","code":"ADSL  ADAE  ADTTE"},{"path":"https://insightsengineering.github.io/cards/reference/adam.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example ADaM Data — adam","text":"object class tbl_df (inherits tbl, data.frame) 254 rows 48 columns. object class tbl_df (inherits tbl, data.frame) 1191 rows 55 columns. object class tbl_df (inherits tbl, data.frame) 254 rows 26 columns.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/add_calculated_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Calculated Row — add_calculated_row","title":"Add Calculated Row — add_calculated_row","text":"Use function add new statistic row function statistics ARD.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/add_calculated_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Calculated Row — add_calculated_row","text":"","code":"add_calculated_row(   x,   expr,   stat_name,   by = c(all_ard_groups(), all_ard_variables(), any_of(\"context\")),   stat_label = stat_name,   fmt_fn = NULL )"},{"path":"https://insightsengineering.github.io/cards/reference/add_calculated_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Calculated Row — add_calculated_row","text":"x (card) data frame class 'card' expr (expression) expression stat_name (string) string naming new statistic (tidy-select) Grouping variables calculate statistics within stat_label (string) string statistic label. Default stat_name. fmt_fn (integer, function, string) function integer string can converted function alias_as_fmt_fn().","code":""},{"path":"https://insightsengineering.github.io/cards/reference/add_calculated_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Calculated Row — add_calculated_row","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/add_calculated_row.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Calculated Row — add_calculated_row","text":"","code":"ard_continuous(mtcars, variables = mpg) |>   add_calculated_row(expr = max - min, stat_name = \"range\") #> {cards} data frame: 9 x 8 #>   variable   context stat_name stat_label   stat fmt_fn #> 1      mpg continuo…         N          N     32      0 #> 2      mpg continuo…      mean       Mean 20.091      1 #> 3      mpg continuo…        sd         SD  6.027      1 #> 4      mpg continuo…    median     Median   19.2      1 #> 5      mpg continuo…       p25         Q1  15.35      1 #> 6      mpg continuo…       p75         Q3   22.8      1 #> 7      mpg continuo…       min        Min   10.4      1 #> 8      mpg continuo…       max        Max   33.9      1 #> 9      mpg continuo…     range      range   23.5      1 #> ℹ 2 more variables: warning, error  ard_continuous(mtcars, variables = mpg) |>   add_calculated_row(     expr =       dplyr::case_when(         mean > median ~ \"Right Skew\",         mean < median ~ \"Left Skew\",         .default = \"Symmetric\"       ),     stat_name = \"skew\"   ) #> {cards} data frame: 9 x 8 #>   variable   context stat_name stat_label      stat fmt_fn #> 1      mpg continuo…         N          N        32      0 #> 2      mpg continuo…      mean       Mean    20.091      1 #> 3      mpg continuo…        sd         SD     6.027      1 #> 4      mpg continuo…    median     Median      19.2      1 #> 5      mpg continuo…       p25         Q1     15.35      1 #> 6      mpg continuo…       p75         Q3      22.8      1 #> 7      mpg continuo…       min        Min      10.4      1 #> 8      mpg continuo…       max        Max      33.9      1 #> 9      mpg continuo…      skew       skew Right Sk…   <fn> #> ℹ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/alias_as_fmt_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Alias to Function — alias_as_fmt_fn","title":"Convert Alias to Function — alias_as_fmt_fn","text":"Accepted aliases non-negative integers strings. integers converted functions round statistics number decimal places match integer. formatting strings come form \"xx\", \"xx.x\", \"xx.x%\", etc. number xs appear decimal place indicate number decimal places statistics rounded . number xs appear decimal place indicate leading spaces added result. string ends \"%\", results scaled 100 rounding.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/alias_as_fmt_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Alias to Function — alias_as_fmt_fn","text":"","code":"alias_as_fmt_fn(x, variable, stat_name)"},{"path":"https://insightsengineering.github.io/cards/reference/alias_as_fmt_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Alias to Function — alias_as_fmt_fn","text":"x (integer, string, function) non-negative integer, string alias, function variable (character) variable whose statistic formatted stat_name (character) name statistic formatted","code":""},{"path":"https://insightsengineering.github.io/cards/reference/alias_as_fmt_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Alias to Function — alias_as_fmt_fn","text":"function","code":""},{"path":"https://insightsengineering.github.io/cards/reference/alias_as_fmt_fn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Alias to Function — alias_as_fmt_fn","text":"","code":"alias_as_fmt_fn(1) #> function(x) { #>     # round and scale vector #>     res <- #>       ifelse( #>         is.na(x), #>         NA_character_, #>         format(round_fun(x * scale, digits = digits), nsmall = digits) |> str_trim() #>       ) #>  #>  #>     # if width provided, pad formatted result #>     if (!is.null(width)) { #>       res <- #>         ifelse( #>           nchar(res) >= width | is.na(res), #>           res, #>           paste0(strrep(\" \", width - nchar(res)), res) #>         ) #>     } #>  #>     # return final formatted vector #>     res #>   } #> <environment: 0x561ade4bca50> alias_as_fmt_fn(\"xx.x\") #> function(x) { #>     # round and scale vector #>     res <- #>       ifelse( #>         is.na(x), #>         NA_character_, #>         format(round_fun(x * scale, digits = digits), nsmall = digits) |> str_trim() #>       ) #>  #>  #>     # if width provided, pad formatted result #>     if (!is.null(width)) { #>       res <- #>         ifelse( #>           nchar(res) >= width | is.na(res), #>           res, #>           paste0(strrep(\" \", width - nchar(res)), res) #>         ) #>     } #>  #>     # return final formatted vector #>     res #>   } #> <environment: 0x561adfbdb000>"},{"path":"https://insightsengineering.github.io/cards/reference/apply_fmt_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Formatting Functions — apply_fmt_fn","title":"Apply Formatting Functions — apply_fmt_fn","text":"Apply formatting functions raw statistics. Function aliases converted functions using alias_as_fmt_fn().","code":""},{"path":"https://insightsengineering.github.io/cards/reference/apply_fmt_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Formatting Functions — apply_fmt_fn","text":"","code":"apply_fmt_fn(x, replace = FALSE)"},{"path":"https://insightsengineering.github.io/cards/reference/apply_fmt_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Formatting Functions — apply_fmt_fn","text":"x (data.frame) ARD data frame class 'card' replace (scalar logical) logical indicating whether replace values 'stat_fmt' column (present). Default FALSE.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/apply_fmt_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Formatting Functions — apply_fmt_fn","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/apply_fmt_fn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply Formatting Functions — apply_fmt_fn","text":"","code":"ard_continuous(ADSL, variables = \"AGE\") |>   apply_fmt_fn() #> {cards} data frame: 8 x 9 #>   variable   context stat_name stat_label   stat stat_fmt #> 1      AGE continuo…         N          N    254      254 #> 2      AGE continuo…      mean       Mean 75.087     75.1 #> 3      AGE continuo…        sd         SD  8.246      8.2 #> 4      AGE continuo…    median     Median     77     77.0 #> 5      AGE continuo…       p25         Q1     70     70.0 #> 6      AGE continuo…       p75         Q3     81     81.0 #> 7      AGE continuo…       min        Min     51     51.0 #> 8      AGE continuo…       max        Max     89     89.0 #> ℹ 3 more variables: fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/ard_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Attributes — ard_attributes","title":"ARD Attributes — ard_attributes","text":"Add variable attributes ARD data frame. label attribute added columns, label specified label set column using label= argument, column name placed label statistic. class attribute also returned columns. attribute returned attributes() also added, e.g. factor levels.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Attributes — ard_attributes","text":"","code":"ard_attributes(data, ...)  # S3 method for class 'data.frame' ard_attributes(data, variables = everything(), label = NULL, ...)  # Default S3 method ard_attributes(data, ...)"},{"path":"https://insightsengineering.github.io/cards/reference/ard_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Attributes — ard_attributes","text":"data (data.frame) data frame ... dots future extensions must empty. variables (tidy-select) variables include label (named list) named list variable labels, e.g. list(cyl = \". Cylinders\"). Default NULL","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Attributes — ard_attributes","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Attributes — ard_attributes","text":"","code":"df <- dplyr::tibble(var1 = letters, var2 = LETTERS) attr(df$var1, \"label\") <- \"Lowercase Letters\"  ard_attributes(df, variables = everything()) #> {cards} data frame: 4 x 8 #>   variable   context stat_name stat_label      stat fmt_fn #> 1     var1 attribut…     label  Variable… Lowercas…   <fn> #> 2     var1 attribut…     class  Variable… character   NULL #> 3     var2 attribut…     label  Variable…      var2   <fn> #> 4     var2 attribut…     class  Variable… character   NULL #> ℹ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/ard_categorical.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorical ARD Statistics — ard_categorical","title":"Categorical ARD Statistics — ard_categorical","text":"Compute Analysis Results Data (ARD) categorical summary statistics.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_categorical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorical ARD Statistics — ard_categorical","text":"","code":"ard_categorical(data, ...)  # S3 method for class 'data.frame' ard_categorical(   data,   variables,   by = dplyr::group_vars(data),   strata = NULL,   statistic = everything() ~ c(\"n\", \"p\", \"N\"),   denominator = \"column\",   fmt_fn = NULL,   stat_label = everything() ~ default_stat_labels(),   ... )"},{"path":"https://insightsengineering.github.io/cards/reference/ard_categorical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorical ARD Statistics — ard_categorical","text":"data (data.frame) data frame ... Arguments passed methods. variables (tidy-select) columns include summaries. Default everything(). , strata (tidy-select) columns use grouping stratifying table output. Arguments similar, important distinction: : results tabulated combinations columns specified, including unobserved combinations unobserved factor levels. strata: results tabulated observed combinations columns specified. Arguments may used conjunction one another. statistic (formula-list-selector) named list, list formulas, single formula list element one  c(\"n\", \"N\", \"p\", \"n_cum\", \"p_cum\") (RHS formula). denominator (string, data.frame, integer) Specify argument change denominator, e.g. \"N\" statistic. Default 'column'. See details. fmt_fn (formula-list-selector) named list, list formulas, single formula list element named list functions (RHS formula), e.g. list(mpg = list(mean = \\(x) round(x, digits = 2) |> .character())). stat_label (formula-list-selector) named list, list formulas, single formula list element either named list list formulas defining statistic labels, e.g. everything() ~ list(n = \"n\", p = \"pct\") everything() ~ list(n ~ \"n\", p ~ \"pct\").","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_categorical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorical ARD Statistics — ard_categorical","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_categorical.html","id":"denominators","dir":"Reference","previous_headings":"","what":"Denominators","title":"Categorical ARD Statistics — ard_categorical","text":"default, ard_categorical() function returns statistics \"n\", \"N\", \"p\", little \"n\" counts variable levels, big \"N\" number non-missing observations. default calculation percentage merely p = n/N. However, sometimes necessary provide different \"N\" use denominator calculation. example, calculation rates various observed adverse events, may need update denominator number enrolled subjects. cases, use denominator argument specify new definition \"N\", subsequently \"p\". argument expects one following inputs: string: one \"column\", \"row\", \"cell\". \"column\", default, returns percentages sum equal one within variable data frame subset /strata. \"row\" gives 'row' percentages /strata columns 'top' cross table, variables rows. well-defined single strata variable, care must taken ensure results expect. \"cell\" gives percentages denominator number non-missing rows source data frame. data frame. columns data frame overlap /strata columns used calculate new \"N\". integer. single integer used new \"N\" structured data frame. data frame include columns /strata. last column must named \"...ard_N...\". integers column used updated \"N\" calculations. Lastly, p statistic returned, proportion returned—bounded [0, 1]. However, default function format statistic scales proportion 100 percentage returned matches default statistic label '%'. get formatted values, pass ARD apply_fmt_fn().","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_categorical.html","id":"other-statistics","dir":"Reference","previous_headings":"","what":"Other Statistics","title":"Categorical ARD Statistics — ard_categorical","text":"cases, may need kinds statistics categorical variables. Despite name, ard_continuous() can used obtain statistics. example , calculate mode categorical variable.","code":"get_mode <- function(x) {   table(x) |> sort(decreasing = TRUE) |> names() |> getElement(1L) }  ADSL |>   ard_continuous(     variables = AGEGR1,     statistic = list(AGEGR1 = list(mode = get_mode))   ) #> {cards} data frame: 1 x 8 #>   variable   context stat_name stat_label  stat fmt_fn #> 1   AGEGR1 continuo…      mode       mode 65-80   <fn> #> i 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/ard_categorical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorical ARD Statistics — ard_categorical","text":"","code":"ard_categorical(ADSL, by = \"ARM\", variables = \"AGEGR1\") #> {cards} data frame: 27 x 11 #>    group1 group1_level variable variable_level stat_name stat_label  stat #> 1     ARM      Placebo   AGEGR1          65-80         n          n    42 #> 2     ARM      Placebo   AGEGR1          65-80         N          N    86 #> 3     ARM      Placebo   AGEGR1          65-80         p          % 0.488 #> 4     ARM      Placebo   AGEGR1            <65         n          n    14 #> 5     ARM      Placebo   AGEGR1            <65         N          N    86 #> 6     ARM      Placebo   AGEGR1            <65         p          % 0.163 #> 7     ARM      Placebo   AGEGR1            >80         n          n    30 #> 8     ARM      Placebo   AGEGR1            >80         N          N    86 #> 9     ARM      Placebo   AGEGR1            >80         p          % 0.349 #> 10    ARM    Xanomeli…   AGEGR1          65-80         n          n    55 #> ℹ 17 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error  ADSL |>   dplyr::group_by(ARM) |>   ard_categorical(     variables = \"AGEGR1\",     statistic = everything() ~ \"n\"   ) #> {cards} data frame: 9 x 11 #>   group1 group1_level variable variable_level stat_name stat_label stat #> 1    ARM      Placebo   AGEGR1          65-80         n          n   42 #> 2    ARM      Placebo   AGEGR1            <65         n          n   14 #> 3    ARM      Placebo   AGEGR1            >80         n          n   30 #> 4    ARM    Xanomeli…   AGEGR1          65-80         n          n   55 #> 5    ARM    Xanomeli…   AGEGR1            <65         n          n   11 #> 6    ARM    Xanomeli…   AGEGR1            >80         n          n   18 #> 7    ARM    Xanomeli…   AGEGR1          65-80         n          n   47 #> 8    ARM    Xanomeli…   AGEGR1            <65         n          n    8 #> 9    ARM    Xanomeli…   AGEGR1            >80         n          n   29 #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/ard_complex.html","id":null,"dir":"Reference","previous_headings":"","what":"Complex ARD Summaries — ard_complex","title":"Complex ARD Summaries — ard_complex","text":"Function similar ard_continuous(), allows complex summaries. ard_continuous(statistic) allows univariable function, ard_complex(statistic) can handle complex data summaries.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_complex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Complex ARD Summaries — ard_complex","text":"","code":"ard_complex(data, ...)  # S3 method for class 'data.frame' ard_complex(   data,   variables,   by = dplyr::group_vars(data),   strata = NULL,   statistic,   fmt_fn = NULL,   stat_label = everything() ~ default_stat_labels(),   ... )"},{"path":"https://insightsengineering.github.io/cards/reference/ard_complex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Complex ARD Summaries — ard_complex","text":"data (data.frame) data frame ... Arguments passed methods. variables (tidy-select) columns include summaries. , strata (tidy-select) columns tabulate /stratify summary statistic calculation. Arguments similar, important distinction: : results calculated combinations columns specified, including unobserved combinations unobserved factor levels. strata: results calculated observed combinations columns specified. Arguments may used conjunction one another. statistic (formula-list-selector) form statistics argument identical ard_continuous(statistic) argument, except summary function must accept following arguments: x: vector data: data frame subset /strata columns rows \"variable\" NA removed. full_data: full data frame : character vector variables strata: character vector strata variables unlikely one function need elements, recommended function passed accepts ... unused arguments properly ignored. ... also allows function perhaps updated future passed arguments. example, one needs second variable data frame, function inputs may look like: foo(x, data, ...) fmt_fn (formula-list-selector) named list, list formulas, single formula list element named list functions (RHS formula), e.g. list(mpg = list(mean = \\(x) round(x, digits = 2) |> .character())). stat_label (formula-list-selector) named list, list formulas, single formula list element either named list list formulas defining statistic labels, e.g. everything() ~ list(mean = \"Mean\", sd = \"SD\") everything() ~ list(mean ~ \"Mean\", sd ~ \"SD\").","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_complex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Complex ARD Summaries — ard_complex","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_complex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Complex ARD Summaries — ard_complex","text":"","code":"# example how to mimic behavior of `ard_continuous()` ard_complex(   ADSL,   by = \"ARM\",   variables = \"AGE\",   statistic = list(AGE = list(mean = \\(x, ...) mean(x))) ) #> {cards} data frame: 3 x 10 #>   group1 group1_level variable stat_name stat_label   stat #> 1    ARM      Placebo      AGE      mean       Mean 75.209 #> 2    ARM    Xanomeli…      AGE      mean       Mean 74.381 #> 3    ARM    Xanomeli…      AGE      mean       Mean 75.667 #> ℹ 4 more variables: context, fmt_fn, warning, error  # return the grand mean and the mean within the `by` group grand_mean <- function(data, full_data, variable, ...) {   list(     mean = mean(data[[variable]], na.rm = TRUE),     grand_mean = mean(full_data[[variable]], na.rm = TRUE)   ) }  ADSL |>   dplyr::group_by(ARM) |>   ard_complex(     variables = \"AGE\",     statistic = list(AGE = list(means = grand_mean))   ) #> {cards} data frame: 6 x 10 #>   group1 group1_level variable  stat_name stat_label   stat #> 1    ARM      Placebo      AGE       mean       Mean 75.209 #> 2    ARM      Placebo      AGE grand_mean  grand_me… 75.087 #> 3    ARM    Xanomeli…      AGE       mean       Mean 74.381 #> 4    ARM    Xanomeli…      AGE grand_mean  grand_me… 75.087 #> 5    ARM    Xanomeli…      AGE       mean       Mean 75.667 #> 6    ARM    Xanomeli…      AGE grand_mean  grand_me… 75.087 #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/ard_continuous.html","id":null,"dir":"Reference","previous_headings":"","what":"Continuous ARD Statistics — ard_continuous","title":"Continuous ARD Statistics — ard_continuous","text":"Compute Analysis Results Data (ARD) simple continuous summary statistics.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_continuous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Continuous ARD Statistics — ard_continuous","text":"","code":"ard_continuous(data, ...)  # S3 method for class 'data.frame' ard_continuous(   data,   variables,   by = dplyr::group_vars(data),   strata = NULL,   statistic = everything() ~ continuous_summary_fns(),   fmt_fn = NULL,   stat_label = everything() ~ default_stat_labels(),   ... )"},{"path":"https://insightsengineering.github.io/cards/reference/ard_continuous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Continuous ARD Statistics — ard_continuous","text":"data (data.frame) data frame ... Arguments passed methods. variables (tidy-select) columns include summaries. , strata (tidy-select) columns tabulate /stratify summary statistic calculation. Arguments similar, important distinction: : results calculated combinations columns specified, including unobserved combinations unobserved factor levels. strata: results calculated observed combinations columns specified. Arguments may used conjunction one another. statistic (formula-list-selector) named list, list formulas, single formula list element named list functions (RHS formula), e.g. list(mpg = list(mean = \\(x) mean(x))). value assigned variable must also named list, names used reference function element function object. Typically, function return scalar statistic, function returns named list results also acceptable, e.g. list(conf.low = -1, conf.high = 1). However, errors occur, messaging less clear setting. fmt_fn (formula-list-selector) named list, list formulas, single formula list element named list functions (RHS formula), e.g. list(mpg = list(mean = \\(x) round(x, digits = 2) |> .character())). stat_label (formula-list-selector) named list, list formulas, single formula list element either named list list formulas defining statistic labels, e.g. everything() ~ list(mean = \"Mean\", sd = \"SD\") everything() ~ list(mean ~ \"Mean\", sd ~ \"SD\").","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_continuous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Continuous ARD Statistics — ard_continuous","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_continuous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Continuous ARD Statistics — ard_continuous","text":"","code":"ard_continuous(ADSL, by = \"ARM\", variables = \"AGE\") #> {cards} data frame: 24 x 10 #>    group1 group1_level variable stat_name stat_label   stat #> 1     ARM      Placebo      AGE         N          N     86 #> 2     ARM      Placebo      AGE      mean       Mean 75.209 #> 3     ARM      Placebo      AGE        sd         SD   8.59 #> 4     ARM      Placebo      AGE    median     Median     76 #> 5     ARM      Placebo      AGE       p25         Q1     69 #> 6     ARM      Placebo      AGE       p75         Q3     82 #> 7     ARM      Placebo      AGE       min        Min     52 #> 8     ARM      Placebo      AGE       max        Max     89 #> 9     ARM    Xanomeli…      AGE         N          N     84 #> 10    ARM    Xanomeli…      AGE      mean       Mean 74.381 #> ℹ 14 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error  # if a single function returns a named list, the named # results will be placed in the resulting ARD ADSL |>   dplyr::group_by(ARM) |>   ard_continuous(     variables = \"AGE\",     statistic =       ~ list(conf.int = \\(x) t.test(x)[[\"conf.int\"]] |>         as.list() |>         setNames(c(\"conf.low\", \"conf.high\")))   ) #> {cards} data frame: 6 x 10 #>   group1 group1_level variable stat_name stat_label   stat #> 1    ARM      Placebo      AGE  conf.low   conf.low 73.368 #> 2    ARM      Placebo      AGE conf.high  conf.high 77.051 #> 3    ARM    Xanomeli…      AGE  conf.low   conf.low  72.67 #> 4    ARM    Xanomeli…      AGE conf.high  conf.high 76.092 #> 5    ARM    Xanomeli…      AGE  conf.low   conf.low 73.868 #> 6    ARM    Xanomeli…      AGE conf.high  conf.high 77.465 #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/ard_dichotomous.html","id":null,"dir":"Reference","previous_headings":"","what":"Dichotomous ARD Statistics — ard_dichotomous","title":"Dichotomous ARD Statistics — ard_dichotomous","text":"Compute Analysis Results Data (ARD) dichotomous summary statistics.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_dichotomous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dichotomous ARD Statistics — ard_dichotomous","text":"","code":"ard_dichotomous(data, ...)  # S3 method for class 'data.frame' ard_dichotomous(   data,   variables,   by = dplyr::group_vars(data),   strata = NULL,   value = maximum_variable_value(data[variables]),   statistic = everything() ~ c(\"n\", \"N\", \"p\"),   denominator = NULL,   fmt_fn = NULL,   stat_label = everything() ~ default_stat_labels(),   ... )"},{"path":"https://insightsengineering.github.io/cards/reference/ard_dichotomous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dichotomous ARD Statistics — ard_dichotomous","text":"data (data.frame) data frame ... Arguments passed methods. variables (tidy-select) columns include summaries. Default everything(). , strata (tidy-select) columns use grouping stratifying table output. Arguments similar, important distinction: : results tabulated combinations columns specified, including unobserved combinations unobserved factor levels. strata: results tabulated observed combinations columns specified. Arguments may used conjunction one another. value (named list) named list dichotomous values tabulate. Default maximum_variable_value(data), returns largest/last value sort. statistic (formula-list-selector) named list, list formulas, single formula list element one  c(\"n\", \"N\", \"p\", \"n_cum\", \"p_cum\") (RHS formula). denominator (string, data.frame, integer) Specify argument change denominator, e.g. \"N\" statistic. Default 'column'. See details. fmt_fn (formula-list-selector) named list, list formulas, single formula list element named list functions (RHS formula), e.g. list(mpg = list(mean = \\(x) round(x, digits = 2) |> .character())). stat_label (formula-list-selector) named list, list formulas, single formula list element either named list list formulas defining statistic labels, e.g. everything() ~ list(n = \"n\", p = \"pct\") everything() ~ list(n ~ \"n\", p ~ \"pct\").","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_dichotomous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dichotomous ARD Statistics — ard_dichotomous","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_dichotomous.html","id":"denominators","dir":"Reference","previous_headings":"","what":"Denominators","title":"Dichotomous ARD Statistics — ard_dichotomous","text":"default, ard_categorical() function returns statistics \"n\", \"N\", \"p\", little \"n\" counts variable levels, big \"N\" number non-missing observations. default calculation percentage merely p = n/N. However, sometimes necessary provide different \"N\" use denominator calculation. example, calculation rates various observed adverse events, may need update denominator number enrolled subjects. cases, use denominator argument specify new definition \"N\", subsequently \"p\". argument expects one following inputs: string: one \"column\", \"row\", \"cell\". \"column\", default, returns percentages sum equal one within variable data frame subset /strata. \"row\" gives 'row' percentages /strata columns 'top' cross table, variables rows. well-defined single strata variable, care must taken ensure results expect. \"cell\" gives percentages denominator number non-missing rows source data frame. data frame. columns data frame overlap /strata columns used calculate new \"N\". integer. single integer used new \"N\" structured data frame. data frame include columns /strata. last column must named \"...ard_N...\". integers column used updated \"N\" calculations. Lastly, p statistic returned, proportion returned—bounded [0, 1]. However, default function format statistic scales proportion 100 percentage returned matches default statistic label '%'. get formatted values, pass ARD apply_fmt_fn().","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_dichotomous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dichotomous ARD Statistics — ard_dichotomous","text":"","code":"ard_dichotomous(mtcars, by = vs, variables = c(cyl, am), value = list(cyl = 4)) #> {cards} data frame: 12 x 11 #>    group1 group1_level variable variable_level stat_name stat_label  stat #> 1      vs            0      cyl              4         n          n     1 #> 2      vs            0      cyl              4         N          N    18 #> 3      vs            0      cyl              4         p          % 0.056 #> 4      vs            0       am              1         n          n     6 #> 5      vs            0       am              1         N          N    18 #> 6      vs            0       am              1         p          % 0.333 #> 7      vs            1      cyl              4         n          n    10 #> 8      vs            1      cyl              4         N          N    14 #> 9      vs            1      cyl              4         p          % 0.714 #> 10     vs            1       am              1         n          n     7 #> 11     vs            1       am              1         N          N    14 #> 12     vs            1       am              1         p          %   0.5 #> ℹ 4 more variables: context, fmt_fn, warning, error  mtcars |>   dplyr::group_by(vs) |>   ard_dichotomous(     variables = c(cyl, am),     value = list(cyl = 4),     statistic = ~\"p\"   ) #> {cards} data frame: 4 x 11 #>   group1 group1_level variable variable_level stat_name stat_label  stat #> 1     vs            0      cyl              4         p          % 0.056 #> 2     vs            0       am              1         p          % 0.333 #> 3     vs            1      cyl              4         p          % 0.714 #> 4     vs            1       am              1         p          %   0.5 #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/ard_formals.html","id":null,"dir":"Reference","previous_headings":"","what":"Argument Values ARD — ard_formals","title":"Argument Values ARD — ard_formals","text":"Place default passed argument values function ARD structure.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_formals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Argument Values ARD — ard_formals","text":"","code":"ard_formals(fun, arg_names, passed_args = list(), envir = parent.frame())"},{"path":"https://insightsengineering.github.io/cards/reference/ard_formals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Argument Values ARD — ard_formals","text":"fun (function) function passed formals(fun) arg_names (character) character vector argument names return passed_args (named list) named list user-passed arguments. Default list(), returns default values function envir (environment) environment passed formals(envir)","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_formals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Argument Values ARD — ard_formals","text":"partial ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_formals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Argument Values ARD — ard_formals","text":"","code":"# Example 1 ---------------------------------- # add the `mcnemar.test(correct)` argument to an ARD structure ard_formals(fun = mcnemar.test, arg_names = \"correct\") #> {cards} data frame: 1 x 3 #>   stat_name stat_label stat #> 1   correct    correct TRUE  # Example 2 ---------------------------------- # S3 Methods need special handling to access the underlying method ard_formals(   fun = asNamespace(\"stats\")[[\"t.test.default\"]],   arg_names = c(\"mu\", \"paired\", \"var.equal\", \"conf.level\"),   passed_args = list(conf.level = 0.90) ) #> {cards} data frame: 4 x 3 #>    stat_name stat_label  stat #> 1         mu         mu     0 #> 2     paired     paired FALSE #> 3  var.equal  var.equal FALSE #> 4 conf.level  conf.lev…   0.9"},{"path":"https://insightsengineering.github.io/cards/reference/ard_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical ARD Statistics — ard_hierarchical","title":"Hierarchical ARD Statistics — ard_hierarchical","text":"Functions ard_hierarchical() ard_hierarchical_count() primarily helper functions ard_stack_hierarchical() ard_stack_hierarchical_count(), meaning rare user needs call ard_hierarchical()/ard_hierarchical_count() directly. Performs hierarchical nested tabulations, e.g. tabulates AE terms nested within AE system organ class. ard_hierarchical() includes summaries last variable listed variables argument, nested within variables included. ard_hierarchical_count() includes summaries variables listed variables argument summary nested within preceding variables, e.g. variables=c(AESOC, AEDECOD) summarizes AEDECOD nested AESOC, also summarizes counts AESOC.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical ARD Statistics — ard_hierarchical","text":"","code":"ard_hierarchical(data, ...)  ard_hierarchical_count(data, ...)  # S3 method for class 'data.frame' ard_hierarchical(   data,   variables,   by = dplyr::group_vars(data),   statistic = everything() ~ c(\"n\", \"N\", \"p\"),   denominator = NULL,   fmt_fn = NULL,   stat_label = everything() ~ default_stat_labels(),   id = NULL,   ... )  # S3 method for class 'data.frame' ard_hierarchical_count(   data,   variables,   by = dplyr::group_vars(data),   fmt_fn = NULL,   stat_label = everything() ~ default_stat_labels(),   ... )"},{"path":"https://insightsengineering.github.io/cards/reference/ard_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical ARD Statistics — ard_hierarchical","text":"data (data.frame) data frame ... Arguments passed methods. variables (tidy-select) variables perform nested/hierarchical tabulations within. (tidy-select) variables perform tabulations . combinations variables specified appear results. Default dplyr::group_vars(data). statistic (formula-list-selector) named list, list formulas, single formula list element one  c(\"n\", \"N\", \"p\", \"n_cum\", \"p_cum\") (RHS formula). denominator (data.frame, integer) used define denominator enhance output. argument required ard_hierarchical() optional ard_hierarchical_count(). univariate tabulations variables calculated denominator, data frame passed, e.g. tabulation treatment assignment counts may appear header table. denominator argument must specified id used calculate event rates. fmt_fn (formula-list-selector) named list, list formulas, single formula list element named list functions (RHS formula), e.g. list(mpg = list(mean = \\(x) round(x, digits = 2) |> .character())). stat_label (formula-list-selector) named list, list formulas, single formula list element either named list list formulas defining statistic labels, e.g. everything() ~ list(n = \"n\", p = \"pct\") everything() ~ list(n ~ \"n\", p ~ \"pct\"). id (tidy-select) optional argument used assert duplicates within c(id, variables) columns.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical ARD Statistics — ard_hierarchical","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical ARD Statistics — ard_hierarchical","text":"","code":"ard_hierarchical(   data = ADAE |>     dplyr::slice_tail(n = 1L, by = c(USUBJID, TRTA, AESOC, AEDECOD)),   variables = c(AESOC, AEDECOD),   by = TRTA,   id = USUBJID,   denominator = ADSL |> dplyr::rename(TRTA = ARM) ) #> {cards} data frame: 2178 x 13 #>    group1 group1_level group2 group2_level variable variable_level stat_name #> 1    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      ATRIAL F…         n #> 2    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      ATRIAL F…         N #> 3    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      ATRIAL F…         p #> 4    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      ATRIAL F…         n #> 5    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      ATRIAL F…         N #> 6    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      ATRIAL F…         p #> 7    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      ATRIAL H…         n #> 8    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      ATRIAL H…         N #> 9    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      ATRIAL H…         p #> 10   TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      ATRIOVEN…         n #>    stat_label  stat #> 1           n     1 #> 2           N    86 #> 3           % 0.012 #> 4           n     0 #> 5           N    86 #> 6           %     0 #> 7           n     1 #> 8           N    86 #> 9           % 0.012 #> 10          n     1 #> ℹ 2168 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error  ard_hierarchical_count(   data = ADAE,   variables = c(AESOC, AEDECOD),   by = TRTA ) #> {cards} data frame: 726 x 13 #>    group1 group1_level group2 group2_level variable variable_level stat_name #> 1    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      ATRIAL F…         n #> 2    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      ATRIAL F…         n #> 3    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      ATRIAL H…         n #> 4    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      ATRIOVEN…         n #> 5    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      ATRIOVEN…         n #> 6    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      BRADYCAR…         n #> 7    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      BUNDLE B…         n #> 8    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      BUNDLE B…         n #> 9    TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      CARDIAC …         n #> 10   TRTA      Placebo  AESOC    CARDIAC …  AEDECOD      CARDIAC …         n #>    stat_label stat #> 1           n    1 #> 2           n    0 #> 3           n    2 #> 4           n    1 #> 5           n    2 #> 6           n    4 #> 7           n    1 #> 8           n    2 #> 9           n    0 #> 10          n    1 #> ℹ 716 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/ard_missing.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing ARD Statistics — ard_missing","title":"Missing ARD Statistics — ard_missing","text":"Compute Analysis Results Data (ARD) statistics related data missingness.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_missing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing ARD Statistics — ard_missing","text":"","code":"ard_missing(data, ...)  # S3 method for class 'data.frame' ard_missing(   data,   variables,   by = dplyr::group_vars(data),   statistic = everything() ~ c(\"N_obs\", \"N_miss\", \"N_nonmiss\", \"p_miss\", \"p_nonmiss\"),   fmt_fn = NULL,   stat_label = everything() ~ default_stat_labels(),   ... )"},{"path":"https://insightsengineering.github.io/cards/reference/ard_missing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing ARD Statistics — ard_missing","text":"data (data.frame) data frame ... Arguments passed methods. variables (tidy-select) columns include summaries. (tidy-select) results tabulated combinations columns specified. statistic (formula-list-selector) named list, list formulas, single formula list element named list functions (RHS formula), e.g. list(mpg = list(mean = \\(x) mean(x))). value assigned variable must also named list, names used reference function element function object. Typically, function return scalar statistic, function returns named list results also acceptable, e.g. list(conf.low = -1, conf.high = 1). However, errors occur, messaging less clear setting. fmt_fn (formula-list-selector) named list, list formulas, single formula list element named list functions (RHS formula), e.g. list(mpg = list(mean = \\(x) round(x, digits = 2) |> .character())). stat_label (formula-list-selector) named list, list formulas, single formula list element either named list list formulas defining statistic labels, e.g. everything() ~ list(mean = \"Mean\", sd = \"SD\") everything() ~ list(mean ~ \"Mean\", sd ~ \"SD\").","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_missing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missing ARD Statistics — ard_missing","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_missing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missing ARD Statistics — ard_missing","text":"","code":"ard_missing(ADSL, by = \"ARM\", variables = \"AGE\") #> {cards} data frame: 15 x 10 #>    group1 group1_level variable stat_name stat_label stat #> 1     ARM      Placebo      AGE     N_obs  Vector L…   86 #> 2     ARM      Placebo      AGE    N_miss  N Missing    0 #> 3     ARM      Placebo      AGE N_nonmiss  N Non-mi…   86 #> 4     ARM      Placebo      AGE    p_miss  % Missing    0 #> 5     ARM      Placebo      AGE p_nonmiss  % Non-mi…    1 #> 6     ARM    Xanomeli…      AGE     N_obs  Vector L…   84 #> 7     ARM    Xanomeli…      AGE    N_miss  N Missing    0 #> 8     ARM    Xanomeli…      AGE N_nonmiss  N Non-mi…   84 #> 9     ARM    Xanomeli…      AGE    p_miss  % Missing    0 #> 10    ARM    Xanomeli…      AGE p_nonmiss  % Non-mi…    1 #> 11    ARM    Xanomeli…      AGE     N_obs  Vector L…   84 #> 12    ARM    Xanomeli…      AGE    N_miss  N Missing    0 #> 13    ARM    Xanomeli…      AGE N_nonmiss  N Non-mi…   84 #> 14    ARM    Xanomeli…      AGE    p_miss  % Missing    0 #> 15    ARM    Xanomeli…      AGE p_nonmiss  % Non-mi…    1 #> ℹ 4 more variables: context, fmt_fn, warning, error  ADSL |>   dplyr::group_by(ARM) |>   ard_missing(     variables = \"AGE\",     statistic = ~\"N_miss\"   ) #> {cards} data frame: 3 x 10 #>   group1 group1_level variable stat_name stat_label stat #> 1    ARM      Placebo      AGE    N_miss  N Missing    0 #> 2    ARM    Xanomeli…      AGE    N_miss  N Missing    0 #> 3    ARM    Xanomeli…      AGE    N_miss  N Missing    0 #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/ard_pairwise.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise ARD — ard_pairwise","title":"Pairwise ARD — ard_pairwise","text":"Utility perform pairwise comparisons.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_pairwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise ARD — ard_pairwise","text":"","code":"ard_pairwise(data, variable, .f, include = NULL)"},{"path":"https://insightsengineering.github.io/cards/reference/ard_pairwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise ARD — ard_pairwise","text":"data (data.frame) data frame variable (tidy-select) Column perform pairwise analyses . .f (function) function creates ARDs. function accepts single argument subset data passed including two levels variable pairwise analysis. include (vector) vector levels variable column include comparisons. Pairwise comparisons performed pairs level specified . Default NULL pairwise computations included.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_pairwise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise ARD — ard_pairwise","text":"list ARDs","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_pairwise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise ARD — ard_pairwise","text":"","code":"ard_pairwise(   ADSL,   variable = ARM,   .f = \\(df) {     ard_complex(       df,       variables = AGE,       statistic = ~ list(ttest = \\(x, data, ...) t.test(x ~ data$ARM)[c(\"statistic\", \"p.value\")])     )   },   include = \"Placebo\" # only include comparisons to the \"Placebo\" group ) #> $`'Placebo' vs. 'Xanomeline High Dose'` #> {cards} data frame: 2 x 8 #>   variable context stat_name stat_label  stat fmt_fn #> 1      AGE complex statistic  statistic 0.655      1 #> 2      AGE complex   p.value    p.value 0.513      1 #> ℹ 2 more variables: warning, error #>  #> $`'Placebo' vs. 'Xanomeline Low Dose'` #> {cards} data frame: 2 x 8 #>   variable context stat_name stat_label   stat fmt_fn #> 1      AGE complex statistic  statistic -0.353      1 #> 2      AGE complex   p.value    p.value  0.724      1 #> ℹ 2 more variables: warning, error #>"},{"path":"https://insightsengineering.github.io/cards/reference/ard_stack.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack ARDs — ard_stack","title":"Stack ARDs — ard_stack","text":"Stack multiple ARD calls sharing common input data variables. Optionally incorporate additional information represented variables, e.g. overall calculations, rates missingness, attributes, transform results shuffle_ard(). ard_stack() argument specified, univariate tabulation variable also returned.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_stack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack ARDs — ard_stack","text":"","code":"ard_stack(   data,   ...,   .by = NULL,   .overall = FALSE,   .missing = FALSE,   .attributes = FALSE,   .total_n = FALSE,   .shuffle = FALSE )"},{"path":"https://insightsengineering.github.io/cards/reference/ard_stack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack ARDs — ard_stack","text":"data (data.frame) data frame ... (dynamic-dots) Series ARD function calls run stacked .(tidy-select) columns tabulate series ARD function calls. rows NA NaN values removed calculations. .overall (logical) logical indicating whether overall statistics calculated (.e. re-run ard_*() calls =NULL). Default FALSE. .missing (logical) logical indicating whether include results ard_missing() variables represented ARD. Default FALSE. .attributes (logical) logical indicating whether include results ard_attributes() variables represented ARD. Default FALSE. .total_n (logical) logical indicating whether include ard_total_n() returned ARD. .shuffle (logical) logical indicating whether perform shuffle_ard() final result. Default FALSE.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_stack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack ARDs — ard_stack","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_stack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack ARDs — ard_stack","text":"","code":"ard_stack(   data = ADSL,   ard_categorical(variables = \"AGEGR1\"),   ard_continuous(variables = \"AGE\"),   .by = \"ARM\",   .overall = TRUE,   .attributes = TRUE ) #> {cards} data frame: 83 x 11 #>    group1 group1_level variable variable_level stat_name stat_label  stat #> 1     ARM      Placebo   AGEGR1          65-80         n          n    42 #> 2     ARM      Placebo   AGEGR1          65-80         N          N    86 #> 3     ARM      Placebo   AGEGR1          65-80         p          % 0.488 #> 4     ARM      Placebo   AGEGR1            <65         n          n    14 #> 5     ARM      Placebo   AGEGR1            <65         N          N    86 #> 6     ARM      Placebo   AGEGR1            <65         p          % 0.163 #> 7     ARM      Placebo   AGEGR1            >80         n          n    30 #> 8     ARM      Placebo   AGEGR1            >80         N          N    86 #> 9     ARM      Placebo   AGEGR1            >80         p          % 0.349 #> 10    ARM      Placebo      AGE                        N          N    86 #> ℹ 73 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error  ard_stack(   data = ADSL,   ard_categorical(variables = \"AGEGR1\"),   ard_continuous(variables = \"AGE\"),   .by = \"ARM\",   .shuffle = TRUE ) #> # A tibble: 60 × 7 #>    ARM     variable variable_level context     stat_name stat_label   stat #>    <chr>   <chr>    <chr>          <chr>       <chr>     <chr>       <dbl> #>  1 Placebo AGEGR1   65-80          categorical n         n          42     #>  2 Placebo AGEGR1   65-80          categorical N         N          86     #>  3 Placebo AGEGR1   65-80          categorical p         %           0.488 #>  4 Placebo AGEGR1   <65            categorical n         n          14     #>  5 Placebo AGEGR1   <65            categorical N         N          86     #>  6 Placebo AGEGR1   <65            categorical p         %           0.163 #>  7 Placebo AGEGR1   >80            categorical n         n          30     #>  8 Placebo AGEGR1   >80            categorical N         N          86     #>  9 Placebo AGEGR1   >80            categorical p         %           0.349 #> 10 Placebo AGE      NA             continuous  N         N          86     #> # ℹ 50 more rows"},{"path":"https://insightsengineering.github.io/cards/reference/ard_stack_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Stacked Hierarchical ARD Statistics — ard_stack_hierarchical","title":"Stacked Hierarchical ARD Statistics — ard_stack_hierarchical","text":"Use functions calculate multiple summaries nested hierarchical data single call. ard_stack_hierarchical(): Calculates rates events (e.g. adverse events) utilizing denominator id arguments identify rows data include rate calculation. ard_stack_hierarchical_count(): Calculates counts events utilizing rows tabulation.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_stack_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stacked Hierarchical ARD Statistics — ard_stack_hierarchical","text":"","code":"ard_stack_hierarchical(   data,   variables,   by = dplyr::group_vars(data),   id,   denominator,   include = everything(),   statistic = everything() ~ c(\"n\", \"N\", \"p\"),   overall = FALSE,   over_variables = FALSE,   attributes = FALSE,   total_n = FALSE,   shuffle = FALSE )  ard_stack_hierarchical_count(   data,   variables,   by = dplyr::group_vars(data),   denominator = NULL,   include = everything(),   overall = FALSE,   over_variables = FALSE,   attributes = FALSE,   total_n = FALSE,   shuffle = FALSE )"},{"path":"https://insightsengineering.github.io/cards/reference/ard_stack_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stacked Hierarchical ARD Statistics — ard_stack_hierarchical","text":"data (data.frame) data frame variables (tidy-select) Specifies nested/hierarchical structure data. variables specified include argument summary statistics calculated. (tidy-select) variables perform tabulations . combinations variables specified appear results. Default dplyr::group_vars(data). id (tidy-select) argument used subset data identify rows data calculate event rates ard_stack_hierarchical(). See details . denominator (data.frame, integer) used define denominator enhance output. argument required ard_stack_hierarchical() optional ard_stack_hierarchical_count(). univariate tabulations variables calculated denominator, data frame passed, e.g. tabulation treatment assignment counts may appear header table. denominator argument must specified id used calculate event rates. total_n=TRUE, denominator argument used return total N include (tidy-select) Specify subset columns indicated variables argument summary statistics returned. Default everything(). statistic (formula-list-selector) named list, list formulas, single formula list element one  c(\"n\", \"N\", \"p\", \"n_cum\", \"p_cum\") (RHS formula). overall (scalar logical) logical indicating whether overall statistics calculated (.e. repeat operations =NULL cases, see details). Default FALSE. over_variables (scalar logical) logical indicating whether summary statistics calculated across columns listed variables argument. Default FALSE. attributes (scalar logical) logical indicating whether include results ard_attributes() variables represented ARD. Default FALSE. total_n (scalar logical) logical indicating whether include ard_total_n(denominator) returned ARD. shuffle (scalar logical) logical indicating whether perform shuffle_ard() final result. Default FALSE.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_stack_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stacked Hierarchical ARD Statistics — ard_stack_hierarchical","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_stack_hierarchical.html","id":"subsetting-data-for-rate-calculations","dir":"Reference","previous_headings":"","what":"Subsetting Data for Rate Calculations","title":"Stacked Hierarchical ARD Statistics — ard_stack_hierarchical","text":"calculate event rates, ard_stack_hierarchical() function identifies rows include calculation. First, primary data frame sorted columns identified id, , variables arguments. function cycles variables specified variables argument, data frame grouped id, intersect(, names(denominator)), variables utilizing last row within groups. example, call ard_stack_hierarchical(data = ADAE, variables = c(AESOC, AEDECOD), id = USUBJID), first subset ADAE one row within grouping c(USUBJID, AESOC, AEDECOD) calculate event rates 'AEDECOD'. repeat subset ADAE one row within grouping c(USUBJID, AESOC) calculate event rates 'AESOC'.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_stack_hierarchical.html","id":"overall-argument","dir":"Reference","previous_headings":"","what":"Overall Argument","title":"Stacked Hierarchical ARD Statistics — ard_stack_hierarchical","text":"set overall=TRUE, wish re-run calculations removing stratifying columns. example, ran code , results include results code chunk re-run =NULL.   another case aware : argument includes columns present denominator, example tabulating results AE grade severity addition treatment assignment. example , tabulating results treatment assignment AE severity. specifying overall=TRUE, re-run get results = AESEV = NULL.","code":"ard_stack_hierarchical(   data = ADAE,   variables = c(AESOC, AEDECOD),   by = TRTA,   denominator = ADSL |> dplyr::rename(TRTA = ARM),   overall = TRUE ) ard_stack_hierarchical(   data = ADAE,   variables = c(AESOC, AEDECOD),   by = c(TRTA, AESEV),   denominator = ADSL |> dplyr::rename(TRTA = ARM),   overall = TRUE )"},{"path":"https://insightsengineering.github.io/cards/reference/ard_stack_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stacked Hierarchical ARD Statistics — ard_stack_hierarchical","text":"","code":"ard_stack_hierarchical(   ADAE,   variables = c(AESOC, AEDECOD),   by = TRTA,   denominator = ADSL |> dplyr::rename(TRTA = ARM),   id = USUBJID ) #> {cards} data frame: 2394 x 13 #>    group1 group1_level group2 group2_level variable variable_level stat_name #> 1    <NA>                <NA>                  TRTA        Placebo         n #> 2    <NA>                <NA>                  TRTA        Placebo         N #> 3    <NA>                <NA>                  TRTA        Placebo         p #> 4    <NA>                <NA>                  TRTA      Xanomeli…         n #> 5    <NA>                <NA>                  TRTA      Xanomeli…         N #> 6    <NA>                <NA>                  TRTA      Xanomeli…         p #> 7    <NA>                <NA>                  TRTA      Xanomeli…         n #> 8    <NA>                <NA>                  TRTA      Xanomeli…         N #> 9    <NA>                <NA>                  TRTA      Xanomeli…         p #> 10   TRTA      Placebo   <NA>                 AESOC      CARDIAC …         n #>    stat_label  stat #> 1           n    86 #> 2           N   254 #> 3           % 0.339 #> 4           n    84 #> 5           N   254 #> 6           % 0.331 #> 7           n    84 #> 8           N   254 #> 9           % 0.331 #> 10          n    13 #> ℹ 2384 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error  ard_stack_hierarchical_count(   ADAE,   variables = c(AESOC, AEDECOD),   by = TRTA,   denominator = ADSL |> dplyr::rename(TRTA = ARM) ) #> {cards} data frame: 804 x 13 #>    group1 group1_level group2 group2_level variable variable_level stat_name #> 1    <NA>                <NA>                  TRTA        Placebo         n #> 2    <NA>                <NA>                  TRTA        Placebo         N #> 3    <NA>                <NA>                  TRTA        Placebo         p #> 4    <NA>                <NA>                  TRTA      Xanomeli…         n #> 5    <NA>                <NA>                  TRTA      Xanomeli…         N #> 6    <NA>                <NA>                  TRTA      Xanomeli…         p #> 7    <NA>                <NA>                  TRTA      Xanomeli…         n #> 8    <NA>                <NA>                  TRTA      Xanomeli…         N #> 9    <NA>                <NA>                  TRTA      Xanomeli…         p #> 10   TRTA      Placebo   <NA>                 AESOC      CARDIAC …         n #>    stat_label  stat #> 1           n    86 #> 2           N   254 #> 3           % 0.339 #> 4           n    84 #> 5           N   254 #> 6           % 0.331 #> 7           n    84 #> 8           N   254 #> 9           % 0.331 #> 10          n    27 #> ℹ 794 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/ard_strata.html","id":null,"dir":"Reference","previous_headings":"","what":"Stratified ARD — ard_strata","title":"Stratified ARD — ard_strata","text":"General function calculating ARD results within subgroups. examples show use functions cards package, function primarily used statistical functions cardx functions.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_strata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stratified ARD — ard_strata","text":"","code":"ard_strata(.data, .by = NULL, .strata = NULL, .f, ...)"},{"path":"https://insightsengineering.github.io/cards/reference/ard_strata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stratified ARD — ard_strata","text":".data (data.frame) data frame ., .strata (tidy-select) columns tabulate /stratify calculation. Arguments similar, important distinction: .: results tabulated combinations columns specified, including unobserved combinations unobserved factor levels. .strata: results tabulated observed combinations columns specified. argument include columns appear .f argument. .f (function, formula) function formula can coerced function rlang::as_function() (similar purrr::map(.f)) ... Additional arguments passed .f function.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_strata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stratified ARD — ard_strata","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_strata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stratified ARD — ard_strata","text":"","code":"ard_strata(   ADSL,   .by = ARM,   .f = ~ ard_continuous(.x, variables = AGE) ) #> {cards} data frame: 24 x 10 #>    group1 group1_level variable stat_name stat_label   stat #> 1     ARM      Placebo      AGE         N          N     86 #> 2     ARM      Placebo      AGE      mean       Mean 75.209 #> 3     ARM      Placebo      AGE        sd         SD   8.59 #> 4     ARM      Placebo      AGE    median     Median     76 #> 5     ARM      Placebo      AGE       p25         Q1     69 #> 6     ARM      Placebo      AGE       p75         Q3     82 #> 7     ARM      Placebo      AGE       min        Min     52 #> 8     ARM      Placebo      AGE       max        Max     89 #> 9     ARM    Xanomeli…      AGE         N          N     84 #> 10    ARM    Xanomeli…      AGE      mean       Mean 74.381 #> ℹ 14 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/ard_total_n.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Total N — ard_total_n","title":"ARD Total N — ard_total_n","text":"Returns total N data frame. placeholder variable name returned object \"..ard_total_n..\"","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_total_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Total N — ard_total_n","text":"","code":"ard_total_n(data, ...)  # S3 method for class 'data.frame' ard_total_n(data, ...)"},{"path":"https://insightsengineering.github.io/cards/reference/ard_total_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Total N — ard_total_n","text":"data (data.frame) data frame ... Arguments passed methods.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_total_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Total N — ard_total_n","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/ard_total_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Total N — ard_total_n","text":"","code":"ard_total_n(ADSL) #> {cards} data frame: 1 x 8 #>          variable context stat_name stat_label stat fmt_fn #> 1 ..ard_total_n.. total_n         N          N  254      0 #> ℹ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/as_card.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Frame as ARD — as_card","title":"Data Frame as ARD — as_card","text":"Convert data frames ARDs class 'card'.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/as_card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Frame as ARD — as_card","text":"","code":"as_card(x)"},{"path":"https://insightsengineering.github.io/cards/reference/as_card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Frame as ARD — as_card","text":"x (data.frame) data frame","code":""},{"path":"https://insightsengineering.github.io/cards/reference/as_card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Frame as ARD — as_card","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/as_card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Frame as ARD — as_card","text":"","code":"data.frame(   stat_name = c(\"N\", \"mean\"),   stat_label = c(\"N\", \"Mean\"),   stat = c(10, 0.5) ) |>   as_card() #> {cards} data frame: 2 x 3 #>   stat_name stat_label stat #> 1         N          N   10 #> 2      mean       Mean  0.5"},{"path":"https://insightsengineering.github.io/cards/reference/as_cards_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"As card function — as_cards_fn","title":"As card function — as_cards_fn","text":"Add attributes function specify expected results. used ard_continuous() ard_complex() errors constructs ARD correct structure results calculated.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/as_cards_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"As card function — as_cards_fn","text":"","code":"as_cards_fn(f, stat_names)  is_cards_fn(f)  get_cards_fn_stat_names(f)"},{"path":"https://insightsengineering.github.io/cards/reference/as_cards_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"As card function — as_cards_fn","text":"f (function) function stat_names (character) character vector expected statistic names returned function f","code":""},{"path":"https://insightsengineering.github.io/cards/reference/as_cards_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"As card function — as_cards_fn","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/as_cards_fn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"As card function — as_cards_fn","text":"","code":"# When there is no error, everything works as if we hadn't used `as_card_fn()` ttest_works <-   as_cards_fn(     \\(x) t.test(x)[c(\"statistic\", \"p.value\")],     stat_names = c(\"statistic\", \"p.value\")   ) ard_continuous(   mtcars,   variables = mpg,   statistic = ~ list(ttest = ttest_works) ) #> {cards} data frame: 2 x 8 #>   variable   context stat_name stat_label   stat fmt_fn #> 1      mpg continuo… statistic  statistic 18.857      1 #> 2      mpg continuo…   p.value    p.value      0      1 #> ℹ 2 more variables: warning, error  # When there is an error and we use `as_card_fn()`, #   we will see the same structure as when there is no error ttest_error <-   as_cards_fn(     \\(x) {       t.test(x)[c(\"statistic\", \"p.value\")]       stop(\"Intentional Error\")     },     stat_names = c(\"statistic\", \"p.value\")   ) ard_continuous(   mtcars,   variables = mpg,   statistic = ~ list(ttest = ttest_error) ) #> {cards} data frame: 2 x 8 #>   variable   context stat_name stat_label stat     error #> 1      mpg continuo… statistic  statistic      Intentio… #> 2      mpg continuo…   p.value    p.value      Intentio… #> ℹ 2 more variables: fmt_fn, warning  # if we don't use `as_card_fn()` and there is an error, #   the returned result is only one row ard_continuous(   mtcars,   variables = mpg,   statistic = ~ list(ttest = \\(x) {     t.test(x)[c(\"statistic\", \"p.value\")]     stop(\"Intentional Error\")   }) ) #> {cards} data frame: 1 x 8 #>   variable   context stat_name stat_label stat     error #> 1      mpg continuo…     ttest      ttest      Intentio… #> ℹ 2 more variables: fmt_fn, warning"},{"path":"https://insightsengineering.github.io/cards/reference/as_nested_list.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD as Nested List — as_nested_list","title":"ARD as Nested List — as_nested_list","text":"Convert ARDs nested lists.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/as_nested_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD as Nested List — as_nested_list","text":"","code":"as_nested_list(x)"},{"path":"https://insightsengineering.github.io/cards/reference/as_nested_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD as Nested List — as_nested_list","text":"x (data.frame) ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/as_nested_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD as Nested List — as_nested_list","text":"nested list","code":""},{"path":"https://insightsengineering.github.io/cards/reference/as_nested_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD as Nested List — as_nested_list","text":"","code":"ard_continuous(mtcars, by = \"cyl\", variables = c(\"mpg\", \"hp\")) |>   as_nested_list() #> $variable #> $variable$mpg #> $variable$mpg$group1 #> $variable$mpg$group1$cyl #> $variable$mpg$group1$cyl$group1_level #> $variable$mpg$group1$cyl$group1_level$`4` #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$N #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$N$stat #> [1] 11 #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$N$stat_fmt #> [1] \"11\" #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$N$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$N$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$N$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$mean #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$mean$stat #> [1] 26.66364 #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$mean$stat_fmt #> [1] \"26.7\" #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$mean$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$mean$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$mean$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$sd #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$sd$stat #> [1] 4.509828 #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$sd$stat_fmt #> [1] \"4.5\" #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$sd$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$sd$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$sd$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$median #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$median$stat #> [1] 26 #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$median$stat_fmt #> [1] \"26.0\" #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$median$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$median$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$median$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$p25 #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$p25$stat #> [1] 22.8 #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$p25$stat_fmt #> [1] \"22.8\" #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$p25$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$p25$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$p25$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$p75 #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$p75$stat #> [1] 30.4 #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$p75$stat_fmt #> [1] \"30.4\" #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$p75$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$p75$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$p75$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$min #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$min$stat #> [1] 21.4 #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$min$stat_fmt #> [1] \"21.4\" #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$min$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$min$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$min$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$max #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$max$stat #> [1] 33.9 #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$max$stat_fmt #> [1] \"33.9\" #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$max$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$max$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`4`$stat_name$max$context #> [1] \"continuous\" #>  #>  #>  #>  #> $variable$mpg$group1$cyl$group1_level$`6` #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$N #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$N$stat #> [1] 7 #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$N$stat_fmt #> [1] \"7\" #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$N$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$N$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$N$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$mean #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$mean$stat #> [1] 19.74286 #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$mean$stat_fmt #> [1] \"19.7\" #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$mean$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$mean$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$mean$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$sd #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$sd$stat #> [1] 1.453567 #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$sd$stat_fmt #> [1] \"1.5\" #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$sd$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$sd$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$sd$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$median #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$median$stat #> [1] 19.7 #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$median$stat_fmt #> [1] \"19.7\" #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$median$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$median$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$median$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$p25 #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$p25$stat #> [1] 18.1 #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$p25$stat_fmt #> [1] \"18.1\" #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$p25$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$p25$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$p25$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$p75 #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$p75$stat #> [1] 21 #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$p75$stat_fmt #> [1] \"21.0\" #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$p75$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$p75$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$p75$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$min #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$min$stat #> [1] 17.8 #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$min$stat_fmt #> [1] \"17.8\" #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$min$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$min$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$min$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$max #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$max$stat #> [1] 21.4 #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$max$stat_fmt #> [1] \"21.4\" #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$max$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$max$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`6`$stat_name$max$context #> [1] \"continuous\" #>  #>  #>  #>  #> $variable$mpg$group1$cyl$group1_level$`8` #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$N #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$N$stat #> [1] 14 #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$N$stat_fmt #> [1] \"14\" #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$N$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$N$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$N$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$mean #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$mean$stat #> [1] 15.1 #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$mean$stat_fmt #> [1] \"15.1\" #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$mean$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$mean$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$mean$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$sd #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$sd$stat #> [1] 2.560048 #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$sd$stat_fmt #> [1] \"2.6\" #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$sd$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$sd$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$sd$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$median #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$median$stat #> [1] 15.2 #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$median$stat_fmt #> [1] \"15.2\" #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$median$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$median$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$median$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$p25 #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$p25$stat #> [1] 14.3 #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$p25$stat_fmt #> [1] \"14.3\" #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$p25$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$p25$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$p25$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$p75 #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$p75$stat #> [1] 16.4 #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$p75$stat_fmt #> [1] \"16.4\" #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$p75$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$p75$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$p75$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$min #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$min$stat #> [1] 10.4 #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$min$stat_fmt #> [1] \"10.4\" #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$min$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$min$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$min$context #> [1] \"continuous\" #>  #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$max #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$max$stat #> [1] 19.2 #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$max$stat_fmt #> [1] \"19.2\" #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$max$warning #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$max$error #> NULL #>  #> $variable$mpg$group1$cyl$group1_level$`8`$stat_name$max$context #> [1] \"continuous\" #>  #>  #>  #>  #>  #>  #>  #>  #> $variable$hp #> $variable$hp$group1 #> $variable$hp$group1$cyl #> $variable$hp$group1$cyl$group1_level #> $variable$hp$group1$cyl$group1_level$`4` #> $variable$hp$group1$cyl$group1_level$`4`$stat_name #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$N #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$N$stat #> [1] 11 #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$N$stat_fmt #> [1] \"11\" #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$N$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$N$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$N$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$mean #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$mean$stat #> [1] 82.63636 #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$mean$stat_fmt #> [1] \"82.6\" #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$mean$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$mean$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$mean$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$sd #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$sd$stat #> [1] 20.93453 #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$sd$stat_fmt #> [1] \"20.9\" #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$sd$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$sd$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$sd$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$median #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$median$stat #> [1] 91 #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$median$stat_fmt #> [1] \"91.0\" #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$median$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$median$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$median$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$p25 #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$p25$stat #> [1] 65 #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$p25$stat_fmt #> [1] \"65.0\" #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$p25$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$p25$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$p25$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$p75 #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$p75$stat #> [1] 97 #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$p75$stat_fmt #> [1] \"97.0\" #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$p75$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$p75$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$p75$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$min #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$min$stat #> [1] 52 #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$min$stat_fmt #> [1] \"52.0\" #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$min$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$min$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$min$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$max #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$max$stat #> [1] 113 #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$max$stat_fmt #> [1] \"113.0\" #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$max$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$max$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`4`$stat_name$max$context #> [1] \"continuous\" #>  #>  #>  #>  #> $variable$hp$group1$cyl$group1_level$`6` #> $variable$hp$group1$cyl$group1_level$`6`$stat_name #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$N #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$N$stat #> [1] 7 #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$N$stat_fmt #> [1] \"7\" #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$N$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$N$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$N$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$mean #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$mean$stat #> [1] 122.2857 #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$mean$stat_fmt #> [1] \"122.3\" #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$mean$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$mean$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$mean$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$sd #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$sd$stat #> [1] 24.26049 #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$sd$stat_fmt #> [1] \"24.3\" #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$sd$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$sd$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$sd$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$median #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$median$stat #> [1] 110 #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$median$stat_fmt #> [1] \"110.0\" #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$median$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$median$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$median$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$p25 #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$p25$stat #> [1] 110 #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$p25$stat_fmt #> [1] \"110.0\" #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$p25$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$p25$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$p25$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$p75 #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$p75$stat #> [1] 123 #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$p75$stat_fmt #> [1] \"123.0\" #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$p75$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$p75$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$p75$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$min #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$min$stat #> [1] 105 #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$min$stat_fmt #> [1] \"105.0\" #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$min$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$min$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$min$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$max #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$max$stat #> [1] 175 #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$max$stat_fmt #> [1] \"175.0\" #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$max$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$max$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`6`$stat_name$max$context #> [1] \"continuous\" #>  #>  #>  #>  #> $variable$hp$group1$cyl$group1_level$`8` #> $variable$hp$group1$cyl$group1_level$`8`$stat_name #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$N #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$N$stat #> [1] 14 #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$N$stat_fmt #> [1] \"14\" #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$N$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$N$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$N$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$mean #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$mean$stat #> [1] 209.2143 #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$mean$stat_fmt #> [1] \"209.2\" #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$mean$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$mean$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$mean$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$sd #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$sd$stat #> [1] 50.97689 #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$sd$stat_fmt #> [1] \"51.0\" #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$sd$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$sd$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$sd$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$median #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$median$stat #> [1] 192.5 #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$median$stat_fmt #> [1] \"192.5\" #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$median$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$median$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$median$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$p25 #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$p25$stat #> [1] 175 #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$p25$stat_fmt #> [1] \"175.0\" #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$p25$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$p25$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$p25$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$p75 #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$p75$stat #> [1] 245 #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$p75$stat_fmt #> [1] \"245.0\" #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$p75$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$p75$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$p75$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$min #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$min$stat #> [1] 150 #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$min$stat_fmt #> [1] \"150.0\" #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$min$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$min$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$min$context #> [1] \"continuous\" #>  #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$max #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$max$stat #> [1] 335 #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$max$stat_fmt #> [1] \"335.0\" #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$max$warning #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$max$error #> NULL #>  #> $variable$hp$group1$cyl$group1_level$`8`$stat_name$max$context #> [1] \"continuous\" #>  #>  #>  #>  #>  #>  #>  #>  #>"},{"path":"https://insightsengineering.github.io/cards/reference/bind_ard.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind ARDs — bind_ard","title":"Bind ARDs — bind_ard","text":"Wrapper dplyr::bind_rows() additional checks duplicated statistics.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/bind_ard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind ARDs — bind_ard","text":"","code":"bind_ard(   ...,   .distinct = TRUE,   .update = FALSE,   .order = FALSE,   .quiet = FALSE )"},{"path":"https://insightsengineering.github.io/cards/reference/bind_ard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind ARDs — bind_ard","text":"... (dynamic-dots) ARDs combine. argument can either ARD, list ARDs. Columns matched name, missing columns filled NA. .distinct (logical) logical indicating whether remove non-distinct values ARD. Duplicates checked across grouping variables, primary variables, context (present), statistic name statistic value. Default FALSE. statistic name value repeated .distinct=TRUE, recently added statistics retained, (s) omitted. .update (logical) logical indicating whether update ARD remove duplicated named statistics. Duplicates checked across grouping variables, primary variables, statistic name. Default FALSE. statistic name repeated .update=TRUE, recently added statistics retained, (s) omitted. .order (logical) logical indicating whether order rows stacked ARDs, allowing statistics share common group variable values appear consecutive rows. Default FALSE. Ordering based order group/variable values prior stacking. .quiet (logical) logical indicating whether suppress messaging. Default FALSE","code":""},{"path":"https://insightsengineering.github.io/cards/reference/bind_ard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind ARDs — bind_ard","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/bind_ard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind ARDs — bind_ard","text":"","code":"ard <- ard_categorical(ADSL, by = \"ARM\", variables = \"AGEGR1\")  bind_ard(ard, ard, .update = TRUE) #> ℹ 27 rows with duplicated statistic values have been removed. #> • See cards::bind_ard(.distinct) (`?cards::bind_ard()`) for details. #> {cards} data frame: 27 x 11 #>    group1 group1_level variable variable_level stat_name stat_label  stat #> 1     ARM      Placebo   AGEGR1          65-80         n          n    42 #> 2     ARM      Placebo   AGEGR1          65-80         N          N    86 #> 3     ARM      Placebo   AGEGR1          65-80         p          % 0.488 #> 4     ARM      Placebo   AGEGR1            <65         n          n    14 #> 5     ARM      Placebo   AGEGR1            <65         N          N    86 #> 6     ARM      Placebo   AGEGR1            <65         p          % 0.163 #> 7     ARM      Placebo   AGEGR1            >80         n          n    30 #> 8     ARM      Placebo   AGEGR1            >80         N          N    86 #> 9     ARM      Placebo   AGEGR1            >80         p          % 0.349 #> 10    ARM    Xanomeli…   AGEGR1          65-80         n          n    55 #> ℹ 17 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/cards-package.html","id":null,"dir":"Reference","previous_headings":"","what":"cards: Analysis Results Data — cards-package","title":"cards: Analysis Results Data — cards-package","text":"Construct CDISC (Clinical Data Interchange Standards Consortium) compliant Analysis Results Data objects. objects used re-used construct summary tables, visualizations, written reports. package also exports utilities working objects creating new Analysis Results Data objects.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/cards/reference/cards-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"cards: Analysis Results Data — cards-package","text":"Maintainer: Daniel D. Sjoberg danield.sjoberg@gmail.com (ORCID) Authors: Becca Krouse becca.z.krouse@gsk.com Emily de la Rua emily.de_la_rua@contractors.roche.com contributors: F. Hoffmann-La Roche AG [copyright holder, funder] GlaxoSmithKline Research & Development Limited [copyright holder]","code":""},{"path":"https://insightsengineering.github.io/cards/reference/cards.options.html","id":null,"dir":"Reference","previous_headings":"","what":"Options in {cards} — cards.options","title":"Options in {cards} — cards.options","text":"See options available {cards} package","code":""},{"path":"https://insightsengineering.github.io/cards/reference/cards.options.html","id":"cards-round-type","dir":"Reference","previous_headings":"","what":"cards.round_type","title":"Options in {cards} — cards.options","text":"two types rounding types {cards} package implemented label_round(), alias_as_fmt_fn(), apply_fmt_fn() functions' round_type argument. 'round-half-' (default): rounding method values exactly halfway two numbers rounded larger magnitude number. Rounding implemented via round5(). 'round--even': base R's default IEC 60559 rounding standard. See round() details. change default rounding use IEC 60559, option must set ARDs created apply_fmt_fn() run. ensures default formatting functions created label_round() utilize specified rounding method method used aliases converted functions (occurs apply_fmt_fn() calls alias_as_fmt_fn()).","code":""},{"path":"https://insightsengineering.github.io/cards/reference/check_ard_structure.html","id":null,"dir":"Reference","previous_headings":"","what":"Check ARD Structure — check_ard_structure","title":"Check ARD Structure — check_ard_structure","text":"Function tests structure returns notes object conform expected structure.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/check_ard_structure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check ARD Structure — check_ard_structure","text":"","code":"check_ard_structure(x, column_order = TRUE, method = TRUE)"},{"path":"https://insightsengineering.github.io/cards/reference/check_ard_structure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check ARD Structure — check_ard_structure","text":"x (data.frame) ARD data frame class 'card' column_order (scalar logical) check whether ordering columns adheres cards::tidy_ard_column_order(). method (scalar logical) check whether \"stat_name\" equal \"method\" appears results.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/check_ard_structure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check ARD Structure — check_ard_structure","text":"ARD data frame class 'card' (invisible)","code":""},{"path":"https://insightsengineering.github.io/cards/reference/check_ard_structure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check ARD Structure — check_ard_structure","text":"","code":"ard_continuous(ADSL, variables = \"AGE\") |>   dplyr::select(-warning, -error) |>   check_ard_structure() #> The following columns are not present: \"warning\" and \"error\". #> Expecting a row with `stat_name = 'method'`, but it is not present."},{"path":"https://insightsengineering.github.io/cards/reference/default_stat_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Defaults for Statistical Arguments — default_stat_labels","title":"Defaults for Statistical Arguments — default_stat_labels","text":"Returns named list statistics labels","code":""},{"path":"https://insightsengineering.github.io/cards/reference/default_stat_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defaults for Statistical Arguments — default_stat_labels","text":"","code":"default_stat_labels()"},{"path":"https://insightsengineering.github.io/cards/reference/default_stat_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defaults for Statistical Arguments — default_stat_labels","text":"named list","code":""},{"path":"https://insightsengineering.github.io/cards/reference/default_stat_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Defaults for Statistical Arguments — default_stat_labels","text":"","code":"# stat labels default_stat_labels() #> $mean #> [1] \"Mean\" #>  #> $sd #> [1] \"SD\" #>  #> $var #> [1] \"Variance\" #>  #> $median #> [1] \"Median\" #>  #> $p25 #> [1] \"Q1\" #>  #> $p75 #> [1] \"Q3\" #>  #> $min #> [1] \"Min\" #>  #> $max #> [1] \"Max\" #>  #> $n #> [1] \"n\" #>  #> $N #> [1] \"N\" #>  #> $p #> [1] \"%\" #>  #> $n_cum #> [1] \"Cumulative n\" #>  #> $p_cum #> [1] \"Cumulative %\" #>  #> $N_obs #> [1] \"Vector Length\" #>  #> $N_miss #> [1] \"N Missing\" #>  #> $N_nonmiss #> [1] \"N Non-missing\" #>  #> $p_miss #> [1] \"% Missing\" #>  #> $p_nonmiss #> [1] \"% Non-missing\" #>"},{"path":"https://insightsengineering.github.io/cards/reference/deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — deprecated","title":"Deprecated functions — deprecated","text":"functions deprecated longer actively supported.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — deprecated","text":"","code":"label_cards(...)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-calculate_stats_as_ard.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Continuous Statistics — .calculate_stats_as_ard","title":"Calculate Continuous Statistics — .calculate_stats_as_ard","text":"Calculate statistics return ARD format","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-calculate_stats_as_ard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Continuous Statistics — .calculate_stats_as_ard","text":"","code":".calculate_stats_as_ard(   df_nested,   variables,   statistic,   by,   strata,   data,   new_col_name = \"...ard_all_stats...\" )"},{"path":"https://insightsengineering.github.io/cards/reference/dot-calculate_stats_as_ard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Continuous Statistics — .calculate_stats_as_ard","text":"df_nested (data.frame) nested data frame variables (character) character vector variables statistic (named list) named list statistical functions","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-calculate_stats_as_ard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Continuous Statistics — .calculate_stats_as_ard","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-calculate_stats_as_ard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Continuous Statistics — .calculate_stats_as_ard","text":"","code":"data_nested <- ADSL |>   nest_for_ard(     by = \"ARM\",     strata = NULL,     key = \"...ard_nested_data...\"   )  cards:::.calculate_stats_as_ard(   df_nested = data_nested,   variables = \"AGE\",   statistic = list(mean = \"mean\"),   by = \"ARM\",   strata = NULL,   data = ADSL ) #> # A tibble: 3 × 4 #>   group1 group1_level ...ard_nested_data... ...ard_all_stats... #>   <chr>  <list>       <list>                <list>              #> 1 ARM    <chr [1]>    <tibble [86 × 47]>    <tibble [0 × 0]>    #> 2 ARM    <chr [1]>    <tibble [84 × 47]>    <tibble [0 × 0]>    #> 3 ARM    <chr [1]>    <tibble [84 × 47]>    <tibble [0 × 0]>"},{"path":"https://insightsengineering.github.io/cards/reference/dot-calculate_tabulation_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Tabulation Statistics — .calculate_tabulation_statistics","title":"Calculate Tabulation Statistics — .calculate_tabulation_statistics","text":"Function takes summary instructions statistic = list(variable_name = list(tabulation=c(\"n\", \"N\", \"p\"))) argument, returns tabulations ARD structure.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-calculate_tabulation_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Tabulation Statistics — .calculate_tabulation_statistics","text":"","code":".calculate_tabulation_statistics(   data,   variables,   by,   strata,   denominator,   statistic )"},{"path":"https://insightsengineering.github.io/cards/reference/dot-calculate_tabulation_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Tabulation Statistics — .calculate_tabulation_statistics","text":"data (data.frame) data frame variables (tidy-select) columns include summaries. Default everything(). , strata (tidy-select) columns use grouping stratifying table output. Arguments similar, important distinction: : results tabulated combinations columns specified, including unobserved combinations unobserved factor levels. strata: results tabulated observed combinations columns specified. Arguments may used conjunction one another. denominator (string, data.frame, integer) Specify argument change denominator, e.g. \"N\" statistic. Default 'column'. See details. statistic (formula-list-selector) named list, list formulas, single formula list element one  c(\"n\", \"N\", \"p\", \"n_cum\", \"p_cum\") (RHS formula).","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-calculate_tabulation_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Tabulation Statistics — .calculate_tabulation_statistics","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-calculate_tabulation_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Tabulation Statistics — .calculate_tabulation_statistics","text":"","code":"cards:::.calculate_tabulation_statistics(   ADSL,   variables = \"ARM\",   by = NULL,   strata = NULL,   denominator = \"cell\",   statistic = list(ARM = list(tabulation = c(\"N\"))) ) #> # A tibble: 3 × 6 #>   variable variable_level stat_name stat      warning error  #>   <chr>    <list>         <chr>     <list>    <list>  <list> #> 1 ARM      <chr [1]>      N         <int [1]> <NULL>  <NULL> #> 2 ARM      <chr [1]>      N         <int [1]> <NULL>  <NULL> #> 3 ARM      <chr [1]>      N         <int [1]> <NULL>  <NULL>"},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_dichotomous_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Value Checks — .check_dichotomous_value","title":"Perform Value Checks — .check_dichotomous_value","text":"Check validity values passed ard_dichotomous(value).","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_dichotomous_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Value Checks — .check_dichotomous_value","text":"","code":".check_dichotomous_value(data, value)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_dichotomous_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Value Checks — .check_dichotomous_value","text":"data (data.frame) data frame value (named list) named list","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_dichotomous_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Value Checks — .check_dichotomous_value","text":"returns invisible check successful, throws error message .","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_dichotomous_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Value Checks — .check_dichotomous_value","text":"","code":"cards:::.check_dichotomous_value(mtcars, list(cyl = 4))"},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_fmt_string.html","id":null,"dir":"Reference","previous_headings":"","what":"Check 'xx' Format Structure — .check_fmt_string","title":"Check 'xx' Format Structure — .check_fmt_string","text":"function checks single string consistency. String must begin 'x' consist x's, single period none, may end percent symbol. string consistent, TRUE returned. Otherwise error.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_fmt_string.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check 'xx' Format Structure — .check_fmt_string","text":"","code":".check_fmt_string(x, variable, stat_name)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_fmt_string.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check 'xx' Format Structure — .check_fmt_string","text":"x (string) string check variable (character) variable whose statistic formatted stat_name (character) name statistic formatted","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_fmt_string.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check 'xx' Format Structure — .check_fmt_string","text":"logical","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_fmt_string.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check 'xx' Format Structure — .check_fmt_string","text":"","code":"cards:::.check_fmt_string(\"xx.x\") # TRUE #> [1] TRUE cards:::.check_fmt_string(\"xx.x%\") # TRUE #> [1] TRUE"},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_for_missing_combos_in_denom.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Missing Levels in denominator — .check_for_missing_combos_in_denom","title":"Check for Missing Levels in denominator — .check_for_missing_combos_in_denom","text":"user passes data frame denominator argument, function checks data frame contains levels strata variables appear data.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_for_missing_combos_in_denom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Missing Levels in denominator — .check_for_missing_combos_in_denom","text":"","code":".check_for_missing_combos_in_denom(data, denominator, by, strata)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_for_missing_combos_in_denom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Missing Levels in denominator — .check_for_missing_combos_in_denom","text":"data (data.frame) data frame denominator (data.frame) denominator data frame (character) character vector column names strata (character) character vector strata column names","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_for_missing_combos_in_denom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Missing Levels in denominator — .check_for_missing_combos_in_denom","text":"returns invisible check successful, throws error message .","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_for_missing_combos_in_denom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Missing Levels in denominator — .check_for_missing_combos_in_denom","text":"","code":"cards:::.check_for_missing_combos_in_denom(ADSL, denominator = \"col\", by = \"ARM\", strata = \"AGEGR1\")"},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_no_ard_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Protected Column Names — .check_no_ard_columns","title":"Check Protected Column Names — .check_no_ard_columns","text":"Checks column names passed data frame protected, , begin \"...ard_\" end \"...\".","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_no_ard_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Protected Column Names — .check_no_ard_columns","text":"","code":".check_no_ard_columns(x, exceptions = \"...ard_dummy_for_counting...\")"},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_no_ard_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Protected Column Names — .check_no_ard_columns","text":"x (data.frame) data frame exceptions (string) character string column names exclude checks","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_no_ard_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Protected Column Names — .check_no_ard_columns","text":"returns invisible check successful, throws error message .","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_no_ard_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Protected Column Names — .check_no_ard_columns","text":"","code":"data <- data.frame(\"ard_x\" = 1)  cards:::.check_no_ard_columns(data)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_var_nms.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Variable Names — .check_var_nms","title":"Check Variable Names — .check_var_nms","text":"Checks variable names data frame protected names modifies needed","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_var_nms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Variable Names — .check_var_nms","text":"","code":".check_var_nms(x, vars_protected)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_var_nms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Variable Names — .check_var_nms","text":"x (data.frame) data frame vars_protected (character) character vector protected names","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_var_nms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Variable Names — .check_var_nms","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-check_var_nms.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Variable Names — .check_var_nms","text":"","code":"data <- data.frame(a = \"x\", b = \"y\", c = \"z\", .cards_idx = 1)  cards:::.check_var_nms(data, vars_protected = c(\"x\", \"z\")) #>     a b   c .cards_idx #> 1 x.1 y z.1          1"},{"path":"https://insightsengineering.github.io/cards/reference/dot-cli_condition_messaging.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Condition Messages Saved in an ARD — .cli_condition_messaging","title":"Print Condition Messages Saved in an ARD — .cli_condition_messaging","text":"Print Condition Messages Saved ARD","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-cli_condition_messaging.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Condition Messages Saved in an ARD — .cli_condition_messaging","text":"","code":".cli_condition_messaging(x, msg_type, condition_type)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-cli_condition_messaging.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Condition Messages Saved in an ARD — .cli_condition_messaging","text":"x (data.frame) ARD data frame class 'card' msg_type (string) message type. Options \"warning\" \"error\".","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-cli_condition_messaging.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Condition Messages Saved in an ARD — .cli_condition_messaging","text":"returns invisible check successful, throws warning/error messages .","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-cli_condition_messaging.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Condition Messages Saved in an ARD — .cli_condition_messaging","text":"","code":"ard <- ard_continuous(   ADSL,   by = ARM,   variables = AGE )  cards:::.cli_condition_messaging(ard, msg_type = \"error\")"},{"path":"https://insightsengineering.github.io/cards/reference/dot-cli_groups_and_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate Condition Messages in an ARD — .cli_groups_and_variable","title":"Locate Condition Messages in an ARD — .cli_groups_and_variable","text":"Prints string group##/group##_level column values variable column values condition messages occur, formatted using glue syntax.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-cli_groups_and_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate Condition Messages in an ARD — .cli_groups_and_variable","text":"","code":".cli_groups_and_variable(x)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-cli_groups_and_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate Condition Messages in an ARD — .cli_groups_and_variable","text":"x (data.frame) ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-cli_groups_and_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate Condition Messages in an ARD — .cli_groups_and_variable","text":"string","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-cli_groups_and_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate Condition Messages in an ARD — .cli_groups_and_variable","text":"","code":"ard <- ard_continuous(   ADSL,   by = ARM,   variables = AGE,   statistic = ~ list(     mean = \\(x) mean(x),     mean_warning = \\(x) {       warning(\"warn1\")       warning(\"warn2\")       mean(x)     },     err_fn = \\(x) stop(\"'tis an error\")   ) )  cards:::.cli_groups_and_variable(ard) #> [1] \"c(\\\"{.code ARM = {.val {\\\\\\\"Placebo\\\\\\\"}}}\\\", \\\"{.code ARM = {.val {\\\\\\\"Placebo\\\\\\\"}}}\\\", \\\"{.code ARM = {.val {\\\\\\\"Placebo\\\\\\\"}}}\\\", \\\"{.code ARM = {.val {\\\\\\\"Placebo\\\\\\\"}}}\\\", \\\"{.code ARM = {.val {\\\\\\\"Placebo\\\\\\\"}}}\\\", \\\"{.code ARM = {.val {\\\\\\\"Placebo\\\\\\\"}}}\\\", \\\"{.code ARM = {.val {\\\\\\\"Placebo\\\\\\\"}}}\\\", \\\"{.code ARM = {.val {\\\\\\\"Placebo\\\\\\\"}}}\\\", \\\"{.code ARM = {.val {\\\\\\\"Placebo\\\\\\\"}}}\\\"), c(\\\"{.var AGE}\\\", \\\"{.var AGE}\\\", \\\"{.var AGE}\\\", \\\"{.var AGE}\\\", \\\"{.var AGE}\\\", \\\"{.var AGE}\\\", \\\"{.var AGE}\\\", \\\"{.var AGE}\\\", \\\"{.var AGE}\\\")\""},{"path":"https://insightsengineering.github.io/cards/reference/dot-create_list_for_attributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Create List for Attributes — .create_list_for_attributes","title":"Create List for Attributes — .create_list_for_attributes","text":"Create List Attributes","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-create_list_for_attributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create List for Attributes — .create_list_for_attributes","text":"","code":".create_list_for_attributes(ard_subset, attributes, i)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-create_list_for_attributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create List for Attributes — .create_list_for_attributes","text":"ard_subset (data.frame) ARD data frame class 'card' attributes (character) character vector attribute names (integer) row index number","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-create_list_for_attributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create List for Attributes — .create_list_for_attributes","text":"named list","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-create_list_for_attributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create List for Attributes — .create_list_for_attributes","text":"","code":"ard <- ard_categorical(ADSL, by = \"ARM\", variables = \"AGEGR1\")  cards:::.create_list_for_attributes(ard, c(\"group1\", \"group1_level\"), 1) #> $group1 #> [1] \"ARM\" #>  #> $group1_level #> [1] \"Placebo\" #>"},{"path":"https://insightsengineering.github.io/cards/reference/dot-default_fmt_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Default Formatting Functions — .default_fmt_fn","title":"Add Default Formatting Functions — .default_fmt_fn","text":"Add Default Formatting Functions","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-default_fmt_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Default Formatting Functions — .default_fmt_fn","text":"","code":".default_fmt_fn(x)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-default_fmt_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Default Formatting Functions — .default_fmt_fn","text":"x (data.frame) ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-default_fmt_fn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Default Formatting Functions — .default_fmt_fn","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-default_fmt_fn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Default Formatting Functions — .default_fmt_fn","text":"","code":"ard <- ard_categorical(ADSL, by = \"ARM\", variables = \"AGEGR1\") |>   dplyr::mutate(fmt_fn = NA)  cards:::.default_fmt_fn(ard) #> {cards} data frame: 27 x 11 #>    group1 group1_level variable variable_level stat_name stat_label  stat #> 1     ARM      Placebo   AGEGR1          65-80         n          n    42 #> 2     ARM      Placebo   AGEGR1          65-80         N          N    86 #> 3     ARM      Placebo   AGEGR1          65-80         p          % 0.488 #> 4     ARM      Placebo   AGEGR1            <65         n          n    14 #> 5     ARM      Placebo   AGEGR1            <65         N          N    86 #> 6     ARM      Placebo   AGEGR1            <65         p          % 0.163 #> 7     ARM      Placebo   AGEGR1            >80         n          n    30 #> 8     ARM      Placebo   AGEGR1            >80         N          N    86 #> 9     ARM      Placebo   AGEGR1            >80         p          % 0.349 #> 10    ARM    Xanomeli…   AGEGR1          65-80         n          n    55 #> ℹ 17 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/dot-detect_msgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Columns with Non-Null Contents — .detect_msgs","title":"Detect Columns with Non-Null Contents — .detect_msgs","text":"Function looks non-null contents requested columns notifies user removal. Specifically used detecting messages.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-detect_msgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Columns with Non-Null Contents — .detect_msgs","text":"","code":".detect_msgs(x, ...)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-detect_msgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Columns with Non-Null Contents — .detect_msgs","text":"x (data.frame) data frame ... (dynamic-dots) columns search within","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-detect_msgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect Columns with Non-Null Contents — .detect_msgs","text":"","code":"ard <- ard_continuous(   ADSL,   by = ARM,   variables = AGE,   statistic = ~ list(     mean = \\(x) mean(x),     mean_warning = \\(x) {       warning(\"warn1\")       warning(\"warn2\")       mean(x)     },     err_fn = \\(x) stop(\"'tis an error\")   ) )  cards:::.detect_msgs(ard, \"warning\", \"error\") #> \"warning\" column contains messages that will be removed. #> \"error\" column contains messages that will be removed. #> [[1]] #> NULL #>  #> [[2]] #> NULL #>"},{"path":"https://insightsengineering.github.io/cards/reference/dot-eval_ard_calls.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the ard_*() function calls — .eval_ard_calls","title":"Evaluate the ard_*() function calls — .eval_ard_calls","text":"Evaluate ard_*() function calls","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-eval_ard_calls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the ard_*() function calls — .eval_ard_calls","text":"","code":".eval_ard_calls(data, .by, ...)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-eval_ard_calls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the ard_*() function calls — .eval_ard_calls","text":"data (data.frame) data frame .(tidy-select) columns tabulate series ARD function calls ... (dynamic-dots) Series ARD function calls run stacked","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-eval_ard_calls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate the ard_*() function calls — .eval_ard_calls","text":"list ARD data frames class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-eval_ard_calls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate the ard_*() function calls — .eval_ard_calls","text":"","code":"cards:::.eval_ard_calls(   data = ADSL,   .by = \"ARM\",   ard_categorical(variables = \"AGEGR1\"),   ard_continuous(variables = \"AGE\") ) #> [[1]] #> {cards} data frame: 27 x 11 #>    group1 group1_level variable variable_level stat_name stat_label  stat #> 1     ARM      Placebo   AGEGR1          65-80         n          n    42 #> 2     ARM      Placebo   AGEGR1          65-80         N          N    86 #> 3     ARM      Placebo   AGEGR1          65-80         p          % 0.488 #> 4     ARM      Placebo   AGEGR1            <65         n          n    14 #> 5     ARM      Placebo   AGEGR1            <65         N          N    86 #> 6     ARM      Placebo   AGEGR1            <65         p          % 0.163 #> 7     ARM      Placebo   AGEGR1            >80         n          n    30 #> 8     ARM      Placebo   AGEGR1            >80         N          N    86 #> 9     ARM      Placebo   AGEGR1            >80         p          % 0.349 #> 10    ARM    Xanomeli…   AGEGR1          65-80         n          n    55 #> ℹ 17 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error #>  #> [[2]] #> {cards} data frame: 24 x 10 #>    group1 group1_level variable stat_name stat_label   stat #> 1     ARM      Placebo      AGE         N          N     86 #> 2     ARM      Placebo      AGE      mean       Mean 75.209 #> 3     ARM      Placebo      AGE        sd         SD   8.59 #> 4     ARM      Placebo      AGE    median     Median     76 #> 5     ARM      Placebo      AGE       p25         Q1     69 #> 6     ARM      Placebo      AGE       p75         Q3     82 #> 7     ARM      Placebo      AGE       min        Min     52 #> 8     ARM      Placebo      AGE       max        Max     89 #> 9     ARM    Xanomeli…      AGE         N          N     84 #> 10    ARM    Xanomeli…      AGE      mean       Mean 74.381 #> ℹ 14 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error #>"},{"path":"https://insightsengineering.github.io/cards/reference/dot-fill_grps_from_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Back Fill Group Variables — .fill_grps_from_variables","title":"Back Fill Group Variables — .fill_grps_from_variables","text":"function back fills values group variables using variable/variable_levels. back filling occur value variable column matches name grouping variable, grouping variable's value NA.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-fill_grps_from_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Back Fill Group Variables — .fill_grps_from_variables","text":"","code":".fill_grps_from_variables(x)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-fill_grps_from_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Back Fill Group Variables — .fill_grps_from_variables","text":"x (data.frame) data frame","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-fill_grps_from_variables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Back Fill Group Variables — .fill_grps_from_variables","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-fill_grps_from_variables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Back Fill Group Variables — .fill_grps_from_variables","text":"","code":"data <- data.frame(   variable = c(rep(\"A\", 3), rep(\"B\", 2)),   variable_level = 1:5,   A = rep(NA, 5),   B = rep(NA, 5) )  cards:::.fill_grps_from_variables(data) #> # A tibble: 5 × 4 #>   variable variable_level     A     B #>   <chr>             <int> <int> <int> #> 1 A                     1     1    NA #> 2 A                     2     2    NA #> 3 A                     3     3    NA #> 4 B                     4    NA     4 #> 5 B                     5    NA     5"},{"path":"https://insightsengineering.github.io/cards/reference/dot-fill_overall_grp_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill Overall Group Variables — .fill_overall_grp_values","title":"Fill Overall Group Variables — .fill_overall_grp_values","text":"function fills missing values grouping variables \"Overall variable name\" relevant. Specifically modify grouping values rows likely overall calculations present (e.g. non-missing variable/variable_level, 100 percent missing group variables, evidence variable computed group rows). \"Overall\" values populated grouping variables used calculations variable statistics.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-fill_overall_grp_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill Overall Group Variables — .fill_overall_grp_values","text":"","code":".fill_overall_grp_values(x, vars_protected)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-fill_overall_grp_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill Overall Group Variables — .fill_overall_grp_values","text":"x (data.frame) data frame","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-fill_overall_grp_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill Overall Group Variables — .fill_overall_grp_values","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-fill_overall_grp_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill Overall Group Variables — .fill_overall_grp_values","text":"","code":"data <- dplyr::tibble(   grp = c(\"AA\", \"AA\", NA, \"BB\", NA),   variable = c(\"A\", \"B\", \"A\", \"C\", \"C\"),   variable_level = c(1, 2, 1, 3, 3),   A = rep(NA, 5),   B = rep(NA, 5),   .cards_idx = c(1:5) )  cards:::.fill_overall_grp_values(data, vars_protected = \".cards_idx\") #> # A tibble: 5 × 6 #>   grp         variable variable_level A     B     .cards_idx #>   <chr>       <chr>             <dbl> <lgl> <lgl>      <int> #> 1 AA          A                     1 NA    NA             1 #> 2 AA          B                     2 NA    NA             2 #> 3 Overall grp A                     1 NA    NA             3 #> 4 BB          C                     3 NA    NA             4 #> 5 Overall grp C                     3 NA    NA             5"},{"path":"https://insightsengineering.github.io/cards/reference/dot-is_named_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Named List Predicate — .is_named_list","title":"Named List Predicate — .is_named_list","text":"predicate function check whether input named list data frame.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-is_named_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Named List Predicate — .is_named_list","text":"","code":".is_named_list(x, allow_df = FALSE)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-is_named_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Named List Predicate — .is_named_list","text":"x () object check","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-is_named_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Named List Predicate — .is_named_list","text":"logical","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-is_named_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Named List Predicate — .is_named_list","text":"","code":"cards:::.is_named_list(list(a = 1:3)) #> [1] TRUE"},{"path":"https://insightsengineering.github.io/cards/reference/dot-lst_results_as_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Results as Data Frame — .lst_results_as_df","title":"Prepare Results as Data Frame — .lst_results_as_df","text":"Function takes results eval_capture_conditions(), named list, e.g. list(result=, warning=, error=), converts data frame.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-lst_results_as_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Results as Data Frame — .lst_results_as_df","text":"","code":".lst_results_as_df(x, variable, fun_name, fun)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-lst_results_as_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Results as Data Frame — .lst_results_as_df","text":"x (named list) result eval_capture_conditions() variable (string) variable name results fun_name (string) name function called get results x","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-lst_results_as_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Results as Data Frame — .lst_results_as_df","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-lst_results_as_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Results as Data Frame — .lst_results_as_df","text":"","code":"msgs <- eval_capture_conditions({   warning(\"Warning 1\")   warning(\"Warning 2\")   letters[1:2] })  cards:::.lst_results_as_df(msgs, \"result\", \"mean\") #> # A tibble: 1 × 5 #>   stat      warning   error  stat_name variable #>   <list>    <list>    <list> <chr>     <chr>    #> 1 <chr [2]> <chr [2]> <NULL> mean      result"},{"path":"https://insightsengineering.github.io/cards/reference/dot-nesting_rename_ard_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename ARD Columns — .nesting_rename_ard_columns","title":"Rename ARD Columns — .nesting_rename_ard_columns","text":"variable provided, adds standard variable column x. /strata provided, adds standard group## column(s) x renames provided columns group##_level x, ## determined column's position c(, strata).","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-nesting_rename_ard_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename ARD Columns — .nesting_rename_ard_columns","text":"","code":".nesting_rename_ard_columns(x, variable = NULL, by = NULL, strata = NULL)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-nesting_rename_ard_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename ARD Columns — .nesting_rename_ard_columns","text":"x (data.frame) data frame variable (character) name variable column x. Default NULL. (character) character vector names columns x. Default NULL. strata (character) character vector names strata columns x. Default NULL.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-nesting_rename_ard_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename ARD Columns — .nesting_rename_ard_columns","text":"tibble","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-nesting_rename_ard_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename ARD Columns — .nesting_rename_ard_columns","text":"","code":"ard <- nest_for_ard(   data =     ADAE |>       dplyr::left_join(ADSL[c(\"USUBJID\", \"ARM\")], by = \"USUBJID\") |>       dplyr::filter(AOCCSFL %in% \"Y\"),   by = \"ARM\",   strata = \"AESOC\",   rename_columns = FALSE )  cards:::.nesting_rename_ard_columns(ard, by = \"ARM\", strata = \"AESOC\") #> # A tibble: 69 × 5 #>    group1 group1_level group2 group2_level data               #>    <chr>  <list>       <chr>  <list>       <list>             #>  1 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [12 × 54]> #>  2 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [15 × 54]> #>  3 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [13 × 54]> #>  4 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [0 × 54]>  #>  5 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [2 × 54]>  #>  6 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [1 × 54]>  #>  7 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [1 × 54]>  #>  8 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [1 × 54]>  #>  9 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [2 × 54]>  #> 10 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [2 × 54]>  #> # ℹ 59 more rows"},{"path":"https://insightsengineering.github.io/cards/reference/dot-one_row_ard_to_nested_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert One Row to Nested List — .one_row_ard_to_nested_list","title":"Convert One Row to Nested List — .one_row_ard_to_nested_list","text":"Convert One Row Nested List","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-one_row_ard_to_nested_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert One Row to Nested List — .one_row_ard_to_nested_list","text":"","code":".one_row_ard_to_nested_list(x)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-one_row_ard_to_nested_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert One Row to Nested List — .one_row_ard_to_nested_list","text":"x (data.frame) ARD data frame class 'card' one row","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-one_row_ard_to_nested_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert One Row to Nested List — .one_row_ard_to_nested_list","text":"expression represents element nested list","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-one_row_ard_to_nested_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert One Row to Nested List — .one_row_ard_to_nested_list","text":"","code":"ard_continuous(mtcars, variables = mpg) |>   dplyr::filter(dplyr::row_number() %in% 1L) |>   apply_fmt_fn() |>   cards:::.one_row_ard_to_nested_list() #> lst_return[[\"variable\"]][[\"mpg\"]][[\"stat_name\"]][[\"N\"]] <- list( #>     stat = 32L, stat_fmt = \"32\", warning = NULL, error = NULL,  #>     context = \"continuous\")"},{"path":"https://insightsengineering.github.io/cards/reference/dot-process_denominator.html","id":null,"dir":"Reference","previous_headings":"","what":"Process denominator Argument — .process_denominator","title":"Process denominator Argument — .process_denominator","text":"Function takes ard_categorical(denominator) argument returns structured data frame merged count data used denominator percentage calculations.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-process_denominator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process denominator Argument — .process_denominator","text":"","code":".process_denominator(data, variables, denominator, by, strata)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-process_denominator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process denominator Argument — .process_denominator","text":"data (data.frame) data frame variables (tidy-select) columns include summaries. Default everything(). denominator (string, data.frame, integer) Specify argument change denominator, e.g. \"N\" statistic. Default 'column'. See details. , strata (tidy-select) columns use grouping stratifying table output. Arguments similar, important distinction: : results tabulated combinations columns specified, including unobserved combinations unobserved factor levels. strata: results tabulated observed combinations columns specified. Arguments may used conjunction one another.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-process_denominator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process denominator Argument — .process_denominator","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-process_denominator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process denominator Argument — .process_denominator","text":"","code":"cards:::.process_denominator(mtcars, denominator = 1000, variables = \"cyl\", by = \"gear\") #> $cyl #> # A tibble: 1 × 1 #>   ...ard_N... #>         <int> #> 1        1000 #>"},{"path":"https://insightsengineering.github.io/cards/reference/dot-process_nested_list_as_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Nested Lists to Column — .process_nested_list_as_df","title":"Convert Nested Lists to Column — .process_nested_list_as_df","text":"arguments, stat_label, passed nested lists. function properly unnests lists adds results data frame.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-process_nested_list_as_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Nested Lists to Column — .process_nested_list_as_df","text":"","code":".process_nested_list_as_df(x, arg, new_column, unlist = FALSE)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-process_nested_list_as_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Nested Lists to Column — .process_nested_list_as_df","text":"x (data.frame) result data frame arg (list) nested list new_column (string) new column name unlist (logical) whether fully unlist final results","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-process_nested_list_as_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Nested Lists to Column — .process_nested_list_as_df","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-process_nested_list_as_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Nested Lists to Column — .process_nested_list_as_df","text":"","code":"ard <- ard_categorical(ADSL, by = \"ARM\", variables = \"AGEGR1\")  cards:::.process_nested_list_as_df(ard, NULL, \"new_col\") #> {cards} data frame: 27 x 12 #>    group1 group1_level variable variable_level stat_name stat_label  stat #> 1     ARM      Placebo   AGEGR1          65-80         n          n    42 #> 2     ARM      Placebo   AGEGR1          65-80         N          N    86 #> 3     ARM      Placebo   AGEGR1          65-80         p          % 0.488 #> 4     ARM      Placebo   AGEGR1            <65         n          n    14 #> 5     ARM      Placebo   AGEGR1            <65         N          N    86 #> 6     ARM      Placebo   AGEGR1            <65         p          % 0.163 #> 7     ARM      Placebo   AGEGR1            >80         n          n    30 #> 8     ARM      Placebo   AGEGR1            >80         N          N    86 #> 9     ARM      Placebo   AGEGR1            >80         p          % 0.349 #> 10    ARM    Xanomeli…   AGEGR1          65-80         n          n    55 #> ℹ 17 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 5 more variables: context, fmt_fn, warning, error, new_col"},{"path":"https://insightsengineering.github.io/cards/reference/dot-purrr_list_flatten.html","id":null,"dir":"Reference","previous_headings":"","what":"A list_flatten()-like Function — .purrr_list_flatten","title":"A list_flatten()-like Function — .purrr_list_flatten","text":"Function operates similarly purrr::list_flatten(x, name_spec = \"{inner}\").","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-purrr_list_flatten.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list_flatten()-like Function — .purrr_list_flatten","text":"","code":".purrr_list_flatten(x)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-purrr_list_flatten.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A list_flatten()-like Function — .purrr_list_flatten","text":"x (named list) named list","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-purrr_list_flatten.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A list_flatten()-like Function — .purrr_list_flatten","text":"named list","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-purrr_list_flatten.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A list_flatten()-like Function — .purrr_list_flatten","text":"","code":"x <- list(a = 1, b = list(b1 = 2, b2 = 3), c = list(c1 = 4, c2 = list(c2a = 5)))  cards:::.purrr_list_flatten(x) #> $a #> [1] 1 #>  #> $b1 #> [1] 2 #>  #> $b2 #> [1] 3 #>  #> $c1 #> [1] 4 #>  #> $c2 #> $c2$c2a #> [1] 5 #>  #>"},{"path":"https://insightsengineering.github.io/cards/reference/dot-rename_last_group_as_variable.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename Last Group to Variable — .rename_last_group_as_variable","title":"Rename Last Group to Variable — .rename_last_group_as_variable","text":"ard_hierarchical*() functions, last grouping variable renamed variable variable_level returned.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-rename_last_group_as_variable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename Last Group to Variable — .rename_last_group_as_variable","text":"","code":".rename_last_group_as_variable(df_result, by, variables)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-rename_last_group_as_variable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename Last Group to Variable — .rename_last_group_as_variable","text":"df_result (data.frame) ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-rename_last_group_as_variable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename Last Group to Variable — .rename_last_group_as_variable","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-rename_last_group_as_variable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename Last Group to Variable — .rename_last_group_as_variable","text":"","code":"data <- data.frame(x = 1, y = 2, group1 = 3, group2 = 4)  cards:::.rename_last_group_as_variable(data, by = \"ARM\", variables = \"AESOC\") #>   x y group1 variable #> 1 1 2      3        4"},{"path":"https://insightsengineering.github.io/cards/reference/dot-table_as_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Results from table() as Data Frame — .table_as_df","title":"Results from table() as Data Frame — .table_as_df","text":"Takes results table() returns data frame. table() results made data frame, variables made character columns, function also restores column types original classes. strata columns, observed combinations returned.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-table_as_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results from table() as Data Frame — .table_as_df","text":"","code":".table_as_df(   data,   variable = NULL,   by = NULL,   strata = NULL,   useNA = c(\"no\", \"always\"),   count_column = \"...ard_n...\" )"},{"path":"https://insightsengineering.github.io/cards/reference/dot-table_as_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Results from table() as Data Frame — .table_as_df","text":"data (data.frame) data frame variable (string) string indicating column data (character) character vector indicating columns data strata (character) character vector indicating columns data useNA (string) one \"\" \"always\". passed table(useNA).","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-table_as_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Results from table() as Data Frame — .table_as_df","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-table_as_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Results from table() as Data Frame — .table_as_df","text":"","code":"cards:::.table_as_df(ADSL, variable = \"ARM\", by = \"AGEGR1\", strata = NULL) #> # A tibble: 9 × 3 #>   AGEGR1 ARM                  ...ard_n... #>   <chr>  <chr>                      <int> #> 1 65-80  Placebo                       42 #> 2 <65    Placebo                       14 #> 3 >80    Placebo                       30 #> 4 65-80  Xanomeline High Dose          55 #> 5 <65    Xanomeline High Dose          11 #> 6 >80    Xanomeline High Dose          18 #> 7 65-80  Xanomeline Low Dose           47 #> 8 <65    Xanomeline Low Dose            8 #> 9 >80    Xanomeline Low Dose           29"},{"path":"https://insightsengineering.github.io/cards/reference/dot-trim_ard.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim ARD — .trim_ard","title":"Trim ARD — .trim_ard","text":"function ingests ARD object trims columns rows downstream use displays. resulting data frame contains numeric results, supplemental information errors/warnings, unnested list columns.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-trim_ard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim ARD — .trim_ard","text":"","code":".trim_ard(x)"},{"path":"https://insightsengineering.github.io/cards/reference/dot-trim_ard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim ARD — .trim_ard","text":"x (data.frame) data frame","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-trim_ard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim ARD — .trim_ard","text":"tibble","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-trim_ard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trim ARD — .trim_ard","text":"","code":"ard <- bind_ard(   ard_categorical(ADSL, by = \"ARM\", variables = \"AGEGR1\"),   ard_categorical(ADSL, variables = \"ARM\") ) |>   shuffle_ard(trim = FALSE)  ard |> cards:::.trim_ard() #> # A tibble: 36 × 7 #>    ARM               variable variable_level context stat_name stat_label   stat #>    <chr>             <chr>    <chr>          <chr>   <chr>     <chr>       <dbl> #>  1 Placebo           AGEGR1   65-80          catego… n         n          42     #>  2 Placebo           AGEGR1   65-80          catego… N         N          86     #>  3 Placebo           AGEGR1   65-80          catego… p         %           0.488 #>  4 Placebo           AGEGR1   <65            catego… n         n          14     #>  5 Placebo           AGEGR1   <65            catego… N         N          86     #>  6 Placebo           AGEGR1   <65            catego… p         %           0.163 #>  7 Placebo           AGEGR1   >80            catego… n         n          30     #>  8 Placebo           AGEGR1   >80            catego… N         N          86     #>  9 Placebo           AGEGR1   >80            catego… p         %           0.349 #> 10 Xanomeline High … AGEGR1   65-80          catego… n         n          55     #> # ℹ 26 more rows"},{"path":"https://insightsengineering.github.io/cards/reference/dot-unique_and_sorted.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD-flavor of unique() — .unique_and_sorted","title":"ARD-flavor of unique() — .unique_and_sorted","text":"Essentially wrapper unique(x) |> sort() NA levels removed. factors, levels returned even unobserved. Similarly, logical vectors always return c(TRUE, FALSE), even levels observed.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-unique_and_sorted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD-flavor of unique() — .unique_and_sorted","text":"","code":".unique_and_sorted(x, useNA = c(\"no\", \"always\"))"},{"path":"https://insightsengineering.github.io/cards/reference/dot-unique_and_sorted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD-flavor of unique() — .unique_and_sorted","text":"x () vector","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-unique_and_sorted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD-flavor of unique() — .unique_and_sorted","text":"vector","code":""},{"path":"https://insightsengineering.github.io/cards/reference/dot-unique_and_sorted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD-flavor of unique() — .unique_and_sorted","text":"","code":"cards:::.unique_and_sorted(factor(letters[c(5, 5:1)], levels = letters)) #>  [1] a b c d e f g h i j k l m n o p q r s t u v w x y z #> Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z  cards:::.unique_and_sorted(c(FALSE, TRUE, TRUE, FALSE)) #> [1] FALSE  TRUE  cards:::.unique_and_sorted(c(5, 5:1)) #> [1] 1 2 3 4 5"},{"path":"https://insightsengineering.github.io/cards/reference/eval_capture_conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate and Capture Conditions — eval_capture_conditions","title":"Evaluate and Capture Conditions — eval_capture_conditions","text":"eval_capture_conditions() Evaluates expression also capturing error warning conditions. Function always returns named list list(result=, warning=, error=). errors warnings, elements NULL. error, result element NULL. Messages neither saved printed console. Evaluation done via rlang::eval_tidy(). errors warnings produced using {cli} package, messages processed cli::ansi_strip() remove styling message. captured_condition_as_message()/captured_condition_as_error() functions take result eval_capture_conditions() return errors warnings either messages (via cli::cli_inform()) errors (via cli::cli_abort()). functions handle cases condition messages may include curly brackets, typically cause issues processed cli::cli_*() functions. Functions return \"result\" eval_capture_conditions().","code":""},{"path":"https://insightsengineering.github.io/cards/reference/eval_capture_conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate and Capture Conditions — eval_capture_conditions","text":"","code":"eval_capture_conditions(expr, data = NULL, env = caller_env())  captured_condition_as_message(   x,   message = c(\"The following {type} occured:\", x = \"{condition}\"),   type = c(\"error\", \"warning\"),   envir = rlang::current_env() )  captured_condition_as_error(   x,   message = c(\"The following {type} occured:\", x = \"{condition}\"),   type = c(\"error\", \"warning\"),   call = get_cli_abort_call(),   envir = rlang::current_env() )"},{"path":"https://insightsengineering.github.io/cards/reference/eval_capture_conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate and Capture Conditions — eval_capture_conditions","text":"expr expression quosure evaluate. data data frame, named list vector. Alternatively, data mask created as_data_mask() new_data_mask(). Objects data priority env. See section data masking. env environment evaluate expr. environment applicable quosures environments. x (captured_condition) captured condition created eval_capture_conditions(). message (character) message passed cli::cli_inform() cli::cli_abort(). condition printed saved object named condition, included message surrounded curly brackets. type (string) type condition return. Must one 'error' 'warning'. envir Environment evaluate glue expressions . call (environment) Execution environment currently running function. Default get_cli_abort_call().","code":""},{"path":"https://insightsengineering.github.io/cards/reference/eval_capture_conditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate and Capture Conditions — eval_capture_conditions","text":"named list","code":""},{"path":"https://insightsengineering.github.io/cards/reference/eval_capture_conditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate and Capture Conditions — eval_capture_conditions","text":"","code":"# function executes without error or warning eval_capture_conditions(letters[1:2]) #> $result #> [1] \"a\" \"b\" #>  #> $warning #> NULL #>  #> $error #> NULL #>  #> attr(,\"class\") #> [1] \"captured_condition\" \"list\"                # an error is thrown res <- eval_capture_conditions(stop(\"Example Error!\")) res #> $result #> NULL #>  #> $warning #> NULL #>  #> $error #> [1] \"Example Error!\" #>  #> attr(,\"class\") #> [1] \"captured_condition\" \"list\"               captured_condition_as_message(res) #> The following error occured: #> ✖ Example Error! #> NULL  # if more than one warning is returned, all are saved eval_capture_conditions({   warning(\"Warning 1\")   warning(\"Warning 2\")   letters[1:2] }) #> $result #> [1] \"a\" \"b\" #>  #> $warning #> [1] \"Warning 1\" \"Warning 2\" #>  #> $error #> NULL #>  #> attr(,\"class\") #> [1] \"captured_condition\" \"list\"                # messages are not printed to the console eval_capture_conditions({   message(\"A message!\")   letters[1:2] }) #> $result #> [1] \"a\" \"b\" #>  #> $warning #> NULL #>  #> $error #> NULL #>  #> attr(,\"class\") #> [1] \"captured_condition\" \"list\""},{"path":"https://insightsengineering.github.io/cards/reference/filter_ard_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Stacked Hierarchical ARDs — filter_ard_hierarchical","title":"Filter Stacked Hierarchical ARDs — filter_ard_hierarchical","text":"function used filter stacked hierarchical ARDs. purposes function, define \"variable group\" combination ARD rows grouped combination variable levels, excluding variables.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/filter_ard_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Stacked Hierarchical ARDs — filter_ard_hierarchical","text":"","code":"filter_ard_hierarchical(x, filter, keep_empty = FALSE)"},{"path":"https://insightsengineering.github.io/cards/reference/filter_ard_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Stacked Hierarchical ARDs — filter_ard_hierarchical","text":"x (card) stacked hierarchical ARD class 'card' created using ard_stack_hierarchical() ard_stack_hierarchical_count(). filter (expression) expression used filter variable groups hierarchical ARD. See Details section . keep_empty (scalar logical) Logical argument indicating whether retain summary rows corresponding hierarchy sections rows filtered . Default FALSE.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/filter_ard_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Stacked Hierarchical ARDs — filter_ard_hierarchical","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/filter_ard_hierarchical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter Stacked Hierarchical ARDs — filter_ard_hierarchical","text":"filter argument can used filter variable groups hierarchical ARD meet requirements provided expression. Variable groups can filtered values possible statistics (n, p, N) provided included least ARD, well values variables. illustrate function works, consider typical example AE summaries provided treatment group.   Filters applied summary statistics innermost variable hierarchy—AEDECOD case. summary statistics meet filter requirement treatment groups, entire row retained. example, filter = n >= 9 passed, criteria met DIARRHOEA Placebo group observed 9 AEs result summary statistics treatment groups retained well. Conversely, treatment groups' summary statistics satisfy filter requirement VOMITING rows associated AE removed. addition filtering individual statistic values, filters can applied across treatment groups (.e. across variable values) using aggregate functions sum() mean(). value filter = sum(n) >= 18 retains AEs sum number AEs across treatment groups greater equal 18. ard_stack_hierarchical(overall=TRUE) run, overall column considered filtering. ard_stack_hierarchical(over_variables=TRUE) run, overall statistics kept regardless filtering. examples possible filters: filter = n > 5: keep AEs one treatment groups observed 5 AEs filter = n == 2 & p < 0.05: keep AEs one treatment groups observed exactly 2 AEs one treatment groups observed proportion less 5% filter = sum(n) >= 4: keep AEs 4 AEs observed across treatment groups filter = mean(n) > 4 | n > 3: keep AEs mean number AEs 4 across treatment groups one treatment groups observed 3 AEs filter = (n > 2 & TRTA == \"Xanomeline High Dose\"): keep AEs \"Xanomeline High Dose\" treatment group observed 2 AEs","code":"ADAE |>   dplyr::filter(AESOC == \"GASTROINTESTINAL DISORDERS\",                 AEDECOD %in% c(\"VOMITING\", \"DIARRHOEA\")) |>   ard_stack_hierarchical(     variables = c(AESOC, AEDECOD),     by = TRTA,     denominator = ADSL |> dplyr::rename(TRTA = ARM),     id = USUBJID   )"},{"path":[]},{"path":"https://insightsengineering.github.io/cards/reference/filter_ard_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Stacked Hierarchical ARDs — filter_ard_hierarchical","text":"","code":"# create a base AE ARD ard <- ard_stack_hierarchical(   ADAE,   variables = c(AESOC, AEDECOD),   by = TRTA,   denominator = ADSL |> dplyr::rename(TRTA = ARM),   id = USUBJID )  # Example 1 ---------------------------------- # Keep AEs from TRTA groups where more than 3 AEs are observed across the group filter_ard_hierarchical(ard, sum(n) > 3) #> {cards} data frame: 477 x 13 #>    group1 group1_level group2 group2_level variable variable_level stat_name #> 1    <NA>                <NA>                  TRTA        Placebo         n #> 2    <NA>                <NA>                  TRTA        Placebo         N #> 3    <NA>                <NA>                  TRTA        Placebo         p #> 4    <NA>                <NA>                  TRTA      Xanomeli…         n #> 5    <NA>                <NA>                  TRTA      Xanomeli…         N #> 6    <NA>                <NA>                  TRTA      Xanomeli…         p #> 7    <NA>                <NA>                  TRTA      Xanomeli…         n #> 8    <NA>                <NA>                  TRTA      Xanomeli…         N #> 9    <NA>                <NA>                  TRTA      Xanomeli…         p #> 10   TRTA      Placebo   <NA>                 AESOC      CARDIAC …         n #>    stat_label  stat #> 1           n    86 #> 2           N   254 #> 3           % 0.339 #> 4           n    84 #> 5           N   254 #> 6           % 0.331 #> 7           n    84 #> 8           N   254 #> 9           % 0.331 #> 10          n    13 #> ℹ 467 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error  # Example 2 ---------------------------------- # Keep AEs where at least one level in the TRTA group has more than 3 AEs observed filter_ard_hierarchical(ard, n > 3) #> {cards} data frame: 228 x 13 #>    group1 group1_level group2 group2_level variable variable_level stat_name #> 1    <NA>                <NA>                  TRTA        Placebo         n #> 2    <NA>                <NA>                  TRTA        Placebo         N #> 3    <NA>                <NA>                  TRTA        Placebo         p #> 4    <NA>                <NA>                  TRTA      Xanomeli…         n #> 5    <NA>                <NA>                  TRTA      Xanomeli…         N #> 6    <NA>                <NA>                  TRTA      Xanomeli…         p #> 7    <NA>                <NA>                  TRTA      Xanomeli…         n #> 8    <NA>                <NA>                  TRTA      Xanomeli…         N #> 9    <NA>                <NA>                  TRTA      Xanomeli…         p #> 10   TRTA      Placebo   <NA>                 AESOC      CARDIAC …         n #>    stat_label  stat #> 1           n    86 #> 2           N   254 #> 3           % 0.339 #> 4           n    84 #> 5           N   254 #> 6           % 0.331 #> 7           n    84 #> 8           N   254 #> 9           % 0.331 #> 10          n    13 #> ℹ 218 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error  # Example 3 ---------------------------------- # Keep AEs that have an overall prevalence of greater than 5% filter_ard_hierarchical(ard, sum(n) / sum(N) > 0.05) #> {cards} data frame: 198 x 13 #>    group1 group1_level group2 group2_level variable variable_level stat_name #> 1    <NA>                <NA>                  TRTA        Placebo         n #> 2    <NA>                <NA>                  TRTA        Placebo         N #> 3    <NA>                <NA>                  TRTA        Placebo         p #> 4    <NA>                <NA>                  TRTA      Xanomeli…         n #> 5    <NA>                <NA>                  TRTA      Xanomeli…         N #> 6    <NA>                <NA>                  TRTA      Xanomeli…         p #> 7    <NA>                <NA>                  TRTA      Xanomeli…         n #> 8    <NA>                <NA>                  TRTA      Xanomeli…         N #> 9    <NA>                <NA>                  TRTA      Xanomeli…         p #> 10   TRTA      Placebo   <NA>                 AESOC      CARDIAC …         n #>    stat_label  stat #> 1           n    86 #> 2           N   254 #> 3           % 0.339 #> 4           n    84 #> 5           N   254 #> 6           % 0.331 #> 7           n    84 #> 8           N   254 #> 9           % 0.331 #> 10          n    13 #> ℹ 188 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/get_ard_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Statistics as List — get_ard_statistics","title":"ARD Statistics as List — get_ard_statistics","text":"Returns statistics ARD named list.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/get_ard_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Statistics as List — get_ard_statistics","text":"","code":"get_ard_statistics(x, ..., .column = \"stat\", .attributes = NULL)"},{"path":"https://insightsengineering.github.io/cards/reference/get_ard_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Statistics as List — get_ard_statistics","text":"x (data.frame) ARD data frame class 'card' ... (dynamic-dots) optional arguments indicating rows subset ARD. example, return rows column \"AGEGR1\" \"65-80\", pass AGEGR1 %% \"65-80\". .column (string) string indicating column returned list. Default \"statistic\" .attributes (character) character vector column names returned list attributes. Default NULL","code":""},{"path":"https://insightsengineering.github.io/cards/reference/get_ard_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Statistics as List — get_ard_statistics","text":"named list","code":""},{"path":"https://insightsengineering.github.io/cards/reference/get_ard_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Statistics as List — get_ard_statistics","text":"","code":"ard <- ard_categorical(ADSL, by = \"ARM\", variables = \"AGEGR1\")  get_ard_statistics(   ard,   group1_level %in% \"Placebo\",   variable_level %in% \"65-80\",   .attributes = \"stat_label\" ) #> $n #> [1] 42 #> attr(,\"stat_label\") #> [1] \"ARM\" #>  #> $N #> [1] 86 #> attr(,\"stat_label\") #> [1] \"ARM\" #>  #> $p #> [1] 0.4883721 #> attr(,\"stat_label\") #> [1] \"ARM\" #>"},{"path":"https://insightsengineering.github.io/cards/reference/label_round.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Formatting Function — label_round","title":"Generate Formatting Function — label_round","text":"Returns function requested rounding scaling schema.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/label_round.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Formatting Function — label_round","text":"","code":"label_round(digits = 1, scale = 1, width = NULL)"},{"path":"https://insightsengineering.github.io/cards/reference/label_round.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Formatting Function — label_round","text":"digits (integer) non-negative integer specifying number decimal places round statistics scale (numeric) scalar real number. rounding, input scaled quantity width (integer) non-negative integer specifying minimum width returned formatted values","code":""},{"path":"https://insightsengineering.github.io/cards/reference/label_round.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Formatting Function — label_round","text":"function","code":""},{"path":"https://insightsengineering.github.io/cards/reference/label_round.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Formatting Function — label_round","text":"","code":"label_round(2)(pi) #> [1] \"3.14\" label_round(1, scale = 100)(pi) #> [1] \"314.2\" label_round(2, width = 5)(pi) #> [1] \" 3.14\""},{"path":"https://insightsengineering.github.io/cards/reference/maximum_variable_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum Value — maximum_variable_value","title":"Maximum Value — maximum_variable_value","text":"column passed data frame, function returns named list value largest/last element sort. factors, last level returned, logical vectors TRUE returned. used default value ard_dichotomous(value) specified user.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/maximum_variable_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum Value — maximum_variable_value","text":"","code":"maximum_variable_value(data)"},{"path":"https://insightsengineering.github.io/cards/reference/maximum_variable_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum Value — maximum_variable_value","text":"data (data.frame) data frame","code":""},{"path":"https://insightsengineering.github.io/cards/reference/maximum_variable_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum Value — maximum_variable_value","text":"named list","code":""},{"path":"https://insightsengineering.github.io/cards/reference/maximum_variable_value.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maximum Value — maximum_variable_value","text":"","code":"ADSL[c(\"AGEGR1\", \"BMIBLGR1\")] |> maximum_variable_value() #> $AGEGR1 #> [1] \">80\" #>  #> $BMIBLGR1 #> [1] \">=30\" #>"},{"path":"https://insightsengineering.github.io/cards/reference/mock.html","id":null,"dir":"Reference","previous_headings":"","what":"Mock ARDs — mock","title":"Mock ARDs — mock","text":"Create empty ARDs used create mock tables table shells. applicable, formatting functions set return 'xx' 'xx.x'.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/mock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mock ARDs — mock","text":"","code":"mock_categorical(   variables,   statistic = everything() ~ c(\"n\", \"p\", \"N\"),   by = NULL )  mock_continuous(   variables,   statistic = everything() ~ c(\"N\", \"mean\", \"sd\", \"median\", \"p25\", \"p75\", \"min\", \"max\"),   by = NULL )  mock_dichotomous(   variables,   statistic = everything() ~ c(\"n\", \"p\", \"N\"),   by = NULL )  mock_missing(   variables,   statistic = everything() ~ c(\"N_obs\", \"N_miss\", \"N_nonmiss\", \"p_miss\", \"p_nonmiss\"),   by = NULL )  mock_attributes(label)  mock_total_n()"},{"path":"https://insightsengineering.github.io/cards/reference/mock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mock ARDs — mock","text":"variables (character named list) character vector variable names functions mock_continuous(), mock_missing(), mock_attributes(). named list functions mock_categorical() mock_dichotomous(), list element vector variable values. mock_dichotomous(), single value allowed variable. statistic (formula-list-selector) named list, list formulas, single formula list elements character vectors statistic names appear ARD. (named list) named list list element vector variable values. label (named list) named list variable labels, e.g. list(cyl = \". Cylinders\").","code":""},{"path":"https://insightsengineering.github.io/cards/reference/mock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mock ARDs — mock","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/mock.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mock ARDs — mock","text":"","code":"mock_categorical(   variables =     list(       AGEGR1 = factor(c(\"<65\", \"65-80\", \">80\"), levels = c(\"<65\", \"65-80\", \">80\"))     ),   by = list(TRTA = c(\"Placebo\", \"Xanomeline High Dose\", \"Xanomeline Low Dose\")) ) |>   apply_fmt_fn() #> {cards} data frame: 27 x 12 #>    group1 group1_level variable variable_level stat_name stat_label stat #> 1    TRTA      Placebo   AGEGR1            <65         n          n      #> 2    TRTA      Placebo   AGEGR1            <65         p          %      #> 3    TRTA      Placebo   AGEGR1            <65         N          N      #> 4    TRTA      Placebo   AGEGR1          65-80         n          n      #> 5    TRTA      Placebo   AGEGR1          65-80         p          %      #> 6    TRTA      Placebo   AGEGR1          65-80         N          N      #> 7    TRTA      Placebo   AGEGR1            >80         n          n      #> 8    TRTA      Placebo   AGEGR1            >80         p          %      #> 9    TRTA      Placebo   AGEGR1            >80         N          N      #> 10   TRTA    Xanomeli…   AGEGR1            <65         n          n      #>    stat_fmt #> 1        xx #> 2      xx.x #> 3        xx #> 4        xx #> 5      xx.x #> 6        xx #> 7        xx #> 8      xx.x #> 9        xx #> 10       xx #> ℹ 17 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error  mock_continuous(   variables = c(\"AGE\", \"BMIBL\"),   by = list(TRTA = c(\"Placebo\", \"Xanomeline High Dose\", \"Xanomeline Low Dose\")) ) |>   # update the mock to report 'xx.xx' for standard deviations   update_ard_fmt_fn(variables = c(\"AGE\", \"BMIBL\"), stat_names = \"sd\", fmt_fn = \\(x) \"xx.xx\") |>   apply_fmt_fn() #> {cards} data frame: 48 x 11 #>    group1 group1_level variable stat_name stat_label stat stat_fmt #> 1    TRTA      Placebo      AGE         N          N            xx #> 2    TRTA      Placebo      AGE      mean       Mean          xx.x #> 3    TRTA      Placebo      AGE        sd         SD         xx.xx #> 4    TRTA      Placebo      AGE    median     Median          xx.x #> 5    TRTA      Placebo      AGE       p25         Q1          xx.x #> 6    TRTA      Placebo      AGE       p75         Q3          xx.x #> 7    TRTA      Placebo      AGE       min        Min          xx.x #> 8    TRTA      Placebo      AGE       max        Max          xx.x #> 9    TRTA      Placebo    BMIBL         N          N            xx #> 10   TRTA      Placebo    BMIBL      mean       Mean          xx.x #> ℹ 38 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/nest_for_ard.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Nesting — nest_for_ard","title":"ARD Nesting — nest_for_ard","text":"function similar tidyr::nest(), except retains rows unobserved combinations (unobserved factor levels) variables, unobserved combinations stratifying variables. levels wrapped lists can stacked types different classes.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/nest_for_ard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Nesting — nest_for_ard","text":"","code":"nest_for_ard(   data,   by = NULL,   strata = NULL,   key = \"data\",   rename_columns = TRUE,   list_columns = TRUE,   include_data = TRUE )"},{"path":"https://insightsengineering.github.io/cards/reference/nest_for_ard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Nesting — nest_for_ard","text":"data (data.frame) data frame , strata (character) columns nest /stratify . Arguments similar, important distinction: : data frame nested combinations columns specified, including unobserved combinations unobserved factor levels. strata: data frame nested observed combinations columns specified. Arguments may used conjunction one another. key (string) name new column nested data frame. Default \"data\". rename_columns (logical) logical indicating whether rename strata variables. Default TRUE. list_columns (logical) logical indicating whether put levels strata columns list. Default TRUE. include_data (scalar logical) logical indicating whether include data subsets list-column. Default TRUE.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/nest_for_ard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Nesting — nest_for_ard","text":"nested tibble","code":""},{"path":"https://insightsengineering.github.io/cards/reference/nest_for_ard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Nesting — nest_for_ard","text":"","code":"nest_for_ard(   data =     ADAE |>       dplyr::left_join(ADSL[c(\"USUBJID\", \"ARM\")], by = \"USUBJID\") |>       dplyr::filter(AOCCSFL %in% \"Y\"),   by = \"ARM\",   strata = \"AESOC\" ) #> # A tibble: 69 × 5 #>    group1 group1_level group2 group2_level data               #>    <chr>  <list>       <chr>  <list>       <list>             #>  1 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [12 × 54]> #>  2 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [15 × 54]> #>  3 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [13 × 54]> #>  4 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [0 × 54]>  #>  5 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [2 × 54]>  #>  6 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [1 × 54]>  #>  7 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [1 × 54]>  #>  8 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [1 × 54]>  #>  9 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [2 × 54]>  #> 10 ARM    <chr [1]>    AESOC  <chr [1]>    <tibble [2 × 54]>  #> # ℹ 59 more rows"},{"path":"https://insightsengineering.github.io/cards/reference/print.card.html","id":null,"dir":"Reference","previous_headings":"","what":"Print — print.card","title":"Print — print.card","text":"Print method objects class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/print.card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print — print.card","text":"","code":"# S3 method for class 'card' print(x, n = NULL, columns = c(\"auto\", \"all\"), n_col = 6L, ...)"},{"path":"https://insightsengineering.github.io/cards/reference/print.card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print — print.card","text":"x (data.frame) object class 'card' n (integer) integer specifying number rows print columns (string) string indicating whether print selected number columns . n_col (integer) columns removed threshold columns present. argument sets threshold. used columns='auto' default 6L. Columns 'error', 'warning', 'context', 'fmt_fn' may removed print. columns printed, even n_col columns present. ... (dynamic-dots) used","code":""},{"path":"https://insightsengineering.github.io/cards/reference/print.card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print — print.card","text":"ARD data frame class 'card' (invisibly)","code":""},{"path":"https://insightsengineering.github.io/cards/reference/print.card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print — print.card","text":"","code":"ard_categorical(ADSL, variables = AGEGR1) |>   print() #> {cards} data frame: 9 x 9 #>   variable variable_level   context stat_name stat_label  stat #> 1   AGEGR1          65-80 categori…         n          n   144 #> 2   AGEGR1          65-80 categori…         N          N   254 #> 3   AGEGR1          65-80 categori…         p          % 0.567 #> 4   AGEGR1            <65 categori…         n          n    33 #> 5   AGEGR1            <65 categori…         N          N   254 #> 6   AGEGR1            <65 categori…         p          %  0.13 #> 7   AGEGR1            >80 categori…         n          n    77 #> 8   AGEGR1            >80 categori…         N          N   254 #> 9   AGEGR1            >80 categori…         p          % 0.303 #> ℹ 3 more variables: fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/print_ard_conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Print ARD Condition Messages — print_ard_conditions","title":"Print ARD Condition Messages — print_ard_conditions","text":"Function parses errors warnings observed calculating statistics requested ARD prints console messages.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/print_ard_conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print ARD Condition Messages — print_ard_conditions","text":"","code":"print_ard_conditions(x, condition_type = c(\"inform\", \"identity\"))"},{"path":"https://insightsengineering.github.io/cards/reference/print_ard_conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print ARD Condition Messages — print_ard_conditions","text":"x (data.frame) ARD data frame class 'card' condition_type (string) indicates warnings errors returned. Default \"inform\" returned messages. \"identity\", errors returned errors warnings warnings.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/print_ard_conditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print ARD Condition Messages — print_ard_conditions","text":"returns invisible check successful, throws condition messages .","code":""},{"path":"https://insightsengineering.github.io/cards/reference/print_ard_conditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print ARD Condition Messages — print_ard_conditions","text":"","code":"# passing a character variable for numeric summary ard_continuous(ADSL, variables = AGEGR1) |>   print_ard_conditions() #> The following warnings were returned during `print_ard_conditions()`: #> ! For variable `AGEGR1` and \"mean\" and \"median\" statistics: argument is not #>   numeric or logical: returning NA #> ! For variable `AGEGR1` and \"sd\" statistic: NAs introduced by coercion"},{"path":"https://insightsengineering.github.io/cards/reference/process_selectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Process tidyselectors — process_selectors","title":"Process tidyselectors — process_selectors","text":"Functions process tidyselect arguments passed functions cards package. processed values saved calling environment, default. process_selectors(): arguments processed tidyselect converted vector character column names. process_formula_selectors(): arguments expect named lists lists formulas (LHS formula tidyselector). function processes inputs returns named list. name repeated, last entry kept. fill_formula_selectors(): users override default argument values, can important ensure column data frame assigned value. function checks column data assigned value, , fills value default value passed . compute_formula_selector(): used process_formula_selectors() evaluate single argument. check_list_elements(): used check class/type/values list elements, primarily processed process_formula_selectors(). cards_select(): wraps tidyselect::eval_select() |> names(), returns better contextual messaging errors occur.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/process_selectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process tidyselectors — process_selectors","text":"","code":"process_selectors(data, ...)  process_formula_selectors(data, ...)  fill_formula_selectors(data, ...)  # S3 method for class 'data.frame' process_selectors(data, ..., env = caller_env())  # S3 method for class 'data.frame' process_formula_selectors(   data,   ...,   env = caller_env(),   include_env = FALSE,   allow_empty = TRUE )  # S3 method for class 'data.frame' fill_formula_selectors(data, ..., env = caller_env())  compute_formula_selector(   data,   x,   arg_name = caller_arg(x),   env = caller_env(),   strict = TRUE,   include_env = FALSE,   allow_empty = TRUE )  check_list_elements(   x,   predicate,   error_msg = NULL,   arg_name = rlang::caller_arg(x) )  cards_select(expr, data, ..., arg_name = NULL)"},{"path":"https://insightsengineering.github.io/cards/reference/process_selectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process tidyselectors — process_selectors","text":"data (data.frame) data frame ... (dynamic-dots) named arguments value argument processed tidyselect. process_selectors(): values tidyselect-compatible selectors process_formula_selectors(): values named lists, list formulas combination , single formula. Users may pass ~value shortcut everything() ~ value. check_list_elements(): named arguments name matches existing list env environment, value predicate function test element list, e.g. element must string function. env (environment) env save results . Default calling environment. include_env (logical) whether include environment formula object returned named list. Default FALSE allow_empty (logical) Logical indicating whether empty result acceptable process formula-list selectors. Default TRUE. x compute_formula_selector(): (formula-list-selector) named list, list formulas, single formula converted named list. check_list_elements(): (named list) named list arg_name (string) name argument processed. Used error messaging. Default caller_arg(x). strict (logical) whether throw error variable exist reference data (passed tidyselect::eval_select()) predicate (function) predicate function returns TRUE FALSE error_msg (character) character vector used error messaging mis-specified arguments passed. Elements \"{arg_name}\" \"{variable}\" available using glue syntax messaging. expr (expression) Defused R code describing selection according tidyselect syntax.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/process_selectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process tidyselectors — process_selectors","text":"process_selectors(), fill_formula_selectors(), process_formula_selectors() check_list_elements() return NULL. compute_formula_selector() returns named list.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/process_selectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process tidyselectors — process_selectors","text":"","code":"example_env <- rlang::new_environment()  process_selectors(ADSL, variables = starts_with(\"TRT\"), env = example_env) get(x = \"variables\", envir = example_env) #> [1] \"TRT01P\"  \"TRT01PN\" \"TRT01A\"  \"TRT01AN\" \"TRTSDT\"  \"TRTEDT\"  \"TRTDUR\"   fill_formula_selectors(ADSL, env = example_env)  process_formula_selectors(   ADSL,   statistic = list(starts_with(\"TRT\") ~ mean, TRTSDT = min),   env = example_env ) get(x = \"statistic\", envir = example_env) #> $TRT01P #> function (x, ...)  #> UseMethod(\"mean\") #> <bytecode: 0x561ad94d4578> #> <environment: namespace:base> #>  #> $TRT01PN #> function (x, ...)  #> UseMethod(\"mean\") #> <bytecode: 0x561ad94d4578> #> <environment: namespace:base> #>  #> $TRT01A #> function (x, ...)  #> UseMethod(\"mean\") #> <bytecode: 0x561ad94d4578> #> <environment: namespace:base> #>  #> $TRT01AN #> function (x, ...)  #> UseMethod(\"mean\") #> <bytecode: 0x561ad94d4578> #> <environment: namespace:base> #>  #> $TRTEDT #> function (x, ...)  #> UseMethod(\"mean\") #> <bytecode: 0x561ad94d4578> #> <environment: namespace:base> #>  #> $TRTDUR #> function (x, ...)  #> UseMethod(\"mean\") #> <bytecode: 0x561ad94d4578> #> <environment: namespace:base> #>  #> $TRTSDT #> function (..., na.rm = FALSE)  .Primitive(\"min\") #>   check_list_elements(   get(x = \"statistic\", envir = example_env),   predicate = function(x) !is.null(x),   error_msg = c(     \"Error in the argument {.arg {arg_name}} for variable {.val {variable}}.\",     \"i\" = \"Value must be a named list of functions.\"   ) )  # process one list compute_formula_selector(ADSL, x = starts_with(\"U\") ~ 1L) #> $USUBJID #> [1] 1 #>"},{"path":"https://insightsengineering.github.io/cards/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>%, all_of, any_of, contains, ends_with, everything, last_col, matches, num_range, one_of, starts_with, vars, ","code":""},{"path":"https://insightsengineering.github.io/cards/reference/rename_ard_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename ARD Variables — rename_ard_columns","title":"Rename ARD Variables — rename_ard_columns","text":"Rename grouping variable columns original column names.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/rename_ard_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename ARD Variables — rename_ard_columns","text":"","code":"rename_ard_columns(   x,   columns = c(all_ard_groups(\"names\"), all_ard_variables(\"names\")),   fill = \"{colname}\",   unlist = NULL )"},{"path":"https://insightsengineering.github.io/cards/reference/rename_ard_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename ARD Variables — rename_ard_columns","text":"x (data.frame) ARD data frame class 'card' columns (tidy-select) columns rename, e.g. selecting columns c('group1', 'group2', 'variable') rename 'group1_level' name variable found 'group1'. , example, 'group1_level' exist, values new column filled values fill argument. Default c(all_ard_groups(\"names\"), all_ard_variables(\"names\")). fill (scalar/glue) scalar fill column values variable levels. character passed, processed glue::glue() colname element available inject string, e.g. 'Overall {colname}' may resolve 'Overall AGE' AGE column. Default '{colname}'. unlist","code":""},{"path":"https://insightsengineering.github.io/cards/reference/rename_ard_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename ARD Variables — rename_ard_columns","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cards/reference/rename_ard_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename ARD Variables — rename_ard_columns","text":"","code":"# Example 1 ---------------------------------- ADSL |>   ard_categorical(by = ARM, variables = AGEGR1) |>   apply_fmt_fn() |>   rename_ard_columns() |>   unlist_ard_columns() #> # A tibble: 27 × 10 #>    ARM        AGEGR1 context stat_name stat_label   stat stat_fmt fmt_fn warning #>    <chr>      <chr>  <chr>   <chr>     <chr>       <dbl> <chr>    <list> <list>  #>  1 Placebo    65-80  catego… n         n          42     42       <int>  <NULL>  #>  2 Placebo    65-80  catego… N         N          86     86       <int>  <NULL>  #>  3 Placebo    65-80  catego… p         %           0.488 48.8     <fn>   <NULL>  #>  4 Placebo    <65    catego… n         n          14     14       <int>  <NULL>  #>  5 Placebo    <65    catego… N         N          86     86       <int>  <NULL>  #>  6 Placebo    <65    catego… p         %           0.163 16.3     <fn>   <NULL>  #>  7 Placebo    >80    catego… n         n          30     30       <int>  <NULL>  #>  8 Placebo    >80    catego… N         N          86     86       <int>  <NULL>  #>  9 Placebo    >80    catego… p         %           0.349 34.9     <fn>   <NULL>  #> 10 Xanomelin… 65-80  catego… n         n          55     55       <int>  <NULL>  #> # ℹ 17 more rows #> # ℹ 1 more variable: error <list>  # Example 2 ---------------------------------- ADSL |>   ard_continuous(by = ARM, variables = AGE) |>   apply_fmt_fn() |>   rename_ard_columns(fill = \"Overall {colname}\") |>   unlist_ard_columns() #> # A tibble: 24 × 10 #>    ARM   AGE   context stat_name stat_label  stat stat_fmt fmt_fn warning error  #>    <chr> <chr> <chr>   <chr>     <chr>      <dbl> <chr>    <list> <list>  <list> #>  1 Plac… Over… contin… N         N          86    86       <int>  <NULL>  <NULL> #>  2 Plac… Over… contin… mean      Mean       75.2  75.2     <int>  <NULL>  <NULL> #>  3 Plac… Over… contin… sd        SD          8.59 8.6      <int>  <NULL>  <NULL> #>  4 Plac… Over… contin… median    Median     76    76.0     <int>  <NULL>  <NULL> #>  5 Plac… Over… contin… p25       Q1         69    69.0     <int>  <NULL>  <NULL> #>  6 Plac… Over… contin… p75       Q3         82    82.0     <int>  <NULL>  <NULL> #>  7 Plac… Over… contin… min       Min        52    52.0     <int>  <NULL>  <NULL> #>  8 Plac… Over… contin… max       Max        89    89.0     <int>  <NULL>  <NULL> #>  9 Xano… Over… contin… N         N          84    84       <int>  <NULL>  <NULL> #> 10 Xano… Over… contin… mean      Mean       74.4  74.4     <int>  <NULL>  <NULL> #> # ℹ 14 more rows"},{"path":"https://insightsengineering.github.io/cards/reference/rename_ard_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename ARD Group Columns — rename_ard_groups","title":"Rename ARD Group Columns — rename_ard_groups","text":"Functions renaming group columns names ARDs.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/rename_ard_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename ARD Group Columns — rename_ard_groups","text":"","code":"rename_ard_groups_shift(x, shift = -1)  rename_ard_groups_reverse(x)"},{"path":"https://insightsengineering.github.io/cards/reference/rename_ard_groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename ARD Group Columns — rename_ard_groups","text":"x (data.frame) ARD data frame class 'card'. shift (integer) integer specifying many values shift group IDs, e.g. shift=-1 renames group2 group1.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/rename_ard_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename ARD Group Columns — rename_ard_groups","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/rename_ard_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename ARD Group Columns — rename_ard_groups","text":"","code":"ard <- ard_continuous(ADSL, by = c(SEX, ARM), variables = AGE)  # Example 1 ---------------------------------- rename_ard_groups_shift(ard, shift = -1) #> There are now non-standard group column names: \"group0\" and \"group0_level\". #> ℹ Is this the shift you had planned? #> {cards} data frame: 48 x 12 #>    group0 group0_level group1 group1_level variable stat_name stat_label   stat #> 1     SEX            F    ARM      Placebo      AGE         N          N     53 #> 2     SEX            F    ARM      Placebo      AGE      mean       Mean 76.358 #> 3     SEX            F    ARM      Placebo      AGE        sd         SD  8.733 #> 4     SEX            F    ARM      Placebo      AGE    median     Median     78 #> 5     SEX            F    ARM      Placebo      AGE       p25         Q1     70 #> 6     SEX            F    ARM      Placebo      AGE       p75         Q3     84 #> 7     SEX            F    ARM      Placebo      AGE       min        Min     59 #> 8     SEX            F    ARM      Placebo      AGE       max        Max     89 #> 9     SEX            F    ARM    Xanomeli…      AGE         N          N     40 #> 10    SEX            F    ARM    Xanomeli…      AGE      mean       Mean 74.675 #> ℹ 38 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error  # Example 2 ---------------------------------- rename_ard_groups_reverse(ard) #> {cards} data frame: 48 x 12 #>    group1 group1_level group2 group2_level variable stat_name stat_label   stat #> 1     ARM      Placebo    SEX            F      AGE         N          N     53 #> 2     ARM      Placebo    SEX            F      AGE      mean       Mean 76.358 #> 3     ARM      Placebo    SEX            F      AGE        sd         SD  8.733 #> 4     ARM      Placebo    SEX            F      AGE    median     Median     78 #> 5     ARM      Placebo    SEX            F      AGE       p25         Q1     70 #> 6     ARM      Placebo    SEX            F      AGE       p75         Q3     84 #> 7     ARM      Placebo    SEX            F      AGE       min        Min     59 #> 8     ARM      Placebo    SEX            F      AGE       max        Max     89 #> 9     ARM    Xanomeli…    SEX            F      AGE         N          N     40 #> 10    ARM    Xanomeli…    SEX            F      AGE      mean       Mean 74.675 #> ℹ 38 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/replace_null_statistic.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace NULL Statistics with Specified Value — replace_null_statistic","title":"Replace NULL Statistics with Specified Value — replace_null_statistic","text":"statistical summary function errors, \"stat\" column NULL. , however, sometimes useful replace values non-NULL value, e.g. NA.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/replace_null_statistic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace NULL Statistics with Specified Value — replace_null_statistic","text":"","code":"replace_null_statistic(x, value = NA, rows = TRUE)"},{"path":"https://insightsengineering.github.io/cards/reference/replace_null_statistic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace NULL Statistics with Specified Value — replace_null_statistic","text":"x (data.frame) ARD data frame class 'card' value (usually scalar) value replace NULL values . Default NA. rows (data-masking) Expression return logical value, defined terms variables .data. rows condition evaluates TRUE replaced. Default TRUE, applies rows.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/replace_null_statistic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace NULL Statistics with Specified Value — replace_null_statistic","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/replace_null_statistic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Replace NULL Statistics with Specified Value — replace_null_statistic","text":"","code":"# the quantile functions error because the input is character, while the median function returns NA data.frame(x = rep_len(NA_character_, 10)) |>   ard_continuous(     variables = x,     statistic = ~ continuous_summary_fns(c(\"median\", \"p25\", \"p75\"))   ) |>   replace_null_statistic(rows = !is.null(error)) #> {cards} data frame: 3 x 8 #>   variable   context stat_name stat_label stat     error #> 1        x continuo…    median     Median   NA           #> 2        x continuo…       p25         Q1   NA non-nume… #> 3        x continuo…       p75         Q3   NA non-nume… #> ℹ 2 more variables: fmt_fn, warning"},{"path":"https://insightsengineering.github.io/cards/reference/round5.html","id":null,"dir":"Reference","previous_headings":"","what":"Rounding of Numbers — round5","title":"Rounding of Numbers — round5","text":"Rounds values first argument specified number decimal places (default 0). Importantly, round5() use Base R's \"round even\" default. Standard rounding methods implemented, example, cards::round5(0.5) = 1, whereas base::round(0.5) = 0.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/round5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rounding of Numbers — round5","text":"","code":"round5(x, digits = 0)"},{"path":"https://insightsengineering.github.io/cards/reference/round5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rounding of Numbers — round5","text":"x (numeric) numeric vector digits (integer) integer indicating number decimal places","code":""},{"path":"https://insightsengineering.github.io/cards/reference/round5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rounding of Numbers — round5","text":"numeric vector","code":""},{"path":"https://insightsengineering.github.io/cards/reference/round5.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rounding of Numbers — round5","text":"Function inspired janitor::round_half_up().","code":""},{"path":"https://insightsengineering.github.io/cards/reference/round5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rounding of Numbers — round5","text":"","code":"x <- 0:4 / 2 round5(x) |> setNames(x) #>   0 0.5   1 1.5   2  #>   0   1   1   2   2   # compare results to Base R round(x) |> setNames(x) #>   0 0.5   1 1.5   2  #>   0   0   1   2   2"},{"path":"https://insightsengineering.github.io/cards/reference/selectors.html","id":null,"dir":"Reference","previous_headings":"","what":"ARD Selectors — selectors","title":"ARD Selectors — selectors","text":"selection helpers match variables according given pattern. all_ard_groups(): Function selects grouping columns, e.g. columns named \"group##\" \"group##_level\". all_ard_variables(): Function selects variables columns, e.g. columns named \"variable\" \"variable_level\". all_ard_group_n(): Function selects n grouping columns. all_missing_columns(): Function selects columns NA empty.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/selectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ARD Selectors — selectors","text":"","code":"all_ard_groups(types = c(\"names\", \"levels\"))  all_ard_variables(types = c(\"names\", \"levels\"))  all_ard_group_n(n, types = c(\"names\", \"levels\"))  all_missing_columns()"},{"path":"https://insightsengineering.github.io/cards/reference/selectors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ARD Selectors — selectors","text":"types (character) type(s) columns select. \"names\" selects columns variable name columns, \"levels\" selects level columns. Default c(\"names\", \"levels\"). n (integer) integer(s) indicating grouping columns select.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/selectors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ARD Selectors — selectors","text":"tidyselect output","code":""},{"path":"https://insightsengineering.github.io/cards/reference/selectors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ARD Selectors — selectors","text":"","code":"ard <- ard_categorical(ADSL, by = \"ARM\", variables = \"AGEGR1\")  ard |> dplyr::select(all_ard_groups()) #> {cards} data frame: 27 x 2 #>    group1 group1_level #> 1     ARM      Placebo #> 2     ARM      Placebo #> 3     ARM      Placebo #> 4     ARM      Placebo #> 5     ARM      Placebo #> 6     ARM      Placebo #> 7     ARM      Placebo #> 8     ARM      Placebo #> 9     ARM      Placebo #> 10    ARM    Xanomeli… #> ℹ 17 more rows #> ℹ Use `print(n = ...)` to see more rows ard |> dplyr::select(all_ard_variables()) #> {cards} data frame: 27 x 2 #>    variable variable_level #> 1    AGEGR1          65-80 #> 2    AGEGR1          65-80 #> 3    AGEGR1          65-80 #> 4    AGEGR1            <65 #> 5    AGEGR1            <65 #> 6    AGEGR1            <65 #> 7    AGEGR1            >80 #> 8    AGEGR1            >80 #> 9    AGEGR1            >80 #> 10   AGEGR1          65-80 #> ℹ 17 more rows #> ℹ Use `print(n = ...)` to see more rows"},{"path":"https://insightsengineering.github.io/cards/reference/shuffle_ard.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffle ARD — shuffle_ard","title":"Shuffle ARD — shuffle_ard","text":"function ingests ARD object shuffles information prepare analysis. Helpful streamlining across multiple ARDs. Combines group/group_level 1 column, back fills missing grouping values variable levels possible, optionally trims statistics-level metadata.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/shuffle_ard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffle ARD — shuffle_ard","text":"","code":"shuffle_ard(x, trim = TRUE)"},{"path":"https://insightsengineering.github.io/cards/reference/shuffle_ard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffle ARD — shuffle_ard","text":"x (data.frame) ARD data frame class 'card' trim (logical) logical representing whether trim away statistic-level metadata filter numeric statistic values.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/shuffle_ard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shuffle ARD — shuffle_ard","text":"tibble","code":""},{"path":"https://insightsengineering.github.io/cards/reference/shuffle_ard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shuffle ARD — shuffle_ard","text":"","code":"bind_ard(   ard_categorical(ADSL, by = \"ARM\", variables = \"AGEGR1\"),   ard_categorical(ADSL, variables = \"ARM\") ) |>   shuffle_ard() #> # A tibble: 36 × 7 #>    ARM               variable variable_level context stat_name stat_label   stat #>    <chr>             <chr>    <chr>          <chr>   <chr>     <chr>       <dbl> #>  1 Placebo           AGEGR1   65-80          catego… n         n          42     #>  2 Placebo           AGEGR1   65-80          catego… N         N          86     #>  3 Placebo           AGEGR1   65-80          catego… p         %           0.488 #>  4 Placebo           AGEGR1   <65            catego… n         n          14     #>  5 Placebo           AGEGR1   <65            catego… N         N          86     #>  6 Placebo           AGEGR1   <65            catego… p         %           0.163 #>  7 Placebo           AGEGR1   >80            catego… n         n          30     #>  8 Placebo           AGEGR1   >80            catego… N         N          86     #>  9 Placebo           AGEGR1   >80            catego… p         %           0.349 #> 10 Xanomeline High … AGEGR1   65-80          catego… n         n          55     #> # ℹ 26 more rows"},{"path":"https://insightsengineering.github.io/cards/reference/sort_ard_hierarchical.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort Stacked Hierarchical ARDs — sort_ard_hierarchical","title":"Sort Stacked Hierarchical ARDs — sort_ard_hierarchical","text":"function used sort stacked hierarchical ARDs. purposes function, define \"variable group\" combination ARD rows grouped combination variable levels, excluding variables.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/sort_ard_hierarchical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort Stacked Hierarchical ARDs — sort_ard_hierarchical","text":"","code":"sort_ard_hierarchical(x, sort = c(\"descending\", \"alphanumeric\"))"},{"path":"https://insightsengineering.github.io/cards/reference/sort_ard_hierarchical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort Stacked Hierarchical ARDs — sort_ard_hierarchical","text":"x (card) stacked hierarchical ARD class 'card' created using ard_stack_hierarchical() ard_stack_hierarchical_count(). sort (string) type sorting perform. Value must one : \"alphanumeric\" - within hierarchical section ARD, groups ordered alphanumerically (.e. Z) variable_level text. \"descending\" - within variable group ARD, count sums calculated group groups sorted descending order sum. sort = \"descending\", n statistic used calculate variable group sums included statistic variables, otherwise p used. neither n p present x variables, error occur. Defaults \"descending\".","code":""},{"path":"https://insightsengineering.github.io/cards/reference/sort_ard_hierarchical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort Stacked Hierarchical ARDs — sort_ard_hierarchical","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/sort_ard_hierarchical.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Sort Stacked Hierarchical ARDs — sort_ard_hierarchical","text":"overall data present x (.e. ARD created ard_stack_hierarchical(overall=TRUE)), overall data sorted last within variable group (.e. rows combination variable levels).","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/cards/reference/sort_ard_hierarchical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort Stacked Hierarchical ARDs — sort_ard_hierarchical","text":"","code":"ard_stack_hierarchical(   ADAE,   variables = c(AESOC, AEDECOD),   by = TRTA,   denominator = ADSL |> dplyr::rename(TRTA = ARM),   id = USUBJID ) |>   sort_ard_hierarchical(\"alphanumeric\") #> {cards} data frame: 2394 x 13 #>    group1 group1_level group2 group2_level variable variable_level stat_name #> 1    <NA>                <NA>                  TRTA        Placebo         n #> 2    <NA>                <NA>                  TRTA        Placebo         N #> 3    <NA>                <NA>                  TRTA        Placebo         p #> 4    <NA>                <NA>                  TRTA      Xanomeli…         n #> 5    <NA>                <NA>                  TRTA      Xanomeli…         N #> 6    <NA>                <NA>                  TRTA      Xanomeli…         p #> 7    <NA>                <NA>                  TRTA      Xanomeli…         n #> 8    <NA>                <NA>                  TRTA      Xanomeli…         N #> 9    <NA>                <NA>                  TRTA      Xanomeli…         p #> 10   TRTA      Placebo   <NA>                 AESOC      CARDIAC …         n #>    stat_label  stat #> 1           n    86 #> 2           N   254 #> 3           % 0.339 #> 4           n    84 #> 5           N   254 #> 6           % 0.331 #> 7           n    84 #> 8           N   254 #> 9           % 0.331 #> 10          n    13 #> ℹ 2384 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error  ard_stack_hierarchical_count(   ADAE,   variables = c(AESOC, AEDECOD),   by = TRTA,   denominator = ADSL |> dplyr::rename(TRTA = ARM) ) |>   sort_ard_hierarchical(\"descending\") #> {cards} data frame: 804 x 13 #>    group1 group1_level group2 group2_level variable variable_level stat_name #> 1    <NA>                <NA>                  TRTA        Placebo         n #> 2    <NA>                <NA>                  TRTA        Placebo         N #> 3    <NA>                <NA>                  TRTA        Placebo         p #> 4    <NA>                <NA>                  TRTA      Xanomeli…         n #> 5    <NA>                <NA>                  TRTA      Xanomeli…         N #> 6    <NA>                <NA>                  TRTA      Xanomeli…         p #> 7    <NA>                <NA>                  TRTA      Xanomeli…         n #> 8    <NA>                <NA>                  TRTA      Xanomeli…         N #> 9    <NA>                <NA>                  TRTA      Xanomeli…         p #> 10   TRTA      Placebo   <NA>                 AESOC      GENERAL …         n #>    stat_label  stat #> 1           n    86 #> 2           N   254 #> 3           % 0.339 #> 4           n    84 #> 5           N   254 #> 6           % 0.331 #> 7           n    84 #> 8           N   254 #> 9           % 0.331 #> 10          n    48 #> ℹ 794 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/summary_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Functions — summary_functions","title":"Summary Functions — summary_functions","text":"continuous_summary_fns() returns named list summary functions continuous variables. functions include slight modifications base equivalents. example, min() max() functions return NA instead Inf empty vector passed. Statistics \"p25\" \"p75\" calculated quantile(type = 2), matches SAS's default value.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/summary_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Functions — summary_functions","text":"","code":"continuous_summary_fns(   summaries = c(\"N\", \"mean\", \"sd\", \"median\", \"p25\", \"p75\", \"min\", \"max\"),   other_stats = NULL )"},{"path":"https://insightsengineering.github.io/cards/reference/summary_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Functions — summary_functions","text":"summaries (character) character vector results include output. Select one 'N', 'mean', 'sd', 'median', 'p25', 'p75', 'min', 'max'. other_stats (named list) named list statistic functions supplement pre-programmed functions.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/summary_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Functions — summary_functions","text":"named list summary statistics","code":""},{"path":"https://insightsengineering.github.io/cards/reference/summary_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Functions — summary_functions","text":"","code":"# continuous variable summaries ard_continuous(   ADSL,   variables = \"AGE\",   statistic = ~ continuous_summary_fns(c(\"N\", \"median\")) ) #> {cards} data frame: 2 x 8 #>   variable   context stat_name stat_label stat fmt_fn #> 1      AGE continuo…         N          N  254      0 #> 2      AGE continuo…    median     Median   77      1 #> ℹ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/syntax.html","id":null,"dir":"Reference","previous_headings":"","what":"Selecting Syntax — syntax","title":"Selecting Syntax — syntax","text":"Selecting Syntax","code":""},{"path":"https://insightsengineering.github.io/cards/reference/syntax.html","id":"selectors","dir":"Reference","previous_headings":"","what":"Selectors","title":"Selecting Syntax — syntax","text":"cards package also utilizes selectors: selectors tidyselect package custom selectors. Review help files details. tidy selectors everything(), all_of(), any_of(), starts_with(), ends_with(), contains(), matches(), num_range(), last_col() cards selectors all_ard_groups(), all_ard_variables()","code":""},{"path":"https://insightsengineering.github.io/cards/reference/syntax.html","id":"formula-and-list-selectors","dir":"Reference","previous_headings":"","what":"Formula and List Selectors","title":"Selecting Syntax — syntax","text":"arguments cards package accept list formula notation, e.g. ard_continuous(statistic=). enumerates tips shortcuts using list formulas. List Formulas Typical usage includes list formulas, LHS variable name selector.   Named List may also pass named list; however, tidyselect selectors supported syntax.   Hybrid Named List/List Formulas can pass combination formulas named elements.   Shortcuts can pass single formula, equivalent passing formula list.   shortcut select variables, can omit LHS formula. two calls equivalent.   Combination Selectors Selectors can combined using c() function.","code":"ard_continuous(statistic = list(age ~ list(N = \\(x) length(x)), starts_with(\"a\") ~ list(mean = mean))) ard_continuous(statistic = list(age = list(N = \\(x) length(x)))) ard_continuous(statistic = list(age = list(N = \\(x) length(x)), starts_with(\"a\") ~ list(mean = mean))) ard_continuous(statistic = starts_with(\"a\") ~ list(mean = mean) ard_continuous(statistic = ~list(N = \\(x) length(x))) ard_continuous(statistic = everything() ~ list(N = \\(x) length(x))) ard_continuous(statistic = c(everything(), -age) ~ list(N = \\(x) length(x)))"},{"path":"https://insightsengineering.github.io/cards/reference/tidy_ard_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard Order of ARD — tidy_ard_order","title":"Standard Order of ARD — tidy_ard_order","text":"ARD functions relocating columns rows standard order. tidy_ard_column_order() relocates columns ARD standard order. tidy_ard_row_order() orders rows ARD according groups strata (group 1, group2, etc), retaining column order input ARD.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/tidy_ard_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard Order of ARD — tidy_ard_order","text":"","code":"tidy_ard_column_order(x, group_order = c(\"ascending\", \"descending\"))  tidy_ard_row_order(x)"},{"path":"https://insightsengineering.github.io/cards/reference/tidy_ard_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard Order of ARD — tidy_ard_order","text":"x (data.frame) ARD data frame class 'card' group_order (string) specifies ordering grouping variables. Must one c(\"ascending\", \"descending\"). Default \"ascending\", grouping variables begin \"group1\" variables, followed \"group2\" variables, etc.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/tidy_ard_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard Order of ARD — tidy_ard_order","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/tidy_ard_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standard Order of ARD — tidy_ard_order","text":"","code":"# order columns ard <-   dplyr::bind_rows(     ard_continuous(mtcars, variables = \"mpg\"),     ard_continuous(mtcars, variables = \"mpg\", by = \"cyl\")   )  tidy_ard_column_order(ard) |>   tidy_ard_row_order() #> {cards} data frame: 32 x 10 #>    group1 group1_level variable stat_name stat_label   stat #> 1    <NA>                   mpg         N          N     32 #> 2    <NA>                   mpg      mean       Mean 20.091 #> 3    <NA>                   mpg        sd         SD  6.027 #> 4    <NA>                   mpg    median     Median   19.2 #> 5    <NA>                   mpg       p25         Q1  15.35 #> 6    <NA>                   mpg       p75         Q3   22.8 #> 7    <NA>                   mpg       min        Min   10.4 #> 8    <NA>                   mpg       max        Max   33.9 #> 9     cyl            4      mpg         N          N     11 #> 10    cyl            4      mpg      mean       Mean 26.664 #> ℹ 22 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/tidy_as_ard.html","id":null,"dir":"Reference","previous_headings":"","what":"Build ARD from Tidier — tidy_as_ard","title":"Build ARD from Tidier — tidy_as_ard","text":"Function questioning think better solution may ard_continuous() + ard_formals(). Function converts model's one-row tidy data frame ARD structure. tidied data frame must constructed eval_capture_conditions(). function primarily developers consistency checks included.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/tidy_as_ard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build ARD from Tidier — tidy_as_ard","text":"","code":"tidy_as_ard(   lst_tidy,   tidy_result_names,   fun_args_to_record = character(0L),   formals = list(),   passed_args = list(),   lst_ard_columns )"},{"path":"https://insightsengineering.github.io/cards/reference/tidy_as_ard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build ARD from Tidier — tidy_as_ard","text":"lst_tidy (named list) list tidied results constructed eval_capture_conditions(), e.g. eval_capture_conditions(t.test(mtcars$mpg ~ mtcars$) |> broom::tidy()). tidy_result_names (character) character vector column names expected tidier method. used construct blank results event error. fun_args_to_record (character) character vector function argument names added ARD. formals (pairlist) results formals(), e.g. formals(fisher.test). used get default argument values unspecified arguments. passed_args (named list) named list additional arguments passed modeling function. lst_ard_columns (named list) named list values added ARD data frame.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/tidy_as_ard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build ARD from Tidier — tidy_as_ard","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/tidy_as_ard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build ARD from Tidier — tidy_as_ard","text":"","code":"# example how one may create a fisher.test() ARD function my_ard_fishertest <- function(data, by, variable, ...) {   # perform fisher test and format results -----------------------------------   lst_tidy_fisher <-     eval_capture_conditions(       # this manipulation is similar to `fisher.test(...) |> broom::tidy()`       stats::fisher.test(x = data[[variable]], y = data[[by]], ...)[c(\"p.value\", \"method\")] |>         as.data.frame()     )    # build ARD ------------------------------------------------------------------   tidy_as_ard(     lst_tidy = lst_tidy_fisher,     tidy_result_names = c(\"p.value\", \"method\"),     fun_args_to_record =       c(         \"workspace\", \"hybrid\", \"hybridPars\", \"control\", \"or\",         \"conf.int\", \"conf.level\", \"simulate.p.value\", \"B\"       ),     formals = formals(stats::fisher.test),     passed_args = dots_list(...),     lst_ard_columns = list(group1 = by, variable = variable, context = \"fishertest\")   ) }  my_ard_fishertest(mtcars, by = \"am\", variable = \"vs\") #> {cards} data frame: 2 x 8 #>   group1 variable   context stat_name      stat fmt_fn #> 1     am       vs fisherte…   p.value     0.473      1 #> 2     am       vs fisherte…    method Fisher's…   NULL #> ℹ 2 more variables: warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/unlist_ard_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Unlist ARD Columns — unlist_ard_columns","title":"Unlist ARD Columns — unlist_ard_columns","text":"Unlist ARD Columns","code":""},{"path":"https://insightsengineering.github.io/cards/reference/unlist_ard_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unlist ARD Columns — unlist_ard_columns","text":"","code":"unlist_ard_columns(   x,   columns = c(where(is.list), -any_of(c(\"warning\", \"error\", \"fmt_fn\"))),   fill = NA,   fct_as_chr = TRUE )"},{"path":"https://insightsengineering.github.io/cards/reference/unlist_ard_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unlist ARD Columns — unlist_ard_columns","text":"x (data.frame) ARD data frame class 'card' data frame columns (tidy-select) columns unlist. Default c((.list), -any_of(c(\"warning\", \"error\", \"fmt_fn\"))). fill (scalar) scalar fill NULL values unlisting (present). Default NA. fct_as_chr (scalar logical) TRUE, factor elements converted character unlisting. column unlisted contains mixed types classes, factor elements often converted underlying integer value instead retaining label. Default TRUE.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/unlist_ard_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unlist ARD Columns — unlist_ard_columns","text":"data frame","code":""},{"path":"https://insightsengineering.github.io/cards/reference/unlist_ard_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unlist ARD Columns — unlist_ard_columns","text":"","code":"ADSL |>   ard_categorical(by = ARM, variables = AGEGR1) |>   apply_fmt_fn() |>   unlist_ard_columns() #> {cards} data frame: 27 x 12 #>    group1 group1_level variable variable_level stat_name stat_label  stat #> 1     ARM      Placebo   AGEGR1          65-80         n          n    42 #> 2     ARM      Placebo   AGEGR1          65-80         N          N    86 #> 3     ARM      Placebo   AGEGR1          65-80         p          % 0.488 #> 4     ARM      Placebo   AGEGR1            <65         n          n    14 #> 5     ARM      Placebo   AGEGR1            <65         N          N    86 #> 6     ARM      Placebo   AGEGR1            <65         p          % 0.163 #> 7     ARM      Placebo   AGEGR1            >80         n          n    30 #> 8     ARM      Placebo   AGEGR1            >80         N          N    86 #> 9     ARM      Placebo   AGEGR1            >80         p          % 0.349 #> 10    ARM    Xanomeli…   AGEGR1          65-80         n          n    55 #>    stat_fmt #> 1        42 #> 2        86 #> 3      48.8 #> 4        14 #> 5        86 #> 6      16.3 #> 7        30 #> 8        86 #> 9      34.9 #> 10       55 #> ℹ 17 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error  ADSL |>   ard_continuous(by = ARM, variables = AGE) |>   apply_fmt_fn() |>   unlist_ard_columns() #> {cards} data frame: 24 x 11 #>    group1 group1_level variable stat_name stat_label   stat stat_fmt #> 1     ARM      Placebo      AGE         N          N     86       86 #> 2     ARM      Placebo      AGE      mean       Mean 75.209     75.2 #> 3     ARM      Placebo      AGE        sd         SD   8.59      8.6 #> 4     ARM      Placebo      AGE    median     Median     76     76.0 #> 5     ARM      Placebo      AGE       p25         Q1     69     69.0 #> 6     ARM      Placebo      AGE       p75         Q3     82     82.0 #> 7     ARM      Placebo      AGE       min        Min     52     52.0 #> 8     ARM      Placebo      AGE       max        Max     89     89.0 #> 9     ARM    Xanomeli…      AGE         N          N     84       84 #> 10    ARM    Xanomeli…      AGE      mean       Mean 74.381     74.4 #> ℹ 14 more rows #> ℹ Use `print(n = ...)` to see more rows #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":"https://insightsengineering.github.io/cards/reference/update_ard.html","id":null,"dir":"Reference","previous_headings":"","what":"Update ARDs — update_ard","title":"Update ARDs — update_ard","text":"Functions used update ARD formatting functions statistic labels. helper function streamline update process. exactly meet needs, recall ARD just data frame can modified directly.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/update_ard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update ARDs — update_ard","text":"","code":"update_ard_fmt_fn(   x,   variables = everything(),   stat_names,   fmt_fn,   filter = TRUE )  update_ard_stat_label(   x,   variables = everything(),   stat_names,   stat_label,   filter = TRUE )"},{"path":"https://insightsengineering.github.io/cards/reference/update_ard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update ARDs — update_ard","text":"x (data.frame) ARD data frame class 'card' variables (tidy-select) variables x$variable apply update. Default everything(). stat_names (character) character vector statistic names (.e. values x$stat_name) apply update. fmt_fn (function) function alias recognized alias_as_fmt_fn(). filter (expression) expression evaluates logical vector identifying rows x apply update . Default TRUE, update applied rows. stat_label (function) string updated statistic label.","code":""},{"path":"https://insightsengineering.github.io/cards/reference/update_ard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update ARDs — update_ard","text":"ARD data frame class 'card'","code":""},{"path":"https://insightsengineering.github.io/cards/reference/update_ard.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update ARDs — update_ard","text":"","code":"ard_continuous(ADSL, variables = AGE) |>   update_ard_fmt_fn(stat_names = c(\"mean\", \"sd\"), fmt_fn = 8L) |>   update_ard_stat_label(stat_names = c(\"mean\", \"sd\"), stat_label = \"Mean (SD)\") |>   apply_fmt_fn() #> {cards} data frame: 8 x 9 #>   variable   context stat_name stat_label   stat    stat_fmt #> 1      AGE continuo…         N          N    254         254 #> 2      AGE continuo…      mean  Mean (SD) 75.087 75.08661417 #> 3      AGE continuo…        sd  Mean (SD)  8.246  8.24623390 #> 4      AGE continuo…    median     Median     77        77.0 #> 5      AGE continuo…       p25         Q1     70        70.0 #> 6      AGE continuo…       p75         Q3     81        81.0 #> 7      AGE continuo…       min        Min     51        51.0 #> 8      AGE continuo…       max        Max     89        89.0 #> ℹ 3 more variables: fmt_fn, warning, error  # same as above, but only apply update to the Placebo level ard_continuous(   ADSL,   by = ARM,   variables = AGE,   statistic = ~ continuous_summary_fns(c(\"N\", \"mean\")) ) |>   update_ard_fmt_fn(stat_names = \"mean\", fmt_fn = 8L, filter = group1_level == \"Placebo\") |>   apply_fmt_fn() #> {cards} data frame: 6 x 11 #>   group1 group1_level variable stat_name stat_label   stat    stat_fmt #> 1    ARM      Placebo      AGE         N          N     86          86 #> 2    ARM      Placebo      AGE      mean       Mean 75.209 75.20930233 #> 3    ARM    Xanomeli…      AGE         N          N     84          84 #> 4    ARM    Xanomeli…      AGE      mean       Mean 74.381        74.4 #> 5    ARM    Xanomeli…      AGE         N          N     84          84 #> 6    ARM    Xanomeli…      AGE      mean       Mean 75.667        75.7 #> ℹ 4 more variables: context, fmt_fn, warning, error"},{"path":[]},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"new-features-and-functions-0-6-0","dir":"Changelog","previous_headings":"","what":"New Features and Functions","title":"cards 0.6.0","text":"Added functions sort_ard_hierarchical() filter_ard_hierarchical() sort & filter ARDs created using ard_stack_hierarchical() ard_stack_hierarchical_count(). (#301) Updated ard_stack_hierarchical() ard_stack_hierarchical_count() automatically sort results alphanumerically. (#423) Added new function unlist_ard_columns(). (#391) Updated function rename_ard_columns(). (#380) function longer coerces values character. fill argument added specify value fill new column levels associated variables (e.g. continuous summaries). unlist argument deprecated favor using new unlist_ard_columns() function. function longer accepts generic data frames: inputs must data frame class card. Added function ard_formals() assist adding function’s formals, , arguments default values, along user-passed arguments ARD structure.","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"bug-fixes-0-6-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"cards 0.6.0","text":"Fixed sorting order logical variables nest_for_ard(). (#411)","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"lifecycle-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Lifecycle Changes","title":"cards 0.6.0","text":"shuffle_ard() function longer outputs 'label' column, instead retains original 'variable' level cards object. also longer trims rows non-numeric stats values. (#416)","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"cards-051","dir":"Changelog","previous_headings":"","what":"cards 0.5.1","title":"cards 0.5.1","text":"CRAN release: 2025-03-01 Small update account change R-devel.","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"cards-050","dir":"Changelog","previous_headings":"","what":"cards 0.5.0","title":"cards 0.5.0","text":"CRAN release: 2025-02-17","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"new-features-and-functions-0-5-0","dir":"Changelog","previous_headings":"","what":"New Features and Functions","title":"cards 0.5.0","text":"Added functions rename_ard_groups_shift() rename_ard_groups_reverse() renaming grouping variables ARD. (#344) Added option specify default rounding package: cards.round_type. See ?cards.options details. (#384) Added print_ard_conditions(condition_type) argument, allows users select return conditions messages (default), warnings returned warnings errors errors. (#386) Added all_ard_group_n(types) argument allow separate selection groupX groupX_level columns. Added tidy_ard_column_order(group_order) argument allows users specify whether grouping variables listed ascending order (default) descending order. output ard_strata() now calls tidy_ard_column_order(group_order=\"descending\").","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"other-updates-0-5-0","dir":"Changelog","previous_headings":"","what":"Other Updates","title":"cards 0.5.0","text":"new article added detailing create new ARD functions. Results now sorted consistent manner, descending groups strata. (#342, #326)","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"lifecycle-updates-0-5-0","dir":"Changelog","previous_headings":"","what":"Lifecycle Updates","title":"cards 0.5.0","text":"Function label_cards() renamed label_round(), clearly communicates returns rounding function.","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"cards-040","dir":"Changelog","previous_headings":"","what":"cards 0.4.0","title":"cards 0.4.0","text":"CRAN release: 2024-11-27","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"new-features-and-functions-0-4-0","dir":"Changelog","previous_headings":"","what":"New Features and Functions","title":"cards 0.4.0","text":"Added functions as_cards_fn(), is_cards_fn(), get_cards_fn_stat_names(). functions assist creating functions attributes enumerating expected results. Updated ard_continuous() ard_complex() return full ARDs functions passed created as_cards_fn(): instead single row output, get long ARD rows expected statistic names. (#316) Added function ard_pairwise() ease calculations pairwise analyses. (#359)","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"other-updates-0-4-0","dir":"Changelog","previous_headings":"","what":"Other Updates","title":"cards 0.4.0","text":"Improved messaging print_ard_conditions() calling function namespaced. (#348) Updated print method 'card' objects extraneous columns never printed default.","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"lifecycle-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Lifecycle Changes","title":"cards 0.4.0","text":"longer exporting functions check_pkg_installed(), is_pkg_installed(), get_min_version_required(), get_pkg_dependencies(). functions now internal-. (#330)","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"cards 0.4.0","text":"tidy_ard_column_order() now correctly orders grouping columns 10+ groups. also corrects issue hierarchical functions ordering variables matters. (#352)","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"cards-030","dir":"Changelog","previous_headings":"","what":"cards 0.3.0","title":"cards 0.3.0","text":"CRAN release: 2024-10-03","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"new-features--updates-0-3-0","dir":"Changelog","previous_headings":"","what":"New Features & Updates","title":"cards 0.3.0","text":"Added functions ard_stack_hierarchical() ard_stack_hierarchical_count() ease creation ARDs multiple nested hierarchical structures. (#314) Added functions update_ard_fmt_fn() update_ard_stat_label() update ARD’s formatting function statistic label, respectively. (#253) Added rename_ard_columns(unlist) argument, unlists specified columns ARD data frame. (#313) Added ard_strata() function ease task calculating ARDs stratified one categorical variables. (#273) Added functions mock_continuous(), mock_categorical(), mock_dichotomous(), mock_missing(), mock_attributes() build ARDs absence data frame. applicable, formatting functions set return 'xx' 'xx.x' aid construction mock tables table shells. (#256) Added functions printing results eval_capture_conditions(). Captured conditions can printed either errors messages captured_condition_as_error() captured_condition_as_message(), respectively. (#282)","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"other-updates-0-3-0","dir":"Changelog","previous_headings":"","what":"Other Updates","title":"cards 0.3.0","text":"ard_hierarchical_count() function updated match behavior ard_hierarchical() results now returned last column listed variables arguments, rather recursively counting variables. Add columns 'fmt_fn', 'warning', 'errors' ard_attributes() output. (#327) Add checks factors levels, levels NA ard_* functions (#255) rows NA NaN values .columns specified ard_stack() now removed calculations. (#320)","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"cards-022","dir":"Changelog","previous_headings":"","what":"cards 0.2.2","title":"cards 0.2.2","text":"CRAN release: 2024-09-02","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"new-features--updates-0-2-2","dir":"Changelog","previous_headings":"","what":"New Features & Updates","title":"cards 0.2.2","text":"Converted ard_total_n() S3 generic added method ard_total_n.data.frame(). Added bind_ard(.quiet) argument suppress messaging. (#299) Improved ability shuffle_ard() populate missing group values possible. (#306) Added apply_fmt_fn(replace) argument. Use replace=FALSE retain previously formatted statistics stat_fmt column. (#285) Added bind_ard(.distinct) argument, can remove non-distinct rows ARD across grouping variables, primary variables, context, statistic name value. (#286)","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"bug-fixes-0-2-2","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"cards 0.2.2","text":"Fix print_ard_conditions() variables factors, render properly cli::cli_format(). Bug fix print_ard_conditions() can now print condition messages contain curly brace pairs. (#309)","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"cards-021","dir":"Changelog","previous_headings":"","what":"cards 0.2.1","title":"cards 0.2.1","text":"CRAN release: 2024-08-17 Update ard_categorical() use base::order() instead dplyr::arrange(), ordering variables match results base::table() edge cases sorted order inconsistent. Update ard_categorical() run base::table() output checks coerced character columns. Previously, relied R perform checks type decided check (e.g. coerces common type). initial strategy worked cases Base R classes, bespoke classes, times {hms}, Base R coerce expected. Adding selectors all_group_n() all_missing_columns(). (#272, #274) Added new function add_calculated_row() adding new row calculated statistic(s) function statistics ARD. (#275)","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"cards-020","dir":"Changelog","previous_headings":"","what":"cards 0.2.0","title":"cards 0.2.0","text":"CRAN release: 2024-07-20","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"new-features--updates-0-2-0","dir":"Changelog","previous_headings":"","what":"New Features & Updates","title":"cards 0.2.0","text":"Converting ard_*() functions helpers S3 generics make extendable. (#227) Added helper rename_ard_columns() renaming/coalescing group/variable columns. (#213). Added new function ard_total_n() calculating total N data frame. (#236) Added nest_for_ard(include_data) argument either include exclude subsetted data frames list-column returned tibble. Added check_ard_structure(column_order, method) arguments function check column ordering whether result contains stat_name='method' row. Added optional ard_hierarchical(id) argument. provided check duplicates across column(s) supplied . duplicates found, user warned percentages denominators correct. (#214) Improved messaging check_pkg_installed() incorporates calling function name case error. (#205) Updated is_pkg_installed() check_pkg_installed() allow checks package time. get_min_version_required() function also updated return tibble instead list attributes. (#201) Styling {cli} package now removed errors warnings captured eval_capture_conditions(). Styling removed cli::ansi_strip(). (#129)","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"cards 0.2.0","text":"Bug fix ard_stack() calls functions namespaced. (#242) print_ard_conditions() function updated longer error ARD object \"error\" \"warning\" columns. (#240) Bug fix shuffle_ard() factors coerced integers instead labels. (#232)","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"lifecycle-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Lifecycle Changes","title":"cards 0.2.0","text":"Corrected order ard_categorical (strata) columns appear ARD results. Previously, appeared order appeared original data, now sorted properly. (#221) API ard_continuous(statistic) ard_missing(statistic) arguments updated. Previously, RHS argument’s passed lists either continuous_summary_fns() missing_summary_fns(). Now arguments accept simple character vectors statistic names. example, ard_categorical(statistic = everything() ~ c(\"n\", \"p\", \"N\")) ard_missing(statistic = everything() ~ c(\"N_obs\", \"N_miss\", \"N_nonmiss\", \"p_miss\", \"p_nonmiss\")). (#223) Updated ard_stack() return n, p, N variable specified. Previously, returned N levels variable. (#219) Bug fix ard_stack() argument passed ard_missing() ard_stack(.missing=TRUE). (#244) ard_stack() argument renamed \".\" location moved dots inputs, e.g. ard_stack(..., .). (#243) messaging overhaul utilize scripts https://github.com/ddsjoberg/standalone/blob/main/R/standalone-cli_call_env.R. allows clear error messaging across functions packages. (#42) print_ard_conditions(call), check_list_elements(env), cards_select(.call) arguments removed.","code":""},{"path":"https://insightsengineering.github.io/cards/news/index.html","id":"cards-010","dir":"Changelog","previous_headings":"","what":"cards 0.1.0","title":"cards 0.1.0","text":"CRAN release: 2024-02-26 Initial release.","code":""}]
