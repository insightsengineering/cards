
R version 4.3.3 (2024-02-29) -- "Angel Food Cake"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "cardx"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('cardx')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ard_aod_wald_test")
> ### * ard_aod_wald_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_aod_wald_test
> ### Title: ARD Wald Test
> ### Aliases: ard_aod_wald_test
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "aod", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ lm(AGE ~ ARM, data = cards::ADSL) |>
+   ard_aod_wald_test()
+ ## Don't show: 
+ }) # examplesIf
> ard_aod_wald_test(lm(AGE ~ ARM, data = cards::ADSL))
{cards} data frame: 6 x 8
     variable   context stat_name stat_label     stat fmt_fn
1 (Intercept) aod_wald…        df  Degrees …        1      1
2 (Intercept) aod_wald… statistic  Statistic 7126.713      1
3 (Intercept) aod_wald…   p.value    p-value        0      1
4         ARM aod_wald…        df  Degrees …        2      1
5         ARM aod_wald… statistic  Statistic    1.046      1
6         ARM aod_wald…   p.value    p-value    0.593      1
ℹ 2 more variables: warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_attributes")
> ### * ard_attributes
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_attributes.survey.design
> ### Title: ARD Attributes
> ### Aliases: ard_attributes.survey.design
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "survey", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ data(api, package = "survey")
+ dclus1 <- survey::svydesign(id = ~dnum, weights = ~pw, data = apiclus1, fpc = ~fpc)
+ 
+ ard_attributes(
+   data = dclus1,
+   variables = c(sname, dname),
+   label = list(sname = "School Name", dname = "District Name")
+ )
+ ## Don't show: 
+ }) # examplesIf
> data(api, package = "survey")
> dclus1 <- survey::svydesign(id = ~dnum, weights = ~pw, data = apiclus1, 
+     fpc = ~fpc)
> ard_attributes(data = dclus1, variables = c(sname, dname), label = list(sname = "School Name", 
+     dname = "District Name"))
{cards} data frame: 4 x 5
  variable   context stat_name stat_label      stat
1    sname attribut…     label  Variable… School N…
2    sname attribut…     class  Variable… character
3    dname attribut…     label  Variable… District…
4    dname attribut…     class  Variable… character
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_car_anova")
> ### * ard_car_anova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_car_anova
> ### Title: ARD ANOVA from car Package
> ### Aliases: ard_car_anova
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("broom.helpers", "car", "parameters"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ lm(AGE ~ ARM, data = cards::ADSL) |>
+   ard_car_anova()
+ 
+ glm(vs ~ factor(cyl) + factor(am), data = mtcars, family = binomial) |>
+   ard_car_anova(test.statistic = "Wald")
+ ## Don't show: 
+ }) # examplesIf
> ard_car_anova(lm(AGE ~ ARM, data = cards::ADSL))
{cards} data frame: 5 x 8
  variable   context stat_name stat_label   stat fmt_fn
1      ARM car_anova     sumsq      sumsq 71.386      1
2      ARM car_anova        df  Degrees …      2      1
3      ARM car_anova    meansq     meansq 35.693      1
4      ARM car_anova statistic  Statistic  0.523      1
5      ARM car_anova   p.value    p-value  0.593      1
ℹ 2 more variables: warning, error
> ard_car_anova(glm(vs ~ factor(cyl) + factor(am), data = mtcars, family = binomial), 
+     test.statistic = "Wald")
{cards} data frame: 6 x 8
     variable   context stat_name stat_label  stat   warning
1 factor(cyl) car_anova statistic  Statistic     0 glm.fit:…
2 factor(cyl) car_anova        df  Degrees …     2 glm.fit:…
3 factor(cyl) car_anova   p.value    p-value     1 glm.fit:…
4  factor(am) car_anova statistic  Statistic     0 glm.fit:…
5  factor(am) car_anova        df  Degrees …     1 glm.fit:…
6  factor(am) car_anova   p.value    p-value 0.998 glm.fit:…
ℹ 2 more variables: fmt_fn, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_car_vif")
> ### * ard_car_vif
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_car_vif
> ### Title: Regression VIF ARD
> ### Aliases: ard_car_vif
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "car", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ lm(AGE ~ ARM + SEX, data = cards::ADSL) |>
+   ard_car_vif()
+ ## Don't show: 
+ }) # examplesIf
> ard_car_vif(lm(AGE ~ ARM + SEX, data = cards::ADSL))
{cards} data frame: 6 x 8
  variable context stat_name stat_label  stat fmt_fn
1      ARM car_vif      GVIF       GVIF 1.016      1
2      ARM car_vif        df         df     2      1
3      ARM car_vif     aGVIF  Adjusted… 1.004      1
4      SEX car_vif      GVIF       GVIF 1.016      1
5      SEX car_vif        df         df     1      1
6      SEX car_vif     aGVIF  Adjusted… 1.008      1
ℹ 2 more variables: warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_categorical.survey.design")
> ### * ard_categorical.survey.design
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_categorical.survey.design
> ### Title: ARD Categorical Survey Statistics
> ### Aliases: ard_categorical.survey.design
> 
> ### ** Examples
> 
> ## Don't show: 
> if (cardx:::is_pkg_installed("survey", reference_pkg = "cardx")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ svy_titanic <- survey::svydesign(~1, data = as.data.frame(Titanic), weights = ~Freq)
+ 
+ ard_categorical(svy_titanic, variables = c(Class, Age), by = Survived)
+ ## Don't show: 
+ }) # examplesIf
> svy_titanic <- survey::svydesign(~1, data = as.data.frame(Titanic), weights = ~Freq)
> ard_categorical(svy_titanic, variables = c(Class, Age), by = Survived)
{cards} data frame: 96 x 11
     group1 group1_level variable variable_level   stat_name stat_label  stat
1  Survived           No    Class            1st           n          n   122
2  Survived           No    Class            1st           N          N  1490
3  Survived           No    Class            1st           p          % 0.082
4  Survived           No    Class            1st p.std.error      SE(%) 0.086
5  Survived           No    Class            1st        deff  Design E… 0.896
6  Survived           No    Class            2nd           n          n   167
7  Survived           No    Class            2nd           N          N  1490
8  Survived           No    Class            2nd           p          % 0.112
9  Survived           No    Class            2nd p.std.error      SE(%) 0.111
10 Survived           No    Class            2nd        deff  Design E… 1.128
ℹ 86 more rows
ℹ Use `print(n = ...)` to see more rows
ℹ 4 more variables: context, fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_categorical_ci")
> ### * ard_categorical_ci
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_categorical_ci
> ### Title: ARD Proportion Confidence Intervals
> ### Aliases: ard_categorical_ci ard_categorical_ci.data.frame
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # compute CI for binary variables
+ ard_categorical_ci(mtcars, variables = c(vs, am), method = "wilson")
+ 
+ # compute CIs for each level of a categorical variable
+ ard_categorical_ci(mtcars, variables = cyl, method = "jeffreys")
+ ## Don't show: 
+ }) # examplesIf
> ard_categorical_ci(mtcars, variables = c(vs, am), method = "wilson")
{cards} data frame: 20 x 9
   variable variable_level   context   stat_name stat_label      stat
1        vs              1 proporti…           N          N        32
2        vs              1 proporti…  conf.level  conf.lev…      0.95
3        vs              1 proporti…    estimate   estimate     0.438
4        vs              1 proporti…   statistic  statistic       0.5
5        vs              1 proporti…     p.value    p.value      0.48
6        vs              1 proporti…   parameter  parameter         1
7        vs              1 proporti…    conf.low   conf.low     0.282
8        vs              1 proporti…   conf.high  conf.high     0.607
9        vs              1 proporti…      method     method Wilson C…
10       vs              1 proporti… alternative  alternat… two.sided
11       am              1 proporti…           N          N        32
12       am              1 proporti…  conf.level  conf.lev…      0.95
13       am              1 proporti…    estimate   estimate     0.406
14       am              1 proporti…   statistic  statistic     1.125
15       am              1 proporti…     p.value    p.value     0.289
16       am              1 proporti…   parameter  parameter         1
17       am              1 proporti…    conf.low   conf.low     0.255
18       am              1 proporti…   conf.high  conf.high     0.577
19       am              1 proporti…      method     method Wilson C…
20       am              1 proporti… alternative  alternat… two.sided
ℹ 3 more variables: fmt_fn, warning, error
> ard_categorical_ci(mtcars, variables = cyl, method = "jeffreys")
{cards} data frame: 18 x 9
   variable variable_level   context  stat_name stat_label      stat
1       cyl              4 proporti…          N          N        32
2       cyl              4 proporti…   estimate   estimate     0.344
3       cyl              4 proporti…   conf.low   conf.low     0.198
4       cyl              4 proporti…  conf.high  conf.high     0.516
5       cyl              4 proporti… conf.level  conf.lev…      0.95
6       cyl              4 proporti…     method     method Jeffreys…
7       cyl              6 proporti…          N          N        32
8       cyl              6 proporti…   estimate   estimate     0.219
9       cyl              6 proporti…   conf.low   conf.low     0.104
10      cyl              6 proporti…  conf.high  conf.high     0.382
11      cyl              6 proporti… conf.level  conf.lev…      0.95
12      cyl              6 proporti…     method     method Jeffreys…
13      cyl              8 proporti…          N          N        32
14      cyl              8 proporti…   estimate   estimate     0.438
15      cyl              8 proporti…   conf.low   conf.low     0.277
16      cyl              8 proporti…  conf.high  conf.high     0.609
17      cyl              8 proporti… conf.level  conf.lev…      0.95
18      cyl              8 proporti…     method     method Jeffreys…
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_categorical_ci.survey.design")
> ### * ard_categorical_ci.survey.design
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_categorical_ci.survey.design
> ### Title: ARD survey categorical CIs
> ### Aliases: ard_categorical_ci.survey.design
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "survey", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ data(api, package = "survey")
+ dclus1 <- survey::svydesign(id = ~dnum, weights = ~pw, data = apiclus1, fpc = ~fpc)
+ 
+ ard_categorical_ci(dclus1, variables = sch.wide)
+ ard_categorical_ci(dclus1, variables = sch.wide, value = sch.wide ~ "Yes", method = "xlogit")
+ ## Don't show: 
+ }) # examplesIf
> data(api, package = "survey")
> dclus1 <- survey::svydesign(id = ~dnum, weights = ~pw, data = apiclus1, 
+     fpc = ~fpc)
> ard_categorical_ci(dclus1, variables = sch.wide)
{cards} data frame: 10 x 9
   variable variable_level   context  stat_name stat_label  stat
1  sch.wide             No categori…   estimate   estimate 0.126
2  sch.wide             No categori…   conf.low   conf.low 0.088
3  sch.wide             No categori…  conf.high  conf.high 0.176
4  sch.wide             No categori…     method     method logit
5  sch.wide             No categori… conf.level  conf.lev…  0.95
6  sch.wide            Yes categori…   estimate   estimate 0.874
7  sch.wide            Yes categori…   conf.low   conf.low 0.824
8  sch.wide            Yes categori…  conf.high  conf.high 0.912
9  sch.wide            Yes categori…     method     method logit
10 sch.wide            Yes categori… conf.level  conf.lev…  0.95
ℹ 3 more variables: fmt_fn, warning, error
> ard_categorical_ci(dclus1, variables = sch.wide, value = sch.wide ~ "Yes", 
+     method = "xlogit")
{cards} data frame: 5 x 9
  variable variable_level   context  stat_name stat_label   stat
1 sch.wide            Yes categori…   estimate   estimate  0.874
2 sch.wide            Yes categori…   conf.low   conf.low  0.824
3 sch.wide            Yes categori…  conf.high  conf.high  0.912
4 sch.wide            Yes categori…     method     method xlogit
5 sch.wide            Yes categori… conf.level  conf.lev…   0.95
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_continuous.survey.design")
> ### * ard_continuous.survey.design
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_continuous.survey.design
> ### Title: ARD Continuous Survey Statistics
> ### Aliases: ard_continuous.survey.design
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "survey", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ data(api, package = "survey")
+ dclus1 <- survey::svydesign(id = ~dnum, weights = ~pw, data = apiclus1, fpc = ~fpc)
+ 
+ ard_continuous(
+   data = dclus1,
+   variables = api00,
+   by = stype
+ )
+ ## Don't show: 
+ }) # examplesIf
> data(api, package = "survey")
> dclus1 <- survey::svydesign(id = ~dnum, weights = ~pw, data = apiclus1, 
+     fpc = ~fpc)
> ard_continuous(data = dclus1, variables = api00, by = stype)
{cards} data frame: 9 x 10
  group1 group1_level variable stat_name stat_label stat
1  stype            E    api00    median     Median  652
2  stype            H    api00    median     Median  608
3  stype            M    api00    median     Median  642
4  stype            E    api00       p25  25% Perc…  553
5  stype            H    api00       p25  25% Perc…  529
6  stype            M    api00       p25  25% Perc…  547
7  stype            E    api00       p75  75% Perc…  729
8  stype            H    api00       p75  75% Perc…  703
9  stype            M    api00       p75  75% Perc…  699
ℹ 4 more variables: context, fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_continuous_ci")
> ### * ard_continuous_ci
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_continuous_ci
> ### Title: ARD continuous CIs
> ### Aliases: ard_continuous_ci ard_continuous_ci.data.frame
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ard_continuous_ci(mtcars, variables = c(mpg, hp), method = "wilcox.test")
+ ard_continuous_ci(mtcars, variables = mpg, by = am, method = "t.test")
+ ## Don't show: 
+ }) # examplesIf
> ard_continuous_ci(mtcars, variables = c(mpg, hp), method = "wilcox.test")
{cards} data frame: 24 x 8
   variable   context   stat_name stat_label      stat   warning
1       mpg continuo…    estimate       Mean      19.6 cannot c…
2       mpg continuo…   statistic  t Statis…       528 cannot c…
3       mpg continuo…     p.value    p-value         0 cannot c…
4       mpg continuo…    conf.low  CI Lower…      17.5 cannot c…
5       mpg continuo…   conf.high  CI Upper…      22.1 cannot c…
6       mpg continuo…      method     method Wilcoxon… cannot c…
7       mpg continuo… alternative  alternat… two.sided cannot c…
8       mpg continuo…          mu    H0 Mean         0          
9       mpg continuo…    conf.int   conf.int      TRUE          
10      mpg continuo…    tol.root   tol.root         0          
ℹ 14 more rows
ℹ Use `print(n = ...)` to see more rows
ℹ 2 more variables: fmt_fn, error
> ard_continuous_ci(mtcars, variables = mpg, by = am, method = "t.test")
{cards} data frame: 20 x 10
   group1 group1_level variable   stat_name stat_label      stat
1      am            0      mpg    estimate       Mean    17.147
2      am            0      mpg   statistic  t Statis…    19.495
3      am            0      mpg     p.value    p-value         0
4      am            0      mpg   parameter  Degrees …        18
5      am            0      mpg    conf.low  CI Lower…    15.299
6      am            0      mpg   conf.high  CI Upper…    18.995
7      am            0      mpg      method     method One Samp…
8      am            0      mpg alternative  alternat… two.sided
9      am            0      mpg          mu    H0 Mean         0
10     am            0      mpg  conf.level  CI Confi…      0.95
11     am            1      mpg    estimate       Mean    24.392
12     am            1      mpg   statistic  t Statis…    14.262
13     am            1      mpg     p.value    p-value         0
14     am            1      mpg   parameter  Degrees …        12
15     am            1      mpg    conf.low  CI Lower…    20.666
16     am            1      mpg   conf.high  CI Upper…    28.119
17     am            1      mpg      method     method One Samp…
18     am            1      mpg alternative  alternat… two.sided
19     am            1      mpg          mu    H0 Mean         0
20     am            1      mpg  conf.level  CI Confi…      0.95
ℹ 4 more variables: context, fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_continuous_ci.survey.design")
> ### * ard_continuous_ci.survey.design
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_continuous_ci.survey.design
> ### Title: ARD survey continuous CIs
> ### Aliases: ard_continuous_ci.survey.design
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "survey", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ data(api, package = "survey")
+ dclus1 <- survey::svydesign(id = ~dnum, weights = ~pw, data = apiclus1, fpc = ~fpc)
+ 
+ ard_continuous_ci(dclus1, variables = api00)
+ ard_continuous_ci(dclus1, variables = api00, method = "svymedian.xlogit")
+ ## Don't show: 
+ }) # examplesIf
> data(api, package = "survey")
> dclus1 <- survey::svydesign(id = ~dnum, weights = ~pw, data = apiclus1, 
+     fpc = ~fpc)
> ard_continuous_ci(dclus1, variables = api00)
{cards} data frame: 5 x 8
  variable   context  stat_name stat_label    stat fmt_fn
1    api00 survey_c…   estimate   estimate 644.169      2
2    api00 survey_c…  std.error  std.error  23.542      2
3    api00 survey_c…   conf.low   conf.low 593.676      2
4    api00 survey_c…  conf.high  conf.high 694.662      2
5    api00 survey_c… conf.level  conf.lev…    0.95      2
ℹ 2 more variables: warning, error
> ard_continuous_ci(dclus1, variables = api00, method = "svymedian.xlogit")
{cards} data frame: 5 x 8
  variable   context  stat_name stat_label   stat fmt_fn
1    api00 survey_c…   estimate   estimate    652      2
2    api00 survey_c…  std.error  std.error 34.969      2
3    api00 survey_c…   conf.low   conf.low    564      2
4    api00 survey_c…  conf.high  conf.high    714      2
5    api00 survey_c… conf.level  conf.lev…   0.95      2
ℹ 2 more variables: warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_dichotomous.survey.design")
> ### * ard_dichotomous.survey.design
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_dichotomous.survey.design
> ### Title: ARD Dichotomous Survey Statistics
> ### Aliases: ard_dichotomous.survey.design
> 
> ### ** Examples
> 
> ## Don't show: 
> if (cardx:::is_pkg_installed("survey", reference_pkg = "cardx")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ survey::svydesign(ids = ~1, data = mtcars, weights = ~1) |>
+   ard_dichotomous(by = vs, variables = c(cyl, am), value = list(cyl = 4))
+ ## Don't show: 
+ }) # examplesIf
> ard_dichotomous(survey::svydesign(ids = ~1, data = mtcars, weights = ~1), 
+     by = vs, variables = c(cyl, am), value = list(cyl = 4))
{cards} data frame: 32 x 11
   group1 group1_level variable variable_level    stat_name stat_label  stat
1      vs            0      cyl              4            n          n     1
2      vs            0      cyl              4            N          N    18
3      vs            0      cyl              4            p          % 0.056
4      vs            0      cyl              4  p.std.error      SE(%) 0.055
5      vs            0      cyl              4         deff  Design E…   Inf
6      vs            0      cyl              4 n_unweighted  Unweight…     1
7      vs            0      cyl              4 N_unweighted  Unweight…    18
8      vs            0      cyl              4 p_unweighted  Unweight… 0.056
9      vs            1      cyl              4            n          n    10
10     vs            1      cyl              4            N          N    14
ℹ 22 more rows
ℹ Use `print(n = ...)` to see more rows
ℹ 4 more variables: context, fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_effectsize_cohens_d")
> ### * ard_effectsize_cohens_d
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_effectsize_cohens_d
> ### Title: ARD Cohen's D Test
> ### Aliases: ard_effectsize_cohens_d ard_effectsize_paired_cohens_d
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("effectsize", "parameters"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cards::ADSL |>
+   dplyr::filter(ARM %in% c("Placebo", "Xanomeline High Dose")) |>
+   ard_effectsize_cohens_d(by = ARM, variables = AGE)
+ 
+ # constructing a paired data set,
+ # where patients receive both treatments
+ cards::ADSL[c("ARM", "AGE")] |>
+   dplyr::filter(ARM %in% c("Placebo", "Xanomeline High Dose")) |>
+   dplyr::mutate(.by = ARM, USUBJID = dplyr::row_number()) |>
+   dplyr::arrange(USUBJID, ARM) |>
+   dplyr::group_by(USUBJID) |>
+   dplyr::filter(dplyr::n() > 1) |>
+   ard_effectsize_paired_cohens_d(by = ARM, variables = AGE, id = USUBJID)
+ ## Don't show: 
+ }) # examplesIf
> ard_effectsize_cohens_d(dplyr::filter(cards::ADSL, ARM %in% c("Placebo", 
+     "Xanomeline High Dose")), by = ARM, variables = AGE)
{cards} data frame: 9 x 9
  group1 variable   context   stat_name stat_label      stat
1    ARM      AGE effectsi…    estimate  Effect S…       0.1
2    ARM      AGE effectsi…  conf.level  CI Confi…      0.95
3    ARM      AGE effectsi…    conf.low  CI Lower…    -0.201
4    ARM      AGE effectsi…   conf.high  CI Upper…     0.401
5    ARM      AGE effectsi…      method     method Cohen's D
6    ARM      AGE effectsi…          mu    H0 Mean         0
7    ARM      AGE effectsi…      paired  Paired t…     FALSE
8    ARM      AGE effectsi…   pooled_sd  Pooled S…      TRUE
9    ARM      AGE effectsi… alternative  Alternat… two.sided
ℹ 3 more variables: fmt_fn, warning, error
> ard_effectsize_paired_cohens_d(dplyr::filter(dplyr::group_by(dplyr::arrange(dplyr::mutate(dplyr::filter(cards::ADSL[c("ARM", 
+     "AGE")], ARM %in% c("Placebo", "Xanomeline High Dose")), .by = ARM, USUBJID = dplyr::row_number()), 
+     USUBJID, ARM), USUBJID), dplyr::n() > 1), by = ARM, variables = AGE, id = USUBJID)
{cards} data frame: 9 x 9
  group1 variable   context   stat_name stat_label      stat
1    ARM      AGE effectsi…    estimate  Effect S…     0.069
2    ARM      AGE effectsi…  conf.level  CI Confi…      0.95
3    ARM      AGE effectsi…    conf.low  CI Lower…    -0.146
4    ARM      AGE effectsi…   conf.high  CI Upper…     0.282
5    ARM      AGE effectsi…      method     method Paired C…
6    ARM      AGE effectsi…          mu    H0 Mean         0
7    ARM      AGE effectsi…      paired  Paired t…      TRUE
8    ARM      AGE effectsi…   pooled_sd  Pooled S…      TRUE
9    ARM      AGE effectsi… alternative  Alternat… two.sided
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_effectsize_hedges_g")
> ### * ard_effectsize_hedges_g
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_effectsize_hedges_g
> ### Title: ARD Hedge's G Test
> ### Aliases: ard_effectsize_hedges_g ard_effectsize_paired_hedges_g
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("effectsize", "parameters"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cards::ADSL |>
+   dplyr::filter(ARM %in% c("Placebo", "Xanomeline High Dose")) |>
+   ard_effectsize_hedges_g(by = ARM, variables = AGE)
+ 
+ # constructing a paired data set,
+ # where patients receive both treatments
+ cards::ADSL[c("ARM", "AGE")] |>
+   dplyr::filter(ARM %in% c("Placebo", "Xanomeline High Dose")) |>
+   dplyr::mutate(.by = ARM, USUBJID = dplyr::row_number()) |>
+   dplyr::arrange(USUBJID, ARM) |>
+   dplyr::group_by(USUBJID) |>
+   dplyr::filter(dplyr::n() > 1) |>
+   ard_effectsize_paired_hedges_g(by = ARM, variables = AGE, id = USUBJID)
+ ## Don't show: 
+ }) # examplesIf
> ard_effectsize_hedges_g(dplyr::filter(cards::ADSL, ARM %in% c("Placebo", 
+     "Xanomeline High Dose")), by = ARM, variables = AGE)
{cards} data frame: 9 x 9
  group1 variable   context   stat_name stat_label      stat
1    ARM      AGE effectsi…    estimate  Effect S…       0.1
2    ARM      AGE effectsi…  conf.level  CI Confi…      0.95
3    ARM      AGE effectsi…    conf.low  CI Lower…      -0.2
4    ARM      AGE effectsi…   conf.high  CI Upper…     0.399
5    ARM      AGE effectsi…      method     method Hedge's G
6    ARM      AGE effectsi…          mu    H0 Mean         0
7    ARM      AGE effectsi…      paired  Paired t…     FALSE
8    ARM      AGE effectsi…   pooled_sd  Pooled S…      TRUE
9    ARM      AGE effectsi… alternative  Alternat… two.sided
ℹ 3 more variables: fmt_fn, warning, error
> ard_effectsize_paired_hedges_g(dplyr::filter(dplyr::group_by(dplyr::arrange(dplyr::mutate(dplyr::filter(cards::ADSL[c("ARM", 
+     "AGE")], ARM %in% c("Placebo", "Xanomeline High Dose")), .by = ARM, USUBJID = dplyr::row_number()), 
+     USUBJID, ARM), USUBJID), dplyr::n() > 1), by = ARM, variables = AGE, id = USUBJID)
{cards} data frame: 9 x 9
  group1 variable   context   stat_name stat_label      stat
1    ARM      AGE effectsi…    estimate  Effect S…     0.068
2    ARM      AGE effectsi…  conf.level  CI Confi…      0.95
3    ARM      AGE effectsi…    conf.low  CI Lower…    -0.144
4    ARM      AGE effectsi…   conf.high  CI Upper…      0.28
5    ARM      AGE effectsi…      method     method Paired H…
6    ARM      AGE effectsi…          mu    H0 Mean         0
7    ARM      AGE effectsi…      paired  Paired t…      TRUE
8    ARM      AGE effectsi…   pooled_sd  Pooled S…      TRUE
9    ARM      AGE effectsi… alternative  Alternat… two.sided
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_emmeans_mean_difference")
> ### * ard_emmeans_mean_difference
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_emmeans_mean_difference
> ### Title: ARD for LS Mean Difference
> ### Aliases: ard_emmeans_mean_difference
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "emmeans", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ard_emmeans_mean_difference(
+   data = mtcars,
+   formula = mpg ~ am + cyl,
+   method = "lm"
+ )
+ 
+ ard_emmeans_mean_difference(
+   data = mtcars,
+   formula = vs ~ am + mpg,
+   method = "glm",
+   method.args = list(family = binomial),
+   response_type = "dichotomous"
+ )
+ ## Don't show: 
+ }) # examplesIf
> ard_emmeans_mean_difference(data = mtcars, formula = mpg ~ am + cyl, method = "lm")
{cards} data frame: 8 x 10
  group1 variable variable_level  stat_name stat_label      stat
1     am contrast      am0 - am1   estimate  Mean Dif…    -2.567
2     am contrast      am0 - am1  std.error  std.error     1.291
3     am contrast      am0 - am1         df         df        29
4     am contrast      am0 - am1   conf.low  CI Lower…    -5.208
5     am contrast      am0 - am1  conf.high  CI Upper…     0.074
6     am contrast      am0 - am1    p.value    p-value     0.056
7     am contrast      am0 - am1 conf.level  CI Confi…      0.95
8     am contrast      am0 - am1     method     method Least-sq…
ℹ 4 more variables: context, fmt_fn, warning, error
> ard_emmeans_mean_difference(data = mtcars, formula = vs ~ am + mpg, method = "glm", 
+     method.args = list(family = binomial), response_type = "dichotomous")
{cards} data frame: 8 x 10
  group1 variable variable_level  stat_name stat_label      stat
1     am contrast      am0 - am1   estimate  Mean Dif…      0.61
2     am contrast      am0 - am1  std.error  std.error     0.229
3     am contrast      am0 - am1         df         df       Inf
4     am contrast      am0 - am1   conf.low  CI Lower…     0.162
5     am contrast      am0 - am1  conf.high  CI Upper…     1.059
6     am contrast      am0 - am1    p.value    p-value     0.008
7     am contrast      am0 - am1 conf.level  CI Confi…      0.95
8     am contrast      am0 - am1     method     method Least-sq…
ℹ 4 more variables: context, fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_missing.survey.design")
> ### * ard_missing.survey.design
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_missing.survey.design
> ### Title: ARD Missing Survey Statistics
> ### Aliases: ard_missing.survey.design
> 
> ### ** Examples
> 
> ## Don't show: 
> if (cardx:::is_pkg_installed("survey", reference_pkg = "cardx")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ svy_titanic <- survey::svydesign(~1, data = as.data.frame(Titanic), weights = ~Freq)
+ 
+ ard_missing(svy_titanic, variables = c(Class, Age), by = Survived)
+ ## Don't show: 
+ }) # examplesIf
> svy_titanic <- survey::svydesign(~1, data = as.data.frame(Titanic), weights = ~Freq)
> ard_missing(svy_titanic, variables = c(Class, Age), by = Survived)
{cards} data frame: 40 x 10
     group1 group1_level variable            stat_name stat_label stat
1  Survived           No    Class            N_nonmiss  N not Mi… 1490
2  Survived           No    Class                N_obs    Total N 1490
3  Survived           No    Class            p_nonmiss  % not Mi…    1
4  Survived           No    Class               N_miss  N Missing    0
5  Survived           No    Class               p_miss  % Missing    0
6  Survived           No    Class    N_miss_unweighted  N Missin…    0
7  Survived           No    Class     N_obs_unweighted  Total N …   16
8  Survived           No    Class    p_miss_unweighted  % Missin…    0
9  Survived           No    Class N_nonmiss_unweighted  N not Mi…   16
10 Survived           No    Class p_nonmiss_unweighted  % not Mi…    1
ℹ 30 more rows
ℹ Use `print(n = ...)` to see more rows
ℹ 4 more variables: context, fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_regression")
> ### * ard_regression
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_regression
> ### Title: Regression ARD
> ### Aliases: ard_regression ard_regression.default
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom.helpers", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ lm(AGE ~ ARM, data = cards::ADSL) |>
+   ard_regression(add_estimate_to_reference_rows = TRUE)
+ ## Don't show: 
+ }) # examplesIf
> ard_regression(lm(AGE ~ ARM, data = cards::ADSL), add_estimate_to_reference_rows = TRUE)
{cards} data frame: 43 x 9
   variable variable_level   context      stat_name stat_label      stat
1       ARM        Placebo regressi…           term       term ARMPlace…
2       ARM        Placebo regressi…      var_label      Label Descript…
3       ARM        Placebo regressi…      var_class      Class character
4       ARM        Placebo regressi…       var_type       Type categori…
5       ARM        Placebo regressi…    var_nlevels   N Levels         3
6       ARM        Placebo regressi…      contrasts  contrasts contr.tr…
7       ARM        Placebo regressi… contrasts_type  Contrast… treatment
8       ARM        Placebo regressi…  reference_row  referenc…      TRUE
9       ARM        Placebo regressi…          label  Level La…   Placebo
10      ARM        Placebo regressi…          n_obs     N Obs.        86
ℹ 33 more rows
ℹ Use `print(n = ...)` to see more rows
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_regression_basic")
> ### * ard_regression_basic
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_regression_basic
> ### Title: Basic Regression ARD
> ### Aliases: ard_regression_basic
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom.helpers", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ lm(AGE ~ ARM, data = cards::ADSL) |>
+   ard_regression_basic()
+ ## Don't show: 
+ }) # examplesIf
> ard_regression_basic(lm(AGE ~ ARM, data = cards::ADSL))
{cards} data frame: 12 x 9
   variable variable_level   context stat_name stat_label   stat
1       ARM      Xanomeli… regressi…  estimate  Coeffici… -0.828
2       ARM      Xanomeli… regressi… std.error  Standard…  1.267
3       ARM      Xanomeli… regressi… statistic  statistic -0.654
4       ARM      Xanomeli… regressi…   p.value    p-value  0.514
5       ARM      Xanomeli… regressi…  conf.low  CI Lower… -3.324
6       ARM      Xanomeli… regressi… conf.high  CI Upper…  1.668
7       ARM      Xanomeli… regressi…  estimate  Coeffici…  0.457
8       ARM      Xanomeli… regressi… std.error  Standard…  1.267
9       ARM      Xanomeli… regressi… statistic  statistic  0.361
10      ARM      Xanomeli… regressi…   p.value    p-value  0.719
11      ARM      Xanomeli… regressi…  conf.low  CI Lower… -2.039
12      ARM      Xanomeli… regressi… conf.high  CI Upper…  2.953
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_smd_smd")
> ### * ard_smd_smd
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_smd_smd
> ### Title: ARD Standardized Mean Difference
> ### Aliases: ard_smd_smd
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "smd", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ard_smd_smd(cards::ADSL, by = SEX, variables = AGE)
+ ard_smd_smd(cards::ADSL, by = SEX, variables = AGEGR1)
+ ## Don't show: 
+ }) # examplesIf
> ard_smd_smd(cards::ADSL, by = SEX, variables = AGE)
{cards} data frame: 6 x 9
  group1 variable context stat_name stat_label      stat
1    SEX      AGE smd_smd  estimate  Standard…     0.157
2    SEX      AGE smd_smd std.error  Standard…     0.127
3    SEX      AGE smd_smd  conf.low   conf.low    -0.091
4    SEX      AGE smd_smd conf.high  conf.high     0.405
5    SEX      AGE smd_smd    method     method Standard…
6    SEX      AGE smd_smd      gref  Integer …         1
ℹ 3 more variables: fmt_fn, warning, error
> ard_smd_smd(cards::ADSL, by = SEX, variables = AGEGR1)
{cards} data frame: 6 x 9
  group1 variable context stat_name stat_label      stat
1    SEX   AGEGR1 smd_smd  estimate  Standard…     0.103
2    SEX   AGEGR1 smd_smd std.error  Standard…     0.127
3    SEX   AGEGR1 smd_smd  conf.low   conf.low    -0.145
4    SEX   AGEGR1 smd_smd conf.high  conf.high     0.351
5    SEX   AGEGR1 smd_smd    method     method Standard…
6    SEX   AGEGR1 smd_smd      gref  Integer …         1
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_stats_anova")
> ### * ard_stats_anova
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_stats_anova
> ### Title: ARD ANOVA
> ### Aliases: ard_stats_anova ard_stats_anova.anova
> ###   ard_stats_anova.data.frame
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("broom", "withr", "lme4"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ anova(
+   lm(mpg ~ am, mtcars),
+   lm(mpg ~ am + hp, mtcars)
+ ) |>
+   ard_stats_anova()
+ 
+ ard_stats_anova(
+   x = mtcars,
+   formulas = list(am ~ mpg, am ~ mpg + hp),
+   method = "glm",
+   method.args = list(family = binomial)
+ )
+ 
+ ard_stats_anova(
+   x = mtcars,
+   formulas = list(am ~ 1 + (1 | vs), am ~ mpg + (1 | vs)),
+   method = "glmer",
+   method.args = list(family = binomial),
+   package = "lme4"
+ )
+ ## Don't show: 
+ }) # examplesIf
> ard_stats_anova(anova(lm(mpg ~ am, mtcars), lm(mpg ~ am + hp, mtcars)))
{cards} data frame: 11 x 8
   variable   context   stat_name stat_label      stat fmt_fn
1   model_1 stats_an…        term       term  mpg ~ am   NULL
2   model_1 stats_an… df.residual  df for r…        30      1
3   model_1 stats_an…         rss  Residual…   720.897      1
4   model_2 stats_an…        term       term mpg ~ am…   NULL
5   model_2 stats_an… df.residual  df for r…        29      1
6   model_2 stats_an…         rss  Residual…   245.439      1
7   model_2 stats_an…          df  Degrees …         1      1
8   model_2 stats_an…       sumsq  Sum of S…   475.457      1
9   model_2 stats_an…   statistic  statistic    56.178      1
10  model_2 stats_an…     p.value    p-value         0      1
11  model_2 stats_an…      method     method ANOVA re…   NULL
ℹ 2 more variables: warning, error
> ard_stats_anova(x = mtcars, formulas = list(am ~ mpg, am ~ mpg + hp), 
+     method = "glm", method.args = list(family = binomial))
{cards} data frame: 9 x 8
  variable   context         stat_name stat_label      stat fmt_fn
1  model_1 stats_an…              term       term  am ~ mpg   NULL
2  model_1 stats_an…       df.residual  df for r…        30      1
3  model_1 stats_an… residual.deviance  residual…    29.675      1
4  model_2 stats_an…              term       term am ~ mpg…   NULL
5  model_2 stats_an…       df.residual  df for r…        29      1
6  model_2 stats_an… residual.deviance  residual…    19.233      1
7  model_2 stats_an…                df  Degrees …         1      1
8  model_2 stats_an…          deviance   deviance    10.443      1
9  model_2 stats_an…            method     method ANOVA re…   NULL
ℹ 2 more variables: warning, error
> ard_stats_anova(x = mtcars, formulas = list(am ~ 1 + (1 | vs), am ~ mpg + 
+     (1 | vs)), method = "glmer", method.args = list(family = binomial), package = "lme4")
{cards} data frame: 16 x 8
   variable   context stat_name stat_label      stat   warning
1   model_1 stats_an…      term       term    MODEL1 failed t…
2   model_1 stats_an…      npar       npar         2 failed t…
3   model_1 stats_an…       AIC        AIC     47.23 failed t…
4   model_1 stats_an…       BIC        BIC    50.161 failed t…
5   model_1 stats_an…    logLik     logLik   -21.615 failed t…
6   model_1 stats_an…  deviance   deviance     43.23 failed t…
7   model_2 stats_an…      term       term    MODEL2 failed t…
8   model_2 stats_an…      npar       npar         3 failed t…
9   model_2 stats_an…       AIC        AIC     35.25 failed t…
10  model_2 stats_an…       BIC        BIC    39.647 failed t…
11  model_2 stats_an…    logLik     logLik   -14.625 failed t…
12  model_2 stats_an…  deviance   deviance     29.25 failed t…
13  model_2 stats_an… statistic  statistic    13.979 failed t…
14  model_2 stats_an…        df  Degrees …         1 failed t…
15  model_2 stats_an…   p.value    p-value         0 failed t…
16  model_2 stats_an…    method     method ANOVA re… failed t…
ℹ 2 more variables: fmt_fn, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_stats_aov")
> ### * ard_stats_aov
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_stats_aov
> ### Title: ARD ANOVA
> ### Aliases: ard_stats_aov
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("broom.helpers", "parameters"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ard_stats_aov(AGE ~ ARM, data = cards::ADSL)
+ ## Don't show: 
+ }) # examplesIf
> ard_stats_aov(AGE ~ ARM, data = cards::ADSL)
{cards} data frame: 5 x 8
  variable   context stat_name stat_label   stat fmt_fn
1      ARM stats_aov     sumsq  Sum of S… 71.386      1
2      ARM stats_aov        df  Degrees …      2      1
3      ARM stats_aov    meansq  Mean of … 35.693      1
4      ARM stats_aov statistic  Statistic  0.523      1
5      ARM stats_aov   p.value    p-value  0.593      1
ℹ 2 more variables: warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_stats_chisq_test")
> ### * ard_stats_chisq_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_stats_chisq_test
> ### Title: ARD Chi-squared Test
> ### Aliases: ard_stats_chisq_test
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cards::ADSL |>
+   ard_stats_chisq_test(by = "ARM", variables = "AGEGR1")
+ ## Don't show: 
+ }) # examplesIf
> ard_stats_chisq_test(cards::ADSL, by = "ARM", variables = "AGEGR1")
{cards} data frame: 9 x 9
  group1 variable   context        stat_name stat_label
1    ARM   AGEGR1 stats_ch…        statistic  X-square…
2    ARM   AGEGR1 stats_ch…          p.value    p-value
3    ARM   AGEGR1 stats_ch…        parameter  Degrees …
4    ARM   AGEGR1 stats_ch…           method     method
5    ARM   AGEGR1 stats_ch…          correct    correct
6    ARM   AGEGR1 stats_ch…                p          p
7    ARM   AGEGR1 stats_ch…        rescale.p  rescale.p
8    ARM   AGEGR1 stats_ch… simulate.p.value  simulate…
9    ARM   AGEGR1 stats_ch…                B          B
                         stat
1                       6.852
2                       0.144
3                           4
4                   Pearson'…
5                        TRUE
6 rep, 1/length(x), length(x)
7                       FALSE
8                       FALSE
9                        2000
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_stats_fisher_test")
> ### * ard_stats_fisher_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_stats_fisher_test
> ### Title: ARD Fisher's Exact Test
> ### Aliases: ard_stats_fisher_test
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cards::ADSL[1:30, ] |>
+   ard_stats_fisher_test(by = "ARM", variables = "AGEGR1")
+ ## Don't show: 
+ }) # examplesIf
> ard_stats_fisher_test(cards::ADSL[1:30, ], by = "ARM", variables = "AGEGR1")
{cards} data frame: 12 x 9
   group1 variable   context        stat_name stat_label        stat
1     ARM   AGEGR1 stats_fi…          p.value    p-value       0.089
2     ARM   AGEGR1 stats_fi…           method     method   Fisher's…
3     ARM   AGEGR1 stats_fi…      alternative  alternat…   two.sided
4     ARM   AGEGR1 stats_fi…        workspace  workspace       2e+05
5     ARM   AGEGR1 stats_fi…           hybrid     hybrid       FALSE
6     ARM   AGEGR1 stats_fi…       hybridPars  hybridPa… c, 5, 80, 1
7     ARM   AGEGR1 stats_fi…          control    control        list
8     ARM   AGEGR1 stats_fi…               or         or           1
9     ARM   AGEGR1 stats_fi…         conf.int   conf.int        TRUE
10    ARM   AGEGR1 stats_fi…       conf.level  conf.lev…        0.95
11    ARM   AGEGR1 stats_fi… simulate.p.value  simulate…       FALSE
12    ARM   AGEGR1 stats_fi…                B          B        2000
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_stats_kruskal_test")
> ### * ard_stats_kruskal_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_stats_kruskal_test
> ### Title: ARD Kruskal-Wallis Test
> ### Aliases: ard_stats_kruskal_test
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cards::ADSL |>
+   ard_stats_kruskal_test(by = "ARM", variables = "AGE")
+ ## Don't show: 
+ }) # examplesIf
> ard_stats_kruskal_test(cards::ADSL, by = "ARM", variables = "AGE")
{cards} data frame: 4 x 9
  group1 variable   context stat_name stat_label      stat
1    ARM      AGE stats_kr… statistic  Kruskal-…     1.635
2    ARM      AGE stats_kr…   p.value    p-value     0.442
3    ARM      AGE stats_kr… parameter  Degrees …         2
4    ARM      AGE stats_kr…    method     method Kruskal-…
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_stats_mcnemar_test")
> ### * ard_stats_mcnemar_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_stats_mcnemar_test
> ### Title: ARD McNemar's Test
> ### Aliases: ard_stats_mcnemar_test ard_stats_mcnemar_test_long
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cards::ADSL |>
+   ard_stats_mcnemar_test(by = "SEX", variables = "EFFFL")
+ 
+ set.seed(1234)
+ cards::ADSL[c("USUBJID", "TRT01P")] |>
+   dplyr::mutate(TYPE = "PLANNED") |>
+   dplyr::rename(TRT01 = TRT01P) %>%
+   dplyr::bind_rows(dplyr::mutate(., TYPE = "ACTUAL", TRT01 = sample(TRT01))) |>
+   ard_stats_mcnemar_test_long(
+     by = TYPE,
+     variable = TRT01,
+     id = USUBJID
+   )
+ ## Don't show: 
+ }) # examplesIf
> ard_stats_mcnemar_test(cards::ADSL, by = "SEX", variables = "EFFFL")
{cards} data frame: 5 x 9
  group1 variable   context stat_name stat_label      stat
1    SEX    EFFFL stats_mc… statistic  X-square…    111.91
2    SEX    EFFFL stats_mc…   p.value    p-value         0
3    SEX    EFFFL stats_mc… parameter  Degrees …         1
4    SEX    EFFFL stats_mc…    method     method McNemar'…
5    SEX    EFFFL stats_mc…   correct    correct      TRUE
ℹ 3 more variables: fmt_fn, warning, error
> set.seed(1234)
> ard_stats_mcnemar_test_long(dplyr::rename(dplyr::mutate(cards::ADSL[c("USUBJID", 
+     "TRT01P")], TYPE = "PLANNED"), TRT01 = TRT01P) %>% dplyr::bind_rows(dplyr::mutate(., 
+     TYPE = "ACTUAL", TRT01 = sample(TRT01))), by = TYPE, variable = TRT01, id = USUBJID)
{cards} data frame: 5 x 9
  group1 variable   context stat_name stat_label      stat
1   TYPE    TRT01 stats_mc… statistic  X-square…     1.353
2   TYPE    TRT01 stats_mc…   p.value    p-value     0.717
3   TYPE    TRT01 stats_mc… parameter  Degrees …         3
4   TYPE    TRT01 stats_mc…    method     method McNemar'…
5   TYPE    TRT01 stats_mc…   correct    correct      TRUE
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_stats_mood_test")
> ### * ard_stats_mood_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_stats_mood_test
> ### Title: ARD Mood Test
> ### Aliases: ard_stats_mood_test
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cards::ADSL |>
+   ard_stats_mood_test(by = "SEX", variables = "AGE")
+ ## Don't show: 
+ }) # examplesIf
> ard_stats_mood_test(cards::ADSL, by = "SEX", variables = "AGE")
{cards} data frame: 4 x 9
  group1 variable   context   stat_name stat_label      stat
1    SEX      AGE stats_mo…   statistic  Z-Statis…     0.129
2    SEX      AGE stats_mo…     p.value    p-value     0.897
3    SEX      AGE stats_mo…      method     method Mood two…
4    SEX      AGE stats_mo… alternative  Alternat… two.sided
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_stats_oneway_test")
> ### * ard_stats_oneway_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_stats_oneway_test
> ### Title: ARD One-way Test
> ### Aliases: ard_stats_oneway_test
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ ard_stats_oneway_test(AGE ~ ARM, data = cards::ADSL)
+ ## Don't show: 
+ }) # examplesIf
> ard_stats_oneway_test(AGE ~ ARM, data = cards::ADSL)
{cards} data frame: 6 x 9
  group1 variable   context stat_name stat_label      stat
1    ARM      AGE stats_on…    num.df  Degrees …         2
2    ARM      AGE stats_on…    den.df  Denomina…   167.237
3    ARM      AGE stats_on… statistic  F Statis…     0.547
4    ARM      AGE stats_on…   p.value    p-value      0.58
5    ARM      AGE stats_on…    method     Method One-way …
6    ARM      AGE stats_on… var.equal  var.equal     FALSE
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_stats_poisson_test")
> ### * ard_stats_poisson_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_stats_poisson_test
> ### Title: ARD Poisson Test
> ### Aliases: ard_stats_poisson_test
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Exact test of rate parameter against null hypothesis
+ cards::ADTTE |>
+   ard_stats_poisson_test(variables = c(CNSR, AVAL))
+ 
+ # Comparison test of ratio of 2 rate parameters against null hypothesis
+ cards::ADTTE |>
+   dplyr::filter(TRTA %in% c("Placebo", "Xanomeline High Dose")) |>
+   ard_stats_poisson_test(by = TRTA, variables = c(CNSR, AVAL))
+ ## Don't show: 
+ }) # examplesIf
> ard_stats_poisson_test(cards::ADTTE, variables = c(CNSR, AVAL))
{cards} data frame: 10 x 8
   variable   context   stat_name stat_label      stat fmt_fn
1      AVAL stats_po…    estimate  Estimate…     0.006      1
2      AVAL stats_po…   statistic  Number o…       102      1
3      AVAL stats_po…     p.value    p-value         0      1
4      AVAL stats_po…   parameter  Expected…     16853      1
5      AVAL stats_po…    conf.low  CI Lower…     0.005      1
6      AVAL stats_po…   conf.high  CI Upper…     0.007      1
7      AVAL stats_po…      method     method Exact Po…   NULL
8      AVAL stats_po… alternative  alternat… two.sided   NULL
9      AVAL stats_po…  conf.level  CI Confi…      0.95      1
10     AVAL stats_po…          mu    H0 Mean         1      1
ℹ 2 more variables: warning, error
> ard_stats_poisson_test(dplyr::filter(cards::ADTTE, TRTA %in% c("Placebo", 
+     "Xanomeline High Dose")), by = TRTA, variables = c(CNSR, AVAL))
{cards} data frame: 10 x 9
   group1 variable   context   stat_name stat_label      stat
1    TRTA     AVAL stats_po…    estimate  Estimate…     0.768
2    TRTA     AVAL stats_po…   statistic  Number o…        57
3    TRTA     AVAL stats_po…     p.value    p-value     0.293
4    TRTA     AVAL stats_po…   parameter  Expected…    61.078
5    TRTA     AVAL stats_po…    conf.low  CI Lower…     0.466
6    TRTA     AVAL stats_po…   conf.high  CI Upper…     1.306
7    TRTA     AVAL stats_po…      method     method Comparis…
8    TRTA     AVAL stats_po… alternative  alternat… two.sided
9    TRTA     AVAL stats_po…  conf.level  CI Confi…      0.95
10   TRTA     AVAL stats_po…          mu    H0 Mean         1
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_stats_prop_test")
> ### * ard_stats_prop_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_stats_prop_test
> ### Title: ARD 2-sample proportion test
> ### Aliases: ard_stats_prop_test
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ mtcars |>
+   ard_stats_prop_test(by = vs, variables = am)
+ ## Don't show: 
+ }) # examplesIf
> ard_stats_prop_test(mtcars, by = vs, variables = am)
{cards} data frame: 13 x 9
   group1 variable   context   stat_name stat_label      stat
1      vs       am stats_pr…    estimate  Rate Dif…    -0.167
2      vs       am stats_pr…   estimate1  Group 1 …     0.333
3      vs       am stats_pr…   estimate2  Group 2 …       0.5
4      vs       am stats_pr…   statistic  X-square…     0.348
5      vs       am stats_pr…     p.value    p-value     0.556
6      vs       am stats_pr…   parameter  Degrees …         1
7      vs       am stats_pr…    conf.low  CI Lower…    -0.571
8      vs       am stats_pr…   conf.high  CI Upper…     0.237
9      vs       am stats_pr…      method     method 2-sample…
10     vs       am stats_pr… alternative  alternat… two.sided
11     vs       am stats_pr…           p          p          
12     vs       am stats_pr…  conf.level  CI Confi…      0.95
13     vs       am stats_pr…     correct  Yates' c…      TRUE
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_stats_t_test")
> ### * ard_stats_t_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_stats_t_test
> ### Title: ARD t-test
> ### Aliases: ard_stats_t_test ard_stats_paired_t_test
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cards::ADSL |>
+   dplyr::filter(ARM %in% c("Placebo", "Xanomeline High Dose")) |>
+   ard_stats_t_test(by = ARM, variables = c(AGE, BMIBL))
+ 
+ # constructing a paired data set,
+ # where patients receive both treatments
+ cards::ADSL[c("ARM", "AGE")] |>
+   dplyr::filter(ARM %in% c("Placebo", "Xanomeline High Dose")) |>
+   dplyr::mutate(.by = ARM, USUBJID = dplyr::row_number()) |>
+   dplyr::arrange(USUBJID, ARM) |>
+   ard_stats_paired_t_test(by = ARM, variables = AGE, id = USUBJID)
+ ## Don't show: 
+ }) # examplesIf
> ard_stats_t_test(dplyr::filter(cards::ADSL, ARM %in% c("Placebo", "Xanomeline High Dose")), 
+     by = ARM, variables = c(AGE, BMIBL))
{cards} data frame: 28 x 9
   group1 variable   context   stat_name stat_label      stat
1     ARM      AGE stats_t_…    estimate  Mean Dif…     0.828
2     ARM      AGE stats_t_…   estimate1  Group 1 …    75.209
3     ARM      AGE stats_t_…   estimate2  Group 2 …    74.381
4     ARM      AGE stats_t_…   statistic  t Statis…     0.655
5     ARM      AGE stats_t_…     p.value    p-value     0.513
6     ARM      AGE stats_t_…   parameter  Degrees …   167.362
7     ARM      AGE stats_t_…    conf.low  CI Lower…    -1.668
8     ARM      AGE stats_t_…   conf.high  CI Upper…     3.324
9     ARM      AGE stats_t_…      method     method Welch Tw…
10    ARM      AGE stats_t_… alternative  alternat… two.sided
ℹ 18 more rows
ℹ Use `print(n = ...)` to see more rows
ℹ 3 more variables: fmt_fn, warning, error
> ard_stats_paired_t_test(dplyr::arrange(dplyr::mutate(dplyr::filter(cards::ADSL[c("ARM", 
+     "AGE")], ARM %in% c("Placebo", "Xanomeline High Dose")), .by = ARM, USUBJID = dplyr::row_number()), 
+     USUBJID, ARM), by = ARM, variables = AGE, id = USUBJID)
{cards} data frame: 12 x 9
   group1 variable   context   stat_name stat_label      stat
1     ARM      AGE stats_t_…    estimate  Mean Dif…     0.798
2     ARM      AGE stats_t_…   statistic  t Statis…     0.628
3     ARM      AGE stats_t_…     p.value    p-value     0.531
4     ARM      AGE stats_t_…   parameter  Degrees …        83
5     ARM      AGE stats_t_…    conf.low  CI Lower…    -1.727
6     ARM      AGE stats_t_…   conf.high  CI Upper…     3.322
7     ARM      AGE stats_t_…      method     method Paired t…
8     ARM      AGE stats_t_… alternative  alternat… two.sided
9     ARM      AGE stats_t_…          mu    H0 Mean         0
10    ARM      AGE stats_t_…      paired  Paired t…      TRUE
11    ARM      AGE stats_t_…   var.equal  Equal Va…     FALSE
12    ARM      AGE stats_t_…  conf.level  CI Confi…      0.95
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_stats_t_test_onesample")
> ### * ard_stats_t_test_onesample
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_stats_t_test_onesample
> ### Title: ARD one-sample t-test
> ### Aliases: ard_stats_t_test_onesample
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cards::ADSL |>
+   ard_stats_t_test_onesample(by = ARM, variables = AGE)
+ ## Don't show: 
+ }) # examplesIf
> ard_stats_t_test_onesample(cards::ADSL, by = ARM, variables = AGE)
{cards} data frame: 30 x 10
   group1 group1_level variable   stat_name stat_label      stat
1     ARM      Placebo      AGE    estimate       Mean    75.209
2     ARM      Placebo      AGE   statistic  t Statis…    81.193
3     ARM      Placebo      AGE     p.value    p-value         0
4     ARM      Placebo      AGE   parameter  Degrees …        85
5     ARM      Placebo      AGE    conf.low  CI Lower…    73.368
6     ARM      Placebo      AGE   conf.high  CI Upper…    77.051
7     ARM      Placebo      AGE      method     method One Samp…
8     ARM      Placebo      AGE alternative  alternat… two.sided
9     ARM      Placebo      AGE          mu    H0 Mean         0
10    ARM      Placebo      AGE  conf.level  CI Confi…      0.95
ℹ 20 more rows
ℹ Use `print(n = ...)` to see more rows
ℹ 4 more variables: context, fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_stats_wilcox_test")
> ### * ard_stats_wilcox_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_stats_wilcox_test
> ### Title: ARD Wilcoxon Rank-Sum Test
> ### Aliases: ard_stats_wilcox_test ard_stats_paired_wilcox_test
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cards::ADSL |>
+   dplyr::filter(ARM %in% c("Placebo", "Xanomeline High Dose")) |>
+   ard_stats_wilcox_test(by = "ARM", variables = "AGE")
+ 
+ # constructing a paired data set,
+ # where patients receive both treatments
+ cards::ADSL[c("ARM", "AGE")] |>
+   dplyr::filter(ARM %in% c("Placebo", "Xanomeline High Dose")) |>
+   dplyr::mutate(.by = ARM, USUBJID = dplyr::row_number()) |>
+   dplyr::arrange(USUBJID, ARM) |>
+   ard_stats_paired_wilcox_test(by = ARM, variables = AGE, id = USUBJID)
+ ## Don't show: 
+ }) # examplesIf
> ard_stats_wilcox_test(dplyr::filter(cards::ADSL, ARM %in% c("Placebo", 
+     "Xanomeline High Dose")), by = "ARM", variables = "AGE")
{cards} data frame: 12 x 9
   group1 variable   context   stat_name stat_label      stat
1     ARM      AGE stats_wi…   statistic  X-square…    3862.5
2     ARM      AGE stats_wi…     p.value    p-value     0.435
3     ARM      AGE stats_wi…      method     method Wilcoxon…
4     ARM      AGE stats_wi… alternative  alternat… two.sided
5     ARM      AGE stats_wi…          mu         mu         0
6     ARM      AGE stats_wi…      paired  Paired t…     FALSE
7     ARM      AGE stats_wi…       exact      exact          
8     ARM      AGE stats_wi…     correct    correct      TRUE
9     ARM      AGE stats_wi…    conf.int   conf.int     FALSE
10    ARM      AGE stats_wi…  conf.level  CI Confi…      0.95
11    ARM      AGE stats_wi…    tol.root   tol.root         0
12    ARM      AGE stats_wi… digits.rank  digits.r…       Inf
ℹ 3 more variables: fmt_fn, warning, error
> ard_stats_paired_wilcox_test(dplyr::arrange(dplyr::mutate(dplyr::filter(cards::ADSL[c("ARM", 
+     "AGE")], ARM %in% c("Placebo", "Xanomeline High Dose")), .by = ARM, USUBJID = dplyr::row_number()), 
+     USUBJID, ARM), by = ARM, variables = AGE, id = USUBJID)
{cards} data frame: 12 x 9
   group1 variable   context   stat_name stat_label      stat
1     ARM      AGE stats_wi…   statistic  X-square…      1754
2     ARM      AGE stats_wi…     p.value    p-value     0.522
3     ARM      AGE stats_wi…      method     method Wilcoxon…
4     ARM      AGE stats_wi… alternative  alternat… two.sided
5     ARM      AGE stats_wi…          mu         mu         0
6     ARM      AGE stats_wi…      paired  Paired t…      TRUE
7     ARM      AGE stats_wi…       exact      exact          
8     ARM      AGE stats_wi…     correct    correct      TRUE
9     ARM      AGE stats_wi…    conf.int   conf.int     FALSE
10    ARM      AGE stats_wi…  conf.level  CI Confi…      0.95
11    ARM      AGE stats_wi…    tol.root   tol.root         0
12    ARM      AGE stats_wi… digits.rank  digits.r…       Inf
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_stats_wilcox_test_onesample")
> ### * ard_stats_wilcox_test_onesample
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_stats_wilcox_test_onesample
> ### Title: ARD one-sample Wilcox Rank-sum
> ### Aliases: ard_stats_wilcox_test_onesample
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cards::ADSL |>
+   ard_stats_wilcox_test_onesample(by = ARM, variables = AGE)
+ ## Don't show: 
+ }) # examplesIf
> ard_stats_wilcox_test_onesample(cards::ADSL, by = ARM, variables = AGE)
{cards} data frame: 27 x 10
   group1 group1_level variable   stat_name stat_label      stat
1     ARM      Placebo      AGE   statistic  t Statis…      3741
2     ARM      Placebo      AGE     p.value    p-value         0
3     ARM      Placebo      AGE      method     method Wilcoxon…
4     ARM      Placebo      AGE alternative  alternat… two.sided
5     ARM      Placebo      AGE          mu    H0 Mean         0
6     ARM      Placebo      AGE    conf.int   conf.int     FALSE
7     ARM      Placebo      AGE    tol.root   tol.root         0
8     ARM      Placebo      AGE digits.rank  digits.r…       Inf
9     ARM      Placebo      AGE  conf.level  CI Confi…      0.95
10    ARM    Xanomeli…      AGE   statistic  t Statis…      3570
ℹ 17 more rows
ℹ Use `print(n = ...)` to see more rows
ℹ 4 more variables: context, fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_survey_svychisq")
> ### * ard_survey_svychisq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_survey_svychisq
> ### Title: ARD Survey Chi-Square Test
> ### Aliases: ard_survey_svychisq
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("survey", "broom"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ data(api, package = "survey")
+ dclus1 <- survey::svydesign(id = ~dnum, weights = ~pw, data = apiclus1, fpc = ~fpc)
+ 
+ ard_survey_svychisq(dclus1, variables = sch.wide, by = comp.imp, statistic = "F")
+ ## Don't show: 
+ }) # examplesIf
> data(api, package = "survey")
> dclus1 <- survey::svydesign(id = ~dnum, weights = ~pw, data = apiclus1, 
+     fpc = ~fpc)
> ard_survey_svychisq(dclus1, variables = sch.wide, by = comp.imp, statistic = "F")
{cards} data frame: 5 x 9
    group1 variable   context stat_name stat_label      stat
1 comp.imp sch.wide survey_s…       ndf  Nominato…         1
2 comp.imp sch.wide survey_s…       ddf  Denomina…        14
3 comp.imp sch.wide survey_s… statistic  Statistic   236.895
4 comp.imp sch.wide survey_s…   p.value    p-value         0
5 comp.imp sch.wide survey_s…    method     method Pearson'…
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_survey_svyranktest")
> ### * ard_survey_svyranktest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_survey_svyranktest
> ### Title: ARD Survey rank test
> ### Aliases: ard_survey_svyranktest
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("survey", "broom"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ data(api, package = "survey")
+ dclus2 <- survey::svydesign(id = ~ dnum + snum, fpc = ~ fpc1 + fpc2, data = apiclus2)
+ 
+ ard_survey_svyranktest(dclus2, variables = enroll, by = comp.imp, test = "wilcoxon")
+ ard_survey_svyranktest(dclus2, variables = enroll, by = comp.imp, test = "vanderWaerden")
+ ard_survey_svyranktest(dclus2, variables = enroll, by = comp.imp, test = "median")
+ ard_survey_svyranktest(dclus2, variables = enroll, by = comp.imp, test = "KruskalWallis")
+ ## Don't show: 
+ }) # examplesIf
> data(api, package = "survey")
> dclus2 <- survey::svydesign(id = ~dnum + snum, fpc = ~fpc1 + fpc2, data = apiclus2)
> ard_survey_svyranktest(dclus2, variables = enroll, by = comp.imp, test = "wilcoxon")
{cards} data frame: 6 x 9
    group1 variable   context   stat_name stat_label      stat
1 comp.imp   enroll survey_s…    estimate  Median o…    -0.106
2 comp.imp   enroll survey_s…   statistic  Statistic    -1.719
3 comp.imp   enroll survey_s…     p.value    p-value     0.094
4 comp.imp   enroll survey_s…   parameter  Degrees …        36
5 comp.imp   enroll survey_s…      method     method Design-b…
6 comp.imp   enroll survey_s… alternative  Alternat… two.sided
ℹ 3 more variables: fmt_fn, warning, error
> ard_survey_svyranktest(dclus2, variables = enroll, by = comp.imp, test = "vanderWaerden")
{cards} data frame: 6 x 9
    group1 variable   context   stat_name stat_label      stat
1 comp.imp   enroll survey_s…    estimate  Median o…    -0.379
2 comp.imp   enroll survey_s…   statistic  Statistic    -1.584
3 comp.imp   enroll survey_s…     p.value    p-value     0.122
4 comp.imp   enroll survey_s…   parameter  Degrees …        36
5 comp.imp   enroll survey_s…      method     method Design-b…
6 comp.imp   enroll survey_s… alternative  Alternat… two.sided
ℹ 3 more variables: fmt_fn, warning, error
> ard_survey_svyranktest(dclus2, variables = enroll, by = comp.imp, test = "median")
{cards} data frame: 6 x 9
    group1 variable   context   stat_name stat_label      stat
1 comp.imp   enroll survey_s…    estimate  Median o…    -0.124
2 comp.imp   enroll survey_s…   statistic  Statistic    -0.914
3 comp.imp   enroll survey_s…     p.value    p-value     0.367
4 comp.imp   enroll survey_s…   parameter  Degrees …        36
5 comp.imp   enroll survey_s…      method     method Design-b…
6 comp.imp   enroll survey_s… alternative  Alternat… two.sided
ℹ 3 more variables: fmt_fn, warning, error
> ard_survey_svyranktest(dclus2, variables = enroll, by = comp.imp, test = "KruskalWallis")
{cards} data frame: 6 x 9
    group1 variable   context   stat_name stat_label      stat
1 comp.imp   enroll survey_s…    estimate  Median o…    -0.106
2 comp.imp   enroll survey_s…   statistic  Statistic    -1.719
3 comp.imp   enroll survey_s…     p.value    p-value     0.094
4 comp.imp   enroll survey_s…   parameter  Degrees …        36
5 comp.imp   enroll survey_s…      method     method Design-b…
6 comp.imp   enroll survey_s… alternative  Alternat… two.sided
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_survey_svyttest")
> ### * ard_survey_svyttest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_survey_svyttest
> ### Title: ARD Survey t-test
> ### Aliases: ard_survey_svyttest
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("survey", "broom"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ data(api, package = "survey")
+ dclus2 <- survey::svydesign(id = ~ dnum + snum, fpc = ~ fpc1 + fpc2, data = apiclus2)
+ 
+ ard_survey_svyttest(dclus2, variables = enroll, by = comp.imp, conf.level = 0.9)
+ ## Don't show: 
+ }) # examplesIf
> data(api, package = "survey")
> dclus2 <- survey::svydesign(id = ~dnum + snum, fpc = ~fpc1 + fpc2, data = apiclus2)
> ard_survey_svyttest(dclus2, variables = enroll, by = comp.imp, conf.level = 0.9)
{cards} data frame: 9 x 9
    group1 variable   context   stat_name stat_label      stat
1 comp.imp   enroll survey_s…    estimate       Mean  -225.737
2 comp.imp   enroll survey_s…   statistic  t Statis…    -2.888
3 comp.imp   enroll survey_s…     p.value    p-value     0.007
4 comp.imp   enroll survey_s…   parameter  Degrees …        36
5 comp.imp   enroll survey_s…      method     method Design-b…
6 comp.imp   enroll survey_s… alternative  alternat… two.sided
7 comp.imp   enroll survey_s…    conf.low  CI Lower…   -357.69
8 comp.imp   enroll survey_s…   conf.high  CI Upper…   -93.784
9 comp.imp   enroll survey_s…  conf.level  CI Confi…       0.9
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("ard_survival_survdiff")
> ### * ard_survival_survdiff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_survival_survdiff
> ### Title: ARD for Difference in Survival
> ### Aliases: ard_survival_survdiff
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("survival", "broom", "ggsurvfit"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(survival)
+ library(ggsurvfit)
+ 
+ ard_survival_survdiff(Surv_CNSR(AVAL, CNSR) ~ TRTA, data = cards::ADTTE)
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> library(ggsurvfit)
Loading required package: ggplot2
> ard_survival_survdiff(Surv_CNSR(AVAL, CNSR) ~ TRTA, data = cards::ADTTE)
{cards} data frame: 4 x 8
  variable   context stat_name stat_label      stat fmt_fn
1     TRTA survival… statistic  X^2 Stat…     60.27      1
2     TRTA survival…        df  Degrees …         2      1
3     TRTA survival…   p.value    p-value         0      1
4     TRTA survival…    method     method Log-rank…   NULL
ℹ 2 more variables: warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:ggsurvfit’, ‘package:survival’

> nameEx("ard_survival_survfit")
> ### * ard_survival_survfit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_survival_survfit
> ### Title: ARD Survival Estimates
> ### Aliases: ard_survival_survfit
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("survival", "broom", "ggsurvfit"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(survival)
+ library(ggsurvfit)
+ 
+ survfit(Surv_CNSR(AVAL, CNSR) ~ TRTA, cards::ADTTE) |>
+   ard_survival_survfit(times = c(60, 180))
+ 
+ survfit(Surv_CNSR(AVAL, CNSR) ~ TRTA, cards::ADTTE) |>
+   ard_survival_survfit(probs = c(0.25, 0.5, 0.75))
+ 
+ # Competing Risks Example ---------------------------
+ set.seed(1)
+ ADTTE_MS <- cards::ADTTE %>%
+   dplyr::mutate(
+     CNSR = dplyr::case_when(
+       CNSR == 0 ~ "censor",
+       runif(dplyr::n()) < 0.5 ~ "death from cancer",
+       TRUE ~ "death other causes"
+     ) %>% factor()
+   )
+ 
+ survfit(Surv(AVAL, CNSR) ~ TRTA, data = ADTTE_MS) %>%
+   ard_survival_survfit(times = c(60, 180))
+ ## Don't show: 
+ }) # examplesIf
> library(survival)
> library(ggsurvfit)
Loading required package: ggplot2
> ard_survival_survfit(survfit(Surv_CNSR(AVAL, CNSR) ~ TRTA, cards::ADTTE), 
+     times = c(60, 180))
{cards} data frame: 30 x 11
   group1 group1_level variable variable_level stat_name stat_label  stat
1    TRTA      Placebo     time             60    n.risk  Number o…    59
2    TRTA      Placebo     time             60  estimate  Survival… 0.768
3    TRTA      Placebo     time             60 std.error  Standard… 0.047
4    TRTA      Placebo     time             60 conf.high  CI Upper… 0.866
5    TRTA      Placebo     time             60  conf.low  CI Lower… 0.682
6    TRTA      Placebo     time            180    n.risk  Number o…    35
7    TRTA      Placebo     time            180  estimate  Survival… 0.626
8    TRTA      Placebo     time            180 std.error  Standard… 0.056
9    TRTA      Placebo     time            180 conf.high  CI Upper… 0.746
10   TRTA      Placebo     time            180  conf.low  CI Lower… 0.526
ℹ 20 more rows
ℹ Use `print(n = ...)` to see more rows
ℹ 4 more variables: context, fmt_fn, warning, error
> ard_survival_survfit(survfit(Surv_CNSR(AVAL, CNSR) ~ TRTA, cards::ADTTE), 
+     probs = c(0.25, 0.5, 0.75))
{cards} data frame: 27 x 11
   group1 group1_level variable variable_level stat_name stat_label stat
1    TRTA      Placebo     prob           0.25  estimate  Survival…   70
2    TRTA      Placebo     prob           0.25 conf.high  CI Upper…  177
3    TRTA      Placebo     prob           0.25  conf.low  CI Lower…   35
4    TRTA      Placebo     prob            0.5  estimate  Survival…   NA
5    TRTA      Placebo     prob            0.5 conf.high  CI Upper…   NA
6    TRTA      Placebo     prob            0.5  conf.low  CI Lower…   NA
7    TRTA      Placebo     prob           0.75  estimate  Survival…   NA
8    TRTA      Placebo     prob           0.75 conf.high  CI Upper…   NA
9    TRTA      Placebo     prob           0.75  conf.low  CI Lower…   NA
10   TRTA    Xanomeli…     prob           0.25  estimate  Survival…   14
ℹ 17 more rows
ℹ Use `print(n = ...)` to see more rows
ℹ 4 more variables: context, fmt_fn, warning, error
> set.seed(1)
> ADTTE_MS <- cards::ADTTE %>% dplyr::mutate(CNSR = dplyr::case_when(CNSR == 
+     0 ~ "censor", runif(dplyr::n()) < 0.5 ~ "death from cancer", TRUE ~ "death other causes") %>% 
+     factor())
> survfit(Surv(AVAL, CNSR) ~ TRTA, data = ADTTE_MS) %>% ard_survival_survfit(times = c(60, 
+     180))
Multi-state model detected. Showing probabilities into state 'death from
cancer'.
{cards} data frame: 30 x 11
   group1 group1_level variable variable_level stat_name stat_label  stat
1    TRTA      Placebo     time             60    n.risk  Number o…    59
2    TRTA      Placebo     time             60  estimate  Survival… 0.054
3    TRTA      Placebo     time             60 std.error  Standard… 0.026
4    TRTA      Placebo     time             60 conf.high  CI Upper…  0.14
5    TRTA      Placebo     time             60  conf.low  CI Lower… 0.021
6    TRTA      Placebo     time            180    n.risk  Number o…    35
7    TRTA      Placebo     time            180  estimate  Survival… 0.226
8    TRTA      Placebo     time            180 std.error  Standard… 0.054
9    TRTA      Placebo     time            180 conf.high  CI Upper… 0.361
10   TRTA      Placebo     time            180  conf.low  CI Lower… 0.142
ℹ 20 more rows
ℹ Use `print(n = ...)` to see more rows
ℹ 4 more variables: context, fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’, ‘package:ggsurvfit’, ‘package:survival’

> nameEx("ard_survival_survfit_diff")
> ### * ard_survival_survfit_diff
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_survival_survfit_diff
> ### Title: ARD Survival Differences
> ### Aliases: ard_survival_survfit_diff
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("survival", "ggsurvfit"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ library(ggsurvfit)
+ library(survival)
+ 
+ survfit(Surv_CNSR() ~ TRTA, data = cards::ADTTE) |>
+   ard_survival_survfit_diff(times = c(25, 50))
+ ## Don't show: 
+ }) # examplesIf
> library(ggsurvfit)
Loading required package: ggplot2
> library(survival)
> ard_survival_survfit_diff(survfit(Surv_CNSR() ~ TRTA, data = cards::ADTTE), 
+     times = c(25, 50))
{cards} data frame: 32 x 11
   group1 group1_level variable variable_level       stat_name stat_label
1    TRTA    Xanomeli…     time             25 reference_level  referenc…
2    TRTA    Xanomeli…     time             25          method     method
3    TRTA    Xanomeli…     time             25        estimate  Survival…
4    TRTA    Xanomeli…     time             25       std.error  Survival…
5    TRTA    Xanomeli…     time             25       statistic  z statis…
6    TRTA    Xanomeli…     time             25        conf.low  CI Lower…
7    TRTA    Xanomeli…     time             25       conf.high  CI Upper…
8    TRTA    Xanomeli…     time             25         p.value    p-value
9    TRTA    Xanomeli…     time             50 reference_level  referenc…
10   TRTA    Xanomeli…     time             50          method     method
        stat
1    Placebo
2  Survival…
3      0.293
4      0.067
5      4.392
6      0.162
7      0.424
8          0
9    Placebo
10 Survival…
ℹ 22 more rows
ℹ Use `print(n = ...)` to see more rows
ℹ 4 more variables: context, fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()

detaching ‘package:survival’, ‘package:ggplot2’, ‘package:ggsurvfit’

> nameEx("ard_total_n.survey.design")
> ### * ard_total_n.survey.design
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ard_total_n.survey.design
> ### Title: ARD Total N
> ### Aliases: ard_total_n.survey.design
> 
> ### ** Examples
> 
> ## Don't show: 
> if (cardx:::is_pkg_installed("survey", reference_pkg = "cardx")) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ svy_titanic <- survey::svydesign(~1, data = as.data.frame(Titanic), weights = ~Freq)
+ 
+ ard_total_n(svy_titanic)
+ ## Don't show: 
+ }) # examplesIf
> svy_titanic <- survey::svydesign(~1, data = as.data.frame(Titanic), weights = ~Freq)
> ard_total_n(svy_titanic)
{cards} data frame: 2 x 8
         variable context    stat_name stat_label stat fmt_fn
1 ..ard_total_n.. total_n            N          N 2201   <fn>
2 ..ard_total_n.. total_n N_unweighted  Unweight…   32   <fn>
ℹ 2 more variables: warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("construction_helpers")
> ### * construction_helpers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: construction_helpers
> ### Title: Construction Helpers
> ### Aliases: construction_helpers construct_model
> ###   construct_model.data.frame construct_model.survey.design reformulate2
> ###   bt bt_strip
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("withr", "lme4", "broom.helpers", "broom.mixed"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ construct_model(
+   data = mtcars,
+   formula = am ~ mpg + (1 | vs),
+   method = "glmer",
+   method.args = list(family = binomial),
+   package = "lme4"
+ ) |>
+   broom.mixed::tidy()
+ 
+ construct_model(
+   data = mtcars |> dplyr::rename(`M P G` = mpg),
+   formula = reformulate2(c("M P G", "cyl"), response = "hp"),
+   method = "lm"
+ ) |>
+   ard_regression() |>
+   dplyr::filter(stat_name %in% c("term", "estimate", "p.value"))
+ ## Don't show: 
+ }) # examplesIf
> broom.mixed::tidy(construct_model(data = mtcars, formula = am ~ mpg + 
+     (1 | vs), method = "glmer", method.args = list(family = binomial), package = "lme4"))
# A tibble: 3 × 7
  effect   group term            estimate std.error statistic p.value
  <chr>    <chr> <chr>              <dbl>     <dbl>     <dbl>   <dbl>
1 fixed    <NA>  (Intercept)       -8.70      4.12      -2.11  0.0347
2 fixed    <NA>  mpg                0.409     0.199      2.05  0.0403
3 ran_pars vs    sd__(Intercept)    0.790    NA         NA    NA     
> dplyr::filter(ard_regression(construct_model(data = dplyr::rename(mtcars, 
+     `M P G` = mpg), formula = reformulate2(c("M P G", "cyl"), response = "hp"), method = "lm")), 
+     stat_name %in% c("term", "estimate", "p.value"))
{cards} data frame: 6 x 8
  variable   context stat_name stat_label    stat fmt_fn
1    M P G regressi…      term       term `M P G`   NULL
2    M P G regressi…  estimate  Coeffici…  -2.775      1
3    M P G regressi…   p.value    p-value   0.213      1
4      cyl regressi…      term       term     cyl   NULL
5      cyl regressi…  estimate  Coeffici…  23.979      1
6      cyl regressi…   p.value    p-value   0.003      1
ℹ 2 more variables: warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dot-check_dichotomous_value")
> ### * dot-check_dichotomous_value
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .check_dichotomous_value
> ### Title: Perform Value Checks
> ### Aliases: .check_dichotomous_value
> ### Keywords: internal
> 
> ### ** Examples
> 
> cardx:::.check_dichotomous_value(mtcars, list(cyl = 4))
> 
> 
> 
> cleanEx()
> nameEx("dot-format_cohens_d_results")
> ### * dot-format_cohens_d_results
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .format_cohens_d_results
> ### Title: Convert Cohen's D Test to ARD
> ### Aliases: .format_cohens_d_results
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("effectsize", "parameters"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cardx:::.format_cohens_d_results(
+   by = "ARM",
+   variable = "AGE",
+   paired = FALSE,
+   lst_tidy =
+     cards::eval_capture_conditions(
+       effectsize::hedges_g(data[[variable]] ~ data[[by]], paired = FALSE) |>
+         parameters::standardize_names(style = "broom")
+     )
+ )
+ ## Don't show: 
+ }) # examplesIf
> cardx:::.format_cohens_d_results(by = "ARM", variable = "AGE", paired = FALSE, 
+     lst_tidy = cards::eval_capture_conditions(parameters::standardize_names(effectsize::hedges_g(data[[variable]] ~ 
+         data[[by]], paired = FALSE), style = "broom")))
{cards} data frame: 8 x 9
  group1 variable   stat_name stat_label      stat     error
1    ARM      AGE    estimate  Effect S…           object '…
2    ARM      AGE  conf.level  CI Confi…           object '…
3    ARM      AGE    conf.low  CI Lower…           object '…
4    ARM      AGE   conf.high  CI Upper…           object '…
5    ARM      AGE          mu    H0 Mean         0 object '…
6    ARM      AGE      paired  Paired t…     FALSE object '…
7    ARM      AGE   pooled_sd  Pooled S…      TRUE object '…
8    ARM      AGE alternative  Alternat… two.sided object '…
ℹ 3 more variables: context, fmt_fn, warning
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dot-format_hedges_g_results")
> ### * dot-format_hedges_g_results
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .format_hedges_g_results
> ### Title: Convert Hedge's G Test to ARD
> ### Aliases: .format_hedges_g_results
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("effectsize", "parameters"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cardx:::.format_hedges_g_results(
+   by = "ARM",
+   variable = "AGE",
+   paired = FALSE,
+   lst_tidy =
+     cards::eval_capture_conditions(
+       effectsize::hedges_g(data[[variable]] ~ data[[by]], paired = FALSE) |>
+         parameters::standardize_names(style = "broom")
+     )
+ )
+ ## Don't show: 
+ }) # examplesIf
> cardx:::.format_hedges_g_results(by = "ARM", variable = "AGE", paired = FALSE, 
+     lst_tidy = cards::eval_capture_conditions(parameters::standardize_names(effectsize::hedges_g(data[[variable]] ~ 
+         data[[by]], paired = FALSE), style = "broom")))
{cards} data frame: 8 x 9
  group1 variable   stat_name stat_label      stat     error
1    ARM      AGE    estimate  Effect S…           object '…
2    ARM      AGE  conf.level  CI Confi…           object '…
3    ARM      AGE    conf.low  CI Lower…           object '…
4    ARM      AGE   conf.high  CI Upper…           object '…
5    ARM      AGE          mu    H0 Mean         0 object '…
6    ARM      AGE      paired  Paired t…     FALSE object '…
7    ARM      AGE   pooled_sd  Pooled S…      TRUE object '…
8    ARM      AGE alternative  Alternat… two.sided object '…
ℹ 3 more variables: context, fmt_fn, warning
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dot-format_mcnemartest_results")
> ### * dot-format_mcnemartest_results
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .format_mcnemartest_results
> ### Title: Convert McNemar's test to ARD
> ### Aliases: .format_mcnemartest_results
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cardx:::.format_mcnemartest_results(
+   by = "ARM",
+   variable = "AGE",
+   lst_tidy =
+     cards::eval_capture_conditions(
+       stats::mcnemar.test(cards::ADSL[["SEX"]], cards::ADSL[["EFFFL"]]) |>
+         broom::tidy()
+     )
+ )
+ ## Don't show: 
+ }) # examplesIf
> cardx:::.format_mcnemartest_results(by = "ARM", variable = "AGE", lst_tidy = cards::eval_capture_conditions(broom::tidy(stats::mcnemar.test(cards::ADSL[["SEX"]], 
+     cards::ADSL[["EFFFL"]]))))
{cards} data frame: 5 x 9
  group1 variable   context stat_name stat_label      stat
1    ARM      AGE stats_mc… statistic  X-square…    111.91
2    ARM      AGE stats_mc…   p.value    p-value         0
3    ARM      AGE stats_mc… parameter  Degrees …         1
4    ARM      AGE stats_mc…    method     method McNemar'…
5    ARM      AGE stats_mc…   correct    correct      TRUE
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dot-format_moodtest_results")
> ### * dot-format_moodtest_results
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .format_moodtest_results
> ### Title: Convert mood test results to ARD
> ### Aliases: .format_moodtest_results
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cardx:::.format_moodtest_results(
+   by = "SEX",
+   variable = "AGE",
+   lst_tidy =
+     cards::eval_capture_conditions(
+       stats::mood.test(ADSL[["AGE"]] ~ ADSL[["SEX"]]) |>
+         broom::tidy()
+     )
+ )
+ ## Don't show: 
+ }) # examplesIf
> cardx:::.format_moodtest_results(by = "SEX", variable = "AGE", lst_tidy = cards::eval_capture_conditions(broom::tidy(stats::mood.test(ADSL[["AGE"]] ~ 
+     ADSL[["SEX"]]))))
{cards} data frame: 4 x 9
  group1 variable   stat_name stat_label stat     error
1    SEX      AGE   statistic  Z-Statis…      object '…
2    SEX      AGE     p.value    p-value      object '…
3    SEX      AGE      method     method      object '…
4    SEX      AGE alternative  Alternat…      object '…
ℹ 3 more variables: context, fmt_fn, warning
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dot-format_poissontest_results")
> ### * dot-format_poissontest_results
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .format_poissontest_results
> ### Title: Convert Poisson test to ARD
> ### Aliases: .format_poissontest_results
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cardx:::.format_poissontest_results(
+   by = "ARM",
+   variables = c("CNSR", "AVAL"),
+   lst_tidy =
+     cards::eval_capture_conditions(
+       stats::poisson.test(sum(cards::ADTTE[["CNSR"]]), sum(cards::ADTTE[["AVAL"]])) |>
+         broom::tidy()
+     )
+ )
+ ## Don't show: 
+ }) # examplesIf
> cardx:::.format_poissontest_results(by = "ARM", variables = c("CNSR", 
+     "AVAL"), lst_tidy = cards::eval_capture_conditions(broom::tidy(stats::poisson.test(sum(cards::ADTTE[["CNSR"]]), 
+     sum(cards::ADTTE[["AVAL"]])))))
{cards} data frame: 10 x 9
   group1 variable   context   stat_name stat_label      stat
1     ARM     AVAL stats_po…    estimate  Estimate…     0.006
2     ARM     AVAL stats_po…   statistic  Number o…       102
3     ARM     AVAL stats_po…     p.value    p-value         0
4     ARM     AVAL stats_po…   parameter  Expected…     16853
5     ARM     AVAL stats_po…    conf.low  CI Lower…     0.005
6     ARM     AVAL stats_po…   conf.high  CI Upper…     0.007
7     ARM     AVAL stats_po…      method     method Exact Po…
8     ARM     AVAL stats_po… alternative  alternat… two.sided
9     ARM     AVAL stats_po…  conf.level  CI Confi…      0.95
10    ARM     AVAL stats_po…          mu    H0 Mean         1
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dot-format_survfit_results")
> ### * dot-format_survfit_results
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .format_survfit_results
> ### Title: Convert Tidied Survival Fit to ARD
> ### Aliases: .format_survfit_results
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("survival", "broom"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cardx:::.format_survfit_results(
+   broom::tidy(survival::survfit(survival::Surv(AVAL, CNSR) ~ TRTA, cards::ADTTE))
+ )
+ ## Don't show: 
+ }) # examplesIf
> cardx:::.format_survfit_results(broom::tidy(survival::survfit(survival::Surv(AVAL, 
+     CNSR) ~ TRTA, cards::ADTTE)))
{cards} data frame: 805 x 12
   group1 group1_level variable variable_level stat_name stat_label stat
1    TRTA      Placebo     time              1    n.risk  Number o…   86
2    TRTA      Placebo     time              1  estimate  Survival…    1
3    TRTA      Placebo     time              1 std.error  Standard…    0
4    TRTA      Placebo     time              1 conf.high  CI Upper…    1
5    TRTA      Placebo     time              1  conf.low  CI Lower…    1
6    TRTA      Placebo     time              2    n.risk  Number o…   85
7    TRTA      Placebo     time              2  estimate  Survival…    1
8    TRTA      Placebo     time              2 std.error  Standard…    0
9    TRTA      Placebo     time              2 conf.high  CI Upper…    1
10   TRTA      Placebo     time              2  conf.low  CI Lower…    1
   n.event n.censor
1        0        1
2        0        1
3        0        1
4        0        1
5        0        1
6        0        1
7        0        1
8        0        1
9        0        1
10       0        1
ℹ 795 more rows
ℹ Use `print(n = ...)` to see more rows
ℹ 3 more variables: fmt_fn, warning, error
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dot-format_ttest_results")
> ### * dot-format_ttest_results
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .format_ttest_results
> ### Title: Convert t-test to ARD
> ### Aliases: .format_ttest_results
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ cardx:::.format_ttest_results(
+   by = "ARM",
+   variable = "AGE",
+   paired = FALSE,
+   lst_tidy =
+     cards::eval_capture_conditions(
+       stats::t.test(ADSL[["AGE"]] ~ ADSL[["ARM"]], paired = FALSE) |>
+         broom::tidy()
+     )
+ )
+ ## Don't show: 
+ }) # examplesIf
> cardx:::.format_ttest_results(by = "ARM", variable = "AGE", paired = FALSE, 
+     lst_tidy = cards::eval_capture_conditions(broom::tidy(stats::t.test(ADSL[["AGE"]] ~ 
+         ADSL[["ARM"]], paired = FALSE))))
{cards} data frame: 14 x 9
   group1 variable   stat_name stat_label  stat     error
1     ARM      AGE    estimate  Mean Dif…       object '…
2     ARM      AGE   estimate1  Group 1 …       object '…
3     ARM      AGE   estimate2  Group 2 …       object '…
4     ARM      AGE   statistic  t Statis…       object '…
5     ARM      AGE     p.value    p-value       object '…
6     ARM      AGE   parameter  Degrees …       object '…
7     ARM      AGE    conf.low  CI Lower…       object '…
8     ARM      AGE   conf.high  CI Upper…       object '…
9     ARM      AGE      method     method       object '…
10    ARM      AGE alternative  alternat…       object '…
11    ARM      AGE          mu    H0 Mean     0 object '…
12    ARM      AGE      paired  Paired t… FALSE object '…
13    ARM      AGE   var.equal  Equal Va… FALSE object '…
14    ARM      AGE  conf.level  CI Confi…  0.95 object '…
ℹ 3 more variables: context, fmt_fn, warning
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dot-format_wilcoxtest_results")
> ### * dot-format_wilcoxtest_results
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .format_wilcoxtest_results
> ### Title: Convert Wilcoxon test to ARD
> ### Aliases: .format_wilcoxtest_results
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ # Pre-processing ADSL to have grouping factor (ARM here) with 2 levels
+ ADSL <- cards::ADSL |>
+   dplyr::filter(ARM %in% c("Placebo", "Xanomeline High Dose")) |>
+   ard_stats_wilcox_test(by = "ARM", variables = "AGE")
+ 
+ cardx:::.format_wilcoxtest_results(
+   by = "ARM",
+   variable = "AGE",
+   paired = FALSE,
+   lst_tidy =
+     cards::eval_capture_conditions(
+       stats::wilcox.test(ADSL[["AGE"]] ~ ADSL[["ARM"]], paired = FALSE) |>
+         broom::tidy()
+     )
+ )
+ ## Don't show: 
+ }) # examplesIf
> ADSL <- ard_stats_wilcox_test(dplyr::filter(cards::ADSL, ARM %in% c("Placebo", 
+     "Xanomeline High Dose")), by = "ARM", variables = "AGE")
> cardx:::.format_wilcoxtest_results(by = "ARM", variable = "AGE", paired = FALSE, 
+     lst_tidy = cards::eval_capture_conditions(broom::tidy(stats::wilcox.test(ADSL[["AGE"]] ~ 
+         ADSL[["ARM"]], paired = FALSE))))
{cards} data frame: 12 x 9
   group1 variable   stat_name stat_label  stat     error
1     ARM      AGE   statistic  X-square…       invalid …
2     ARM      AGE     p.value    p-value       invalid …
3     ARM      AGE      method     method       invalid …
4     ARM      AGE alternative  alternat…       invalid …
5     ARM      AGE          mu         mu     0 invalid …
6     ARM      AGE      paired  Paired t… FALSE invalid …
7     ARM      AGE       exact      exact       invalid …
8     ARM      AGE     correct    correct  TRUE invalid …
9     ARM      AGE    conf.int   conf.int FALSE invalid …
10    ARM      AGE  conf.level  CI Confi…  0.95 invalid …
11    ARM      AGE    tol.root   tol.root     0 invalid …
12    ARM      AGE digits.rank  digits.r…   Inf invalid …
ℹ 3 more variables: context, fmt_fn, warning
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dot-paired_data_pivot_wider")
> ### * dot-paired_data_pivot_wider
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .paired_data_pivot_wider
> ### Title: Convert long paired data to wide
> ### Aliases: .paired_data_pivot_wider
> ### Keywords: internal
> 
> ### ** Examples
> 
> cards::ADSL[c("ARM", "AGE")] |>
+   dplyr::filter(ARM %in% c("Placebo", "Xanomeline High Dose")) |>
+   dplyr::mutate(.by = ARM, USUBJID = dplyr::row_number()) |>
+   dplyr::arrange(USUBJID, ARM) |>
+   cardx:::.paired_data_pivot_wider(by = "ARM", variable = "AGE", id = "USUBJID")
# A tibble: 86 × 3
   USUBJID   by1   by2
     <int> <dbl> <dbl>
 1       1    63    71
 2       2    64    77
 3       3    85    81
 4       4    52    75
 5       5    84    57
 6       6    79    56
 7       7    81    79
 8       8    69    56
 9       9    63    61
10      10    81    56
# ℹ 76 more rows
> 
> 
> 
> cleanEx()
> nameEx("dot-process_nested_list_as_df")
> ### * dot-process_nested_list_as_df
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .process_nested_list_as_df
> ### Title: Convert Nested Lists to Column
> ### Aliases: .process_nested_list_as_df
> ### Keywords: internal
> 
> ### ** Examples
> 
> ard <- ard_categorical(cards::ADSL, by = "ARM", variables = "AGEGR1")
> 
> cardx:::.process_nested_list_as_df(ard, NULL, "new_col")
{cards} data frame: 27 x 12
   group1 group1_level variable variable_level stat_name stat_label  stat
1     ARM      Placebo   AGEGR1          65-80         n          n    42
2     ARM      Placebo   AGEGR1          65-80         N          N    86
3     ARM      Placebo   AGEGR1          65-80         p          % 0.488
4     ARM    Xanomeli…   AGEGR1          65-80         n          n    55
5     ARM    Xanomeli…   AGEGR1          65-80         N          N    84
6     ARM    Xanomeli…   AGEGR1          65-80         p          % 0.655
7     ARM    Xanomeli…   AGEGR1          65-80         n          n    47
8     ARM    Xanomeli…   AGEGR1          65-80         N          N    84
9     ARM    Xanomeli…   AGEGR1          65-80         p          %  0.56
10    ARM      Placebo   AGEGR1            <65         n          n    14
   new_col
1     NULL
2     NULL
3     NULL
4     NULL
5     NULL
6     NULL
7     NULL
8     NULL
9     NULL
10    NULL
ℹ 17 more rows
ℹ Use `print(n = ...)` to see more rows
ℹ 4 more variables: context, fmt_fn, warning, error
> 
> 
> 
> cleanEx()
> nameEx("dot-process_survfit_probs")
> ### * dot-process_survfit_probs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .process_survfit_probs
> ### Title: Process Survival Fit For Quantile Estimates
> ### Aliases: .process_survfit_probs
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "survival", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ survival::survfit(survival::Surv(AVAL, CNSR) ~ TRTA, cards::ADTTE) |>
+   cardx:::.process_survfit_probs(probs = c(0.25, 0.75))
+ ## Don't show: 
+ }) # examplesIf
> cardx:::.process_survfit_probs(survival::survfit(survival::Surv(AVAL, 
+     CNSR) ~ TRTA, cards::ADTTE), probs = c(0.25, 0.75))
# A tibble: 6 × 6
  strata                    estimate conf.low conf.high  prob context         
  <chr>                        <dbl>    <dbl>     <dbl> <dbl> <chr>           
1 TRTA=Placebo                   142       70       181  0.25 survival_survfit
2 TRTA=Xanomeline High Dose       44       22       180  0.25 survival_survfit
3 TRTA=Xanomeline Low Dose        49       37       180  0.25 survival_survfit
4 TRTA=Placebo                   184      183       191  0.75 survival_survfit
5 TRTA=Xanomeline High Dose      188      167        NA  0.75 survival_survfit
6 TRTA=Xanomeline Low Dose       184      180        NA  0.75 survival_survfit
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dot-process_survfit_time")
> ### * dot-process_survfit_time
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .process_survfit_time
> ### Title: Process Survival Fit For Time Estimates
> ### Aliases: .process_survfit_time
> ### Keywords: internal
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = c("survival", "broom"), reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ survival::survfit(survival::Surv(AVAL, CNSR) ~ TRTA, cards::ADTTE) |>
+   cardx:::.process_survfit_time(times = c(60, 180), type = "risk")
+ ## Don't show: 
+ }) # examplesIf
> cardx:::.process_survfit_time(survival::survfit(survival::Surv(AVAL, CNSR) ~ 
+     TRTA, cards::ADTTE), times = c(60, 180), type = "risk")
# A tibble: 6 × 8
   time n.risk estimate std.error strata              conf.high conf.low context
  <dbl>  <dbl>    <dbl>     <dbl> <fct>                   <dbl>    <dbl> <chr>  
1    60     59    0.107    0.0360 TRTA=Placebo            0.175   0.0338 risk   
2    60     14    0.306    0.0712 TRTA=Xanomeline Hi…     0.432   0.151  risk   
3    60     20    0.268    0.0680 TRTA=Xanomeline Lo…     0.390   0.122  risk   
4   180     35    0.349    0.0615 TRTA=Placebo            0.459   0.217  risk   
5   180      3    0.738    0.140  TRTA=Xanomeline Hi…     0.908   0.251  risk   
6   180      5    0.619    0.130  TRTA=Xanomeline Lo…     0.805   0.257  risk   
> ## End(Don't show)
> 
> 
> 
> cleanEx()
> nameEx("dot-strata_normal_quantile")
> ### * dot-strata_normal_quantile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .strata_normal_quantile
> ### Title: Helper Function for the Estimation of Stratified Quantiles
> ### Aliases: .strata_normal_quantile
> ### Keywords: internal
> 
> ### ** Examples
> 
> strata_data <- table(data.frame(
+   "f1" = sample(c(TRUE, FALSE), 100, TRUE),
+   "f2" = sample(c("x", "y", "z"), 100, TRUE),
+   stringsAsFactors = TRUE
+ ))
> ns <- colSums(strata_data)
> ests <- strata_data["TRUE", ] / ns
> vars <- ests * (1 - ests) / ns
> weights <- rep(1 / length(ns), length(ns))
> 
> cardx:::.strata_normal_quantile(vars, weights, 0.95)
[1] 1.133272
> 
> 
> 
> cleanEx()
> nameEx("dot-unique_and_sorted")
> ### * dot-unique_and_sorted
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .unique_and_sorted
> ### Title: ARD-flavor of unique()
> ### Aliases: .unique_and_sorted
> ### Keywords: internal
> 
> ### ** Examples
> 
> cards:::.unique_and_sorted(factor(letters[c(5, 5:1)], levels = letters))
 [1] a b c d e f g h i j k l m n o p q r s t u v w x y z
Levels: a b c d e f g h i j k l m n o p q r s t u v w x y z
> 
> cards:::.unique_and_sorted(c(FALSE, TRUE, TRUE, FALSE))
[1]  TRUE FALSE
> 
> cards:::.unique_and_sorted(c(5, 5:1))
[1] 1 2 3 4 5
> 
> 
> 
> cleanEx()
> nameEx("dot-update_weights_strat_wilson")
> ### * dot-update_weights_strat_wilson
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .update_weights_strat_wilson
> ### Title: Helper Function for the Estimation of Weights for
> ###   'proportion_ci_strat_wilson()'
> ### Aliases: .update_weights_strat_wilson
> ### Keywords: internal
> 
> ### ** Examples
> 
> vs <- c(0.011, 0.013, 0.012, 0.014, 0.017, 0.018)
> sq <- 0.674
> ws <- rep(1 / length(vs), length(vs))
> ns <- c(22, 18, 17, 17, 14, 12)
> 
> cardx:::.update_weights_strat_wilson(vs, sq, ws, ns, 100, 0.95, 0.001)
$n_it
[1] 3

$weights
[1] 0.2067191 0.1757727 0.1896962 0.1636346 0.1357615 0.1284160

$diff_v
[1] 1.458717e-01 1.497223e-03 1.442189e-06

> 
> 
> 
> cleanEx()
> nameEx("proportion_ci")
> ### * proportion_ci
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: proportion_ci
> ### Title: Functions for Calculating Proportion Confidence Intervals
> ### Aliases: proportion_ci proportion_ci_wald proportion_ci_wilson
> ###   proportion_ci_clopper_pearson proportion_ci_agresti_coull
> ###   proportion_ci_jeffreys proportion_ci_strat_wilson is_binary
> 
> ### ** Examples
> 
> ## Don't show: 
> if (do.call(asNamespace("cardx")$is_pkg_installed, list(pkg = "broom", reference_pkg = "cardx"))) (if (getRversion() >= "3.4") withAutoprint else force)({ # examplesIf
+ ## End(Don't show)
+ x <- c(
+   TRUE, TRUE, TRUE, TRUE, TRUE,
+   FALSE, FALSE, FALSE, FALSE, FALSE
+ )
+ 
+ proportion_ci_wald(x, conf.level = 0.9)
+ proportion_ci_wilson(x, correct = TRUE)
+ proportion_ci_clopper_pearson(x)
+ proportion_ci_agresti_coull(x)
+ proportion_ci_jeffreys(x)
+ ## Don't show: 
+ }) # examplesIf
> x <- c(TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE)
> proportion_ci_wald(x, conf.level = 0.9)
$N
[1] 10

$estimate
[1] 0.5

$conf.low
[1] 0.2399258

$conf.high
[1] 0.7600742

$conf.level
[1] 0.9

$method
Wald Confidence Interval without continuity correction

> proportion_ci_wilson(x, correct = TRUE)
$N
[1] 10

$conf.level
[1] 0.95

$estimate
  p 
0.5 

$statistic
X-squared 
        0 

$p.value
[1] 1

$parameter
df 
 1 

$conf.low
[1] 0.2365931

$conf.high
[1] 0.7634069

$method
Wilson Confidence Interval with continuity correction

$alternative
[1] "two.sided"

> proportion_ci_clopper_pearson(x)
$N
[1] 10

$conf.level
[1] 0.95

$estimate
probability of success 
                   0.5 

$statistic
number of successes 
                  5 

$p.value
[1] 1

$parameter
number of trials 
              10 

$conf.low
[1] 0.187086

$conf.high
[1] 0.812914

$method
[1] "Clopper-Pearson Confidence Interval"

$alternative
[1] "two.sided"

> proportion_ci_agresti_coull(x)
$N
[1] 10

$estimate
[1] 0.5

$conf.low
[1] 0.2365931

$conf.high
[1] 0.7634069

$conf.level
[1] 0.95

$method
[1] "Agresti-Coull Confidence Interval"

> proportion_ci_jeffreys(x)
$N
[1] 10

$estimate
[1] 0.5

$conf.low
[1] 0.2235287

$conf.high
[1] 0.7764713

$conf.level
[1] 0.95

$method
Jeffreys Interval

> ## End(Don't show)
> # Stratified Wilson confidence interval with unequal probabilities
> 
> set.seed(1)
> rsp <- sample(c(TRUE, FALSE), 100, TRUE)
> strata_data <- data.frame(
+   "f1" = sample(c("a", "b"), 100, TRUE),
+   "f2" = sample(c("x", "y", "z"), 100, TRUE),
+   stringsAsFactors = TRUE
+ )
> strata <- interaction(strata_data)
> n_strata <- ncol(table(rsp, strata)) # Number of strata
> 
> proportion_ci_strat_wilson(
+   x = rsp, strata = strata,
+   conf.level = 0.90
+ )
$N
[1] 100

$estimate
[1] 0.49

$conf.low
[1] 0.4072891

$conf.high
[1] 0.5647887

$conf.level
[1] 0.9

$weights
      a.x       b.x       a.y       b.y       a.z       b.z 
0.2074199 0.1776464 0.1915610 0.1604678 0.1351096 0.1277952 

$method
Stratified Wilson Confidence Interval without continuity correction

> 
> # Not automatic setting of weights
> proportion_ci_strat_wilson(
+   x = rsp, strata = strata,
+   weights = rep(1 / n_strata, n_strata),
+   conf.level = 0.90
+ )
$N
[1] 100

$estimate
[1] 0.49

$conf.low
[1] 0.4190436

$conf.high
[1] 0.5789733

$conf.level
[1] 0.9

$method
Stratified Wilson Confidence Interval without continuity correction

> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.462 0.206 8.032 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
